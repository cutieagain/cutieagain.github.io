<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Week01-01 JVM 核心技术--基础知识</title>
      <link href="2021/02/18/Week01-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/02/18/Week01-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第1课-JVM-核心技术–基础知识"><a href="#第1课-JVM-核心技术–基础知识" class="headerlink" title="第1课  JVM 核心技术–基础知识"></a>第1课  JVM 核心技术–基础知识</h1><p><strong>目录</strong></p><ol><li>JVM 基础知识：不积跬步，无以至千里</li><li>Java 字节码技术：不积细流，无以成江河</li><li>JVM 类加载器*：山不辞土，故能成其高</li><li>JVM 内存模型*：海不辞水，故能成其深</li><li>JVM 启动参数：博观而约取、厚积而薄发</li><li>第1课总结回顾与作业实践</li></ol><h2 id="1-JVM-核心技术–基础知识"><a href="#1-JVM-核心技术–基础知识" class="headerlink" title="1. JVM 核心技术–基础知识"></a>1. JVM 核心技术–基础知识</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a><strong>编程语言</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218232956.png" alt="image-20210218232956278"></p><p>面向过程、面向对象、面向函数</p><p>静态类型、动态类型</p><p>编译执行、解释执行</p><p>有虚拟机、无虚拟机</p><p>有 GC、无 GC</p><p>Java 是一种面向对象、静态类型、编译执行，</p><p>有 VM/GC 和运行时、跨平台的高级语言。</p><h3 id="编程语言跨平台"><a href="#编程语言跨平台" class="headerlink" title="编程语言跨平台"></a><strong>编程语言跨平台</strong></h3><p><strong>源代码跨平台</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218233210.png" alt="image-20210218233210633"></p><p><strong>二进制跨平台</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218233411.png" alt="image-20210218233411294"></p><p><strong>Java、C++、Rust 的区别</strong></p><p><strong>C/C++</strong> 完全相信而且惯着程序员，让大家自行管理内存，可以编写很自由的代码，但一不小心就会造成内存泄漏等问题，导致程序崩溃。</p><p><strong>Java/Golang</strong> 完全不相信程序员，但也惯着程序员。所有的内存生命周期都由 JVM 运行时统一管理。 在绝大部分场景下，你可以非常自由的写代码，而且不用关心内存到底是什么情况。 内存使用有问题的时候，我们可以通过 JVM 来进行信息相关的分析诊断和调整。 这也是本课程的目标。</p><p><strong>Rust</strong> 语言选择既不相信程序员，也不惯着程序员。 让你在写代码的时候，必须清楚明白的用 Rust 的规则管理好你的变量，好让机器能明白高效地分析和管理内存。 但是这样会导致代码不利于人的理解，写代码很不自由，学习成本也很高。</p><h3 id="字节码、类加载器、虚拟机"><a href="#字节码、类加载器、虚拟机" class="headerlink" title="字节码、类加载器、虚拟机"></a><strong>字节码、类加载器、虚拟机</strong></h3><p>![image-20210218233626837](/Users/cutie/Library/Application Support/typora-user-images/image-20210218233626837.png)</p><h2 id="2-Java-字节码技术"><a href="#2-Java-字节码技术" class="headerlink" title="2. Java 字节码技术"></a>2. Java 字节码技术</h2><h3 id="什么是字节码？"><a href="#什么是字节码？" class="headerlink" title="什么是字节码？"></a><strong>什么是字节码？</strong></h3><p>Java bytecode 由单字节（byte）的指令组成，理论上最多支持 256 个操作码（opcode）。</p><p>实际上 Java 只使用了200左右的操作码， 还有一些操作码则保留给调试操作。</p><p>根据指令的性质，主要分为四个大类：</p><ol><li>栈操作指令，包括与局部变量交互的指令</li><li>程序流程控制指令</li><li>对象操作指令，包括方法调用指令</li><li>算术运算以及类型转换指令</li></ol><p>1，java的所有的操作都发生在栈上；是用来真正做计算的</p><p>2，3，4都跟java语法相关的</p><h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a><strong>生成字节码</strong></h3><p>假如有一个最简单的类，源代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234107.png" alt="image-20210218234107349"></p><p>编译：javac demo/jvm0104/HelloByteCode.java</p><p>查看字节码：javap -c demo.jvm0104.HelloByteCode</p><h3 id="最简单的字节码"><a href="#最简单的字节码" class="headerlink" title="最简单的字节码"></a><strong>最简单的字节码</strong></h3><p>结果如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234121.png" alt="image-20210218234120981"></p><p>上图使用助记符的方式展示出来的</p><p>aload_0 是助记符，是字节码里面的操作码。栈，本地变量表。</p><p>运行时候，变量挪到栈上，运行结束后，放回本地变量表。</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234217.png" alt="image-20210218234217321"></p><h3 id="复杂点的例子"><a href="#复杂点的例子" class="headerlink" title="复杂点的例子"></a><strong>复杂点的例子</strong></h3><p>进一步：javap -c -verbose demo.jvm0104.HelloByteCode</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234244.png" alt="image-20210218234244088"></p><p>52.0默认表示java8的版本，每上一个大版本，都会加1</p><p>flags表示类是public还是非public</p><p>Constant pool，常量池</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234303.png" alt="image-20210218234303117"></p><h3 id="字节码的运行时结构"><a href="#字节码的运行时结构" class="headerlink" title="字节码的运行时结构"></a><strong>字节码的运行时结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234343.png" alt="image-20210218234343475"></p><p>JVM 是一台基于栈的计算机器。</p><p>每个线程都有一个独属于自己的线程栈（JVM Stack），用于存储栈帧（Frame）。</p><p>每一次方法调用，JVM 都会自动创建一个栈帧。</p><p>栈帧由操作数栈， 局部变量数组以及一个 Class 引用组成。</p><p>Class 引用 指向当前方法在运行时常量池中对应的 Class。</p><h3 id="从助记符到二进制"><a href="#从助记符到二进制" class="headerlink" title="从助记符到二进制"></a><strong>从助记符到二进制</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234358.png" alt="image-20210218234358007"></p><h3 id="四则运行的例子"><a href="#四则运行的例子" class="headerlink" title="四则运行的例子"></a><strong>四则运行的例子</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234411.png" alt="image-20210218234411785"></p><h3 id="数值处理与本地变量表"><a href="#数值处理与本地变量表" class="headerlink" title="数值处理与本地变量表"></a><strong>数值处理与本地变量表</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234433.png" alt="image-20210218234433598"></p><p>i int， load 加载到栈，store 放回，const常量， dstore double类型的存储</p><p>i2d integer转换为double</p><h3 id="算数操作与类型转换"><a href="#算数操作与类型转换" class="headerlink" title="算数操作与类型转换"></a><strong>算数操作与类型转换</strong></h3><p>算数操作与类型转换</p><p>![image-20210218234443510](/Users/cutie/Library/Application Support/typora-user-images/image-20210218234443510.png)</p><p>byte，boolean 用int，是最小单位，32位</p><p>int（32位）和long（64位）是否是原子性的？32位机器处理long需要处理2次，64位只要处理一次，主流的都是原子操作</p><h3 id="一个完整的循环控制"><a href="#一个完整的循环控制" class="headerlink" title="一个完整的循环控制"></a><strong>一个完整的循环控制</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234507.png" alt="image-20210218234507284"></p><p>if_icmpge 比较大小，如果不符合的话跳转到43，iinc int类型的自增加1，goto 跑到第18个标号，</p><h3 id="方法调用的指令"><a href="#方法调用的指令" class="headerlink" title="方法调用的指令"></a><strong>方法调用的指令</strong></h3><p>方法调用的指令：</p><p>invokestatic，顾名思义，这个指令用于调用某个类的静态方法，这是方法调用指令中最快的一个。</p><p>invokespecial, 用来调用构造函数，但也可以用于调用同一个类中的 private 方法, 以及可见的超类方法。</p><p>invokevirtual，如果是具体类型的目标对象，invokevirtual 用于调用公共，受保护和package 级的私有方法。</p><p>invokeinterface，当通过接口引用来调用方法时，将会编译为 invokeinterface 指令。</p><p>invokedynamic，JDK7 新增加的指令，是实现“动态类型语言”（Dynamically TypedLanguage）支持而进行的升级改进，同时也是 JDK8 以后支持 lambda 表达式的实现基础。</p><p><strong>一个动态例子</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234718.png" alt="image-20210218234718062"></p><h2 id="3-JVM-类加载器"><a href="#3-JVM-类加载器" class="headerlink" title="3. JVM 类加载器"></a>3. JVM 类加载器</h2><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a><strong>类的生命周期</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234745.png" alt="image-20210218234745547"></p><ol><li>加载（Loading）：找 Class 文件</li><li>验证（Verification）：验证格式、依赖</li><li>准备（Preparation）：静态字段、方法表</li><li>解析（Resolution）：符号解析为引用</li><li>初始化（Initialization）：构造器、静态变量赋值、静态代码块</li><li>使用（Using）</li><li>卸载（Unloading）</li></ol><h3 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a><strong>类的加载时机</strong></h3><ol><li>当虚拟机启动时，初始化用户指定的主类，就是启动执行的 main 方法所在的类；</li><li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类，就是 new一个类的时候要初始化；</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li><li>子类的初始化会触发父类的初始化；</li><li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类，其实跟前面一样，反射调用要么是已经有实例了，要么是静态方法，都需要初始化；</li><li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li></ol><p>1主类，2new，3，4静态调用，5父类，6default，7，8反射 </p><h3 id="不会初始化（可能会加载）"><a href="#不会初始化（可能会加载）" class="headerlink" title="不会初始化（可能会加载）"></a><strong>不会初始化（可能会加载）</strong></h3><ol><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li><li>通过类名获取 Class 对象，不会触发类的初始化，Hello.class 不会让 Hello 类初始化。</li><li>通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。Class.forName（“jvm.Hello”）默认会加载 Hello 类。</li><li>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作（加载了，但是不初始化）。</li></ol><h3 id="三类加载器"><a href="#三类加载器" class="headerlink" title="三类加载器"></a><strong>三类加载器</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234847.png" alt="image-20210218234847003"></p><p>三类加载器：</p><ol><li>启动类加载器（BootstrapClassLoader）</li><li>扩展类加载器（ExtClassLoader）</li><li>应用类加载器（AppClassLoader）</li></ol><p>加载器特点：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234857.png" alt="image-20210218234857042"></p><p>避免类被重复加载</p><ol><li>双亲委托：业务类加载器，需要用一个类的时候，父类加载器里面是否该类已经被加载了，如果没有，从祖父加载器中找是否已经加载了，如果找到了就给应用加载器使用</li><li>负责依赖：</li><li>缓存加载：类加载了就缓存起来，对每个类加载器来说，同一个类型的类只会被加载一次</li></ol><p>jdk9之前ExtClassLoader和AppClassLoader的父类都是URLClassLoader</p><h3 id="显示当前ClassLoader-加载了哪些-Jar？"><a href="#显示当前ClassLoader-加载了哪些-Jar？" class="headerlink" title="显示当前ClassLoader 加载了哪些 Jar？"></a><strong>显示当前ClassLoader 加载了哪些 Jar？</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234951.png" alt="image-20210218234951527"></p><h3 id="自定义-ClassLoader"><a href="#自定义-ClassLoader" class="headerlink" title="自定义 ClassLoader"></a><strong>自定义 ClassLoader</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235043.png" alt="image-20210218235043536"></p><h3 id="添加引用类的几种方式"><a href="#添加引用类的几种方式" class="headerlink" title="添加引用类的几种方式"></a><strong>添加引用类的几种方式</strong></h3><p>1、放到 JDK 的 lib/ext 下，或者-Djava.ext.dirs</p><p>2、 java –cp/classpath 或者 class 文件放到当前路径</p><p>3、自定义 ClassLoader 加载</p><p>4、拿到当前执行类的 ClassLoader，反射调用 addUrl 方法添加 Jar 或路径(JDK9 无效)。（JDK9之后只要一行）</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235342.png" alt="image-20210218235342159"></p><h2 id="4-JVM-内存模型"><a href="#4-JVM-内存模型" class="headerlink" title="4.JVM 内存模型"></a>4.JVM 内存模型</h2><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a><strong>JVM 内存结构</strong></h3><p>![image-20210218235435915](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235435915.png)</p><p>每个线程都只能访问自己的线程栈。</p><p>每个线程都不能访问（看不见）其他线程的局部变量。</p><p>所有原生类型的局部变量都存储在线程栈中，因此对其他线程是不可见的。</p><p>线程可以将一个原生变量值的副本传给另一个线程，但不能共享原生局部变量本身。</p><p>堆内存中包含了 Java 代码中创建的所有对象，不管是哪个线程创建的。 其中也涵盖了包装类型（例如 Byte，Integer，Long 等）。</p><p>不管是创建一个对象并将其赋值给局部变量， 还是赋值给另一个对象的成员变量， 创建的对象都会被保存到堆内存中。</p><p><strong>JVM 内存结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235503.png" alt="image-20210218235503518"></p><p>如果是原生数据类型的局部变量，那么它的内容就全部保留在线程栈上。</p><p>如果是对象引用，则栈中的局部变量槽位中保存着对象的引用地址，而实际的对象内容保存在堆中。</p><p>对象的成员变量与对象本身一起存储在堆上, 不管成员变量的类型是原生数值，还是对象引用。类的静态变量则和类定义一样都保存在堆中。</p><p><strong>JVM 内存结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235528.png" alt="image-20210218235528760"></p><p>总结一下：方法中使用的原生数据类型和对象引用地址在栈上存储；对象、对象成员与类定义、静态变量在堆上。</p><p>堆内存又称为“共享堆”，堆中的所有对象，可以被所有线程访问, 只要他们能拿到对象的引用地址。如果一个线程可以访问某个对象时，也就可以访问该对象的成员变量。</p><p>如果两个线程同时调用某个对象的同一方法，则它们都可以访问到这个对象的成员变量，但每个线程的局部变量副本是独立的。</p><h3 id="JVM-内存整体结构"><a href="#JVM-内存整体结构" class="headerlink" title="JVM 内存整体结构"></a><strong>JVM 内存整体结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235541.png" alt="image-20210218235541105"></p><p>每启动一个线程，JVM 就会在栈空间栈分配对应的 线程栈, 比如 1MB 的空间（-Xss1m）。</p><p>线程栈也叫做 Java 方法栈。 如果使用了JNI 方法，则会分配一个单独的本地方法栈(Native Stack)。</p><p>线程执行过程中，一般会有多个方法组成调用栈（Stack Trace）, 比如 A 调用 B，B调用 C。。。每执行到一个方法，就会创建对应的 栈帧（Frame）。</p><h3 id="JVM-栈内存结构"><a href="#JVM-栈内存结构" class="headerlink" title="JVM 栈内存结构"></a><strong>JVM 栈内存结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235553.png" alt="image-20210218235553092"></p><p>栈帧是一个逻辑上的概念，具体的大小在一个方法编写完成后基本上就能确定。</p><p>比如返回值 需要有一个空间存放吧，每个局部变量都需要对应的地址空间，此外还有给指令使用的 操作数栈，以及 class 指针（标识这个栈帧对应的是哪个类的方法,指向非堆里面的 Class 对象）。</p><h3 id="JVM-堆内存结构"><a href="#JVM-堆内存结构" class="headerlink" title="JVM 堆内存结构"></a><strong>JVM 堆内存结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235608.png" alt="image-20210218235608903"></p><p>堆内存是所有线程共用的内存空间，JVM 将Heap 内存分为年轻代（Young generation）和老年代（Old generation, 也叫 Tenured）两部分。</p><p>年轻代还划分为 3 个内存池，新生代（Edenspace）和存活区（Survivor space）, 在大部分GC 算法中有 2 个存活区（S0, S1），在我们可以观察到的任何时刻，S0 和 S1 总有一个是空的,但一般较小，也不浪费多少空间。</p><p>Non-Heap 本质上还是 Heap，只是一般不归 GC管理，里面划分为 3 个内存池。Metaspace, 以前叫持久代（永久代, Permanentgeneration）, Java8 换了个名字叫 Metaspace.</p><p>CCS, Compressed Class Space, 存放 class 信息的，和 Metaspace 有交叉。</p><p>Code Cache, 存放 JIT 编译器编译后的本地机器代码。</p><h3 id="CPU-与内存行为"><a href="#CPU-与内存行为" class="headerlink" title="CPU 与内存行为"></a><strong>CPU 与内存行为</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235702.png" alt="image-20210218235620082"></p><p>CPU 乱序执行</p><p>volatile 关键字</p><p>原子性操作</p><p>内存屏障</p><h3 id="小结：什么是-JMM"><a href="#小结：什么是-JMM" class="headerlink" title="小结：什么是 JMM?"></a><strong>小结：什么是 JMM?</strong></h3><p>所有的对象(包括内部的实例成员变量)，static 变量，以及数组，都必须存放到堆内存中。</p><p>局部变量，方法的形参/入参，异常处理语句的入参不允许在线程之间共享，所以不受内存模型的影响。</p><p>多个线程同时对一个变量访问时【读取/写入】，这时候只要有某个线程执行的是写操作，那么这种现象就称之为“冲突”。</p><p>可以被其他线程影响或感知的操作，称为线程间的交互行为， 可分为： 读取、写入、同步操作、外部操作等等。 其中同步操作包括：对 volatile 变量的读写，对管程（monitor）的锁定与解锁，线程的起始操作与结尾操作，线程启动和结束等等。 外部操作则是指对线程执行环境之外的操作，比如停止其他线程等等。</p><p>JMM 规范的是线程间的交互操作，而不管线程内部对局部变量进行的操作。</p><p>JMM 规范对应的是“[JSR-133. JavaMemory Model and ThreadSpecification]”，《Java 语言规范》的 [$17.4. Memory Model章节]</p><p>JMM 规范明确定义了不同的线程之间，通过哪些方式，在什么时候可以看见其他线程保存到共享变量中的值；以及在必要时，如何对共享变量的访问进行同步。这样的好处是屏蔽各种硬件平台和操作系统之间的内存访问差异，实现了 Java 并发程序真正的跨平台。</p><h2 id="5-JVM-启动参数"><a href="#5-JVM-启动参数" class="headerlink" title="5.JVM 启动参数"></a>5.JVM 启动参数</h2><h3 id="JVM-启动参数"><a href="#JVM-启动参数" class="headerlink" title="JVM 启动参数"></a><strong>JVM 启动参数</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235702.png" alt="image-20210218235702045"></p><p><strong>JVM 启动参数</strong></p><p>![image-20210218235740388](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235740388.png)</p><p>-server</p><p>-Dfile.encoding=UTF-8</p><p>-Xmx8g</p><p>-XX:+UseG1GC</p><p>-XX:MaxPermSize=256m</p><p>以-开头为标准参数，所有的 JVM 都要实现这些参数，并且向后兼容。</p><p>-D 设置系统属性。</p><p>以 -X 开头为非标准参数， 基本都是传给 JVM 的，默认 JVM 实现这些参数的功能，但是并不保证所有 JVM 实现都满足，且不保证向后兼容。 可以使用 java -X 命令来查看当前 JVM 支持的非标准参数。</p><p>以 –XX：开头为非稳定参数, 专门用于控制 JVM的行为，跟具体的 JVM 实现有关，随时可能会在下个版本取消。</p><p>XX：+-Flags 形式, +- 是对布尔值进行开关。</p><p>XX：key=value 形式, 指定某个选项的值。</p><p><strong>JVM 启动参数</strong></p><ol><li>系统属性参数</li><li>运行模式参数</li><li>堆内存设置参数</li><li>GC 设置参数</li><li>分析诊断参数</li><li>JavaAgent 参数</li></ol><h3 id="JVM-启动参数-系统属性"><a href="#JVM-启动参数-系统属性" class="headerlink" title="JVM 启动参数-系统属性"></a><strong>JVM 启动参数-系统属性</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235809.png" alt="image-20210218235809898"></p><p>-Dfile.encoding=UTF-8</p><p>-Duser.timezone=GMT+08</p><p>-Dmaven.test.skip=true</p><p>-Dio.netty.eventLoopThreads=8</p><p>System.setProperty(“a”,”A100”);</p><p>String a=System.getProperty(“a”);</p><p><strong>Linux上还可以通过: a=A100 java XXXJVM</strong></p><h3 id="启动参数-运行模式"><a href="#启动参数-运行模式" class="headerlink" title="启动参数-运行模式"></a><strong>启动参数-运行模式</strong></h3><ol><li>-server：设置 JVM 使用 server 模式，特点是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境。在具有 64 位能力的 JDK 环境下将默认启用该模式，而忽略 -client 参数。</li><li>-client ：JDK1.7 之前在32位的 x86 机器上的默认值是 -client 选项。设置 JVM 使用 client 模式，特点是启动速度比较快，但运行时性能和内存管理效率不高，通常用于客户端应用程序或者 PC 应用开发和调试。此外，我们知道 JVM 加载字节码后，可以解释执行，也可以编译成本地代码再执行，所以可以配置 JVM 对字节码的处理模式：</li><li>-Xint：在解释模式（interpreted mode）下运行，-Xint 标记会强制 JVM 解释执行所有的字节码，这当然会降低运行速度，通常低10倍或更多。</li><li>-Xcomp：-Xcomp 参数与-Xint 正好相反，JVM 在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。【注意预热】</li><li>-Xmixed：-Xmixed 是混合模式，将解释模式和编译模式进行混合使用，有 JVM 自己决定，这是 JVM 的默认模式，也是推荐模式。 我们使用 java -version 可以看到 mixed mode 等信息。</li></ol><p><strong>JVM 启动参数-堆内存</strong></p><p>![image-20210218235833782](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235833782.png)</p><p>-Xmx, 指定最大堆内存。 如 -Xmx4g. 这只是限制了 Heap 部分的最大值为4g。这个内存不包括栈内存，也不包括堆外使用的内存。</p><p>-Xms, 指定堆内存空间的初始大小。 如 -Xms4g。 而且指定的内存大小，并不是操作系统实际分配的初始值，而是GC先规划好，用到才分配。 专用服务器上需要保持 –Xms 和 –Xmx 一致，否则应用刚启动可能就有好几个 FullGC。当两者配置不一致时，堆内存扩容可能会导致性能抖动。</p><p>-Xmn, 等价于 -XX:NewSize，使用 G1 垃圾收集器 不应该 设置该选项，在其他的某些业务场景下可以设置。官方建议设置为 -Xmx 的 1/2 ~ 1/4.</p><p>-XX：MaxPermSize=size, 这是 JDK1.7 之前使用的。Java8 默认允许的Meta空间无限大，此参数无效。</p><p>-XX：MaxMetaspaceSize=size, Java8 默认不限制 Meta 空间, 一般不允许设置该选项。</p><p>-XX：MaxDirectMemorySize=size，系统可以使用的最大堆外内存，这个参数跟 -Dsun.nio.MaxDirectMemorySize 效果相同。</p><p>-Xss, 设置每个线程栈的字节数。 例如 -Xss1m 指定线程栈为 1MB，与-XX:ThreadStackSize=1m 等价</p><p>堆内（Xms-Xmx）</p><p>非堆+堆外</p><ol><li>如果什么都不配置会如何？</li><li>Xmx 是否与 Xms 设置相等？</li><li>Xmx 设置为机器内存的什么比例合适？</li><li>作业：画一下 Xmx、Xms、Xmn、Meta、</li></ol><p>DirectMemory、Xss 这些内存参数的关系</p><h3 id="JVM-启动参数-GC-相关"><a href="#JVM-启动参数-GC-相关" class="headerlink" title="JVM 启动参数 - GC 相关"></a><strong>JVM 启动参数 - GC 相关</strong></h3><p>![image-20210218235908235](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235908235.png)</p><p>-XX：+UseG1GC：使用 G1 垃圾回收器</p><p>-XX：+UseConcMarkSweepGC：使用 CMS 垃圾回收器</p><p>-XX：+UseSerialGC：使用串行垃圾回收器</p><p>-XX：+UseParallelGC：使用并行垃圾回收器</p><p>// Java 11+</p><p>-XX：+UnlockExperimentalVMOptions -XX:+UseZGC</p><p>// Java 12+</p><ol><li>各个 JVM 版本的默认 GC 是什么？ -XX：+UnlockExperimentalVMOptions -XX:+UseShenandoahGC</li></ol><h3 id="JVM-启动参数-分析诊断"><a href="#JVM-启动参数-分析诊断" class="headerlink" title="JVM 启动参数-分析诊断"></a><strong>JVM 启动参数-分析诊断</strong></h3><p>-XX：+-HeapDumpOnOutOfMemoryError 选项, 当 OutOfMemoryError 产生，即内存溢出(堆内或持久代)时，自动 Dump 堆内存。</p><p>示例用法： java -XX:+HeapDumpOnOutOfMemoryError -Xmx256m ConsumeHeap</p><p>-XX：HeapDumpPath 选项, 与 HeapDumpOnOutOfMemoryError 搭配使用, 指定内存溢出时 Dump文件的目录。</p><p>如果没有指定则默认为启动 Java 程序的工作目录。</p><p>示例用法： java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/ ConsumeHeap</p><p>自动 Dump 的 hprof 文件会存储到 /usr/local/ 目录下。</p><p>-XX：OnError 选项, 发生致命错误时（fatal error）执行的脚本。</p><p>例如, 写一个脚本来记录出错时间, 执行一些命令, 或者 curl 一下某个在线报警的 url.</p><p>示例用法：java -XX:OnError=”gdb - %p” MyApp</p><p>可以发现有一个 %p 的格式化字符串，表示进程 PID。</p><p>-XX：OnOutOfMemoryError 选项, 抛出 OutOfMemoryError 错误时执行的脚本。</p><p>-XX：ErrorFile=filename 选项, 致命错误的日志文件名,绝对路径或者相对路径。</p><p>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1506，远程调试</p><h3 id="JVM-启动参数-JavaAgent"><a href="#JVM-启动参数-JavaAgent" class="headerlink" title="JVM 启动参数 -JavaAgent"></a><strong>JVM 启动参数 -JavaAgent</strong></h3><p>Agent 是 JVM 中的一项黑科技, 可以通过无侵入方式来做很多事情，比如注入 AOP 代码，执行统计等等，权限非常大。这里简单介绍一下配置选项，详细功能需要专门来讲。</p><p>设置 agent 的语法如下:</p><p>agentlib:libname[=options] 启用 native 方式的 agent, 参考 LD_LIBRARY_PATH 路径。</p><p>agentpath:pathname[=options] 启用 native 方式的 agent。</p><p>javaagent:jarpath[=options] 启用外部的 agent 库, 比如 pinpoint.jar 等等。</p><p>Xnoagent 则是禁用所有 agent。</p><p>以下示例开启 CPU 使用时间抽样分析:</p><p>JAVA_OPTS=”-agentlib:hprof=cpu=samples,file=cpu.samples.log”</p><h2 id="6-总结回顾与作业实践"><a href="#6-总结回顾与作业实践" class="headerlink" title="6.总结回顾与作业实践"></a>6.总结回顾与作业实践</h2><h3 id="第1课总结回顾"><a href="#第1课总结回顾" class="headerlink" title="第1课总结回顾"></a><strong>第1课总结回顾</strong></h3><p>字节码技术</p><p>类加载器</p><p>内存模型</p><p>启动参数</p><h3 id="第1课作业实践"><a href="#第1课作业实践" class="headerlink" title="第1课作业实践"></a><strong>第1课作业实践</strong></h3><p>1、（可选）自己写一个简单的 Hello.java，里面需要涉及基本类型，四则运行，if 和 for，然后自己分析一下对应的字节码，有问题群里讨论。</p><p>2、（必做）自定义一个 Classloader，加载一个 Hello.xlass 文件，执行 hello 方法，此文件内容是一个 Hello.class 文件所有字节（x=255-x）处理后的文件。文件群里提供。</p><p>3、（必做）画一张图，展示 Xmx、Xms、Xmn、Meta、DirectMemory、Xss 这些内存参数的关系。</p><p>4、（可选）检查一下自己维护的业务系统的 JVM 参数配置，用 jstat 和 jstack、jmap 查看一下详情，并且自己独立分析一下大概情况，思考有没有不合理的地方，如何改进。</p><p>注意：如果没有线上系统，可以自己 run 一个 web/java 项目。</p><h2 id="7-其他笔记"><a href="#7-其他笔记" class="headerlink" title="7.其他笔记"></a>7.其他笔记</h2><p>java特性</p><p>GC - 垃圾回收，jvm内存管理器；golang和rust在编译时候就进行垃圾回收处理，不需要虚拟机。java是二进制跨平台，c&amp;c++是源代码跨平台的。</p><p>java跨平台，一直向前兼容，生态完整（任何东西java实现都可以找到）。</p><p><strong>总结下学了什么，有哪些点没懂？</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> java训练营 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/18/hello-world/"/>
      <url>2021/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
