<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Week01-02 JVM 核心技术--工具与 GC 策略</title>
      <link href="2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-02-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%B7%A5%E5%85%B7%E4%B8%8E-GC-%E7%AD%96%E7%95%A5/"/>
      <url>2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-02-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%B7%A5%E5%85%B7%E4%B8%8E-GC-%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-课-JVM-核心技术–工具与-GC-策略"><a href="#第-2-课-JVM-核心技术–工具与-GC-策略" class="headerlink" title="第 2 课 JVM 核心技术–工具与 GC 策略"></a>第 2 课 JVM 核心技术–工具与 GC 策略</h1><p><strong>目录</strong></p><ol><li>JDK 内置命令行工具*</li><li>JDK 内置图形化工具*</li><li>GC 的背景与一般原理</li><li>串行 GC/并行 GC*（Serial GC/Parallel GC）</li><li>CMS GC/G1 GC*</li><li>ZGC/Shenandoah GC</li><li>第 2 节课总结回顾与作业实践</li></ol><h2 id="1-JDK-内置命令行工具"><a href="#1-JDK-内置命令行工具" class="headerlink" title="1.JDK 内置命令行工具"></a>1.JDK 内置命令行工具</h2><p><strong>JVM 命令行工具</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c34236c8-4f66-4205-b0b6-4df40ec752dd/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c34236c8-4f66-4205-b0b6-4df40ec752dd/Untitled.png"></p><p><strong>工具 简介</strong></p><p><strong>java</strong> Java 应用的启动程序</p><p><strong>javac</strong> JDK 内置的编译工具</p><p><strong>javap</strong> 反编译 class 文件的工具</p><p><strong>javadoc</strong> 根据 Java 代码和标准注释,自动生成相关的API说明文档</p><p><strong>javah</strong> JNI 开发时, 根据 java 代码生成需要的 .h文件。</p><p><strong>extcheck</strong> 检查某个 jar 文件和运行时扩展 jar 有没有版本冲突，很少使用</p><p><strong>jdb</strong> Java Debugger ; 可以调试本地和远端程序, 属于 JPDA 中的一个 demo 实现, 供其他调试器参考。开发时很少使用</p><p><strong>jdeps</strong> 探测 class 或 jar 包需要的依赖</p><p><strong>jar</strong> 打包工具，可以将文件和目录打包成为 .jar 文件；.jar 文件本质上就是 zip 文件,只是后缀不同。使用时按顺序对应好选项和参数即可。</p><p><strong>keytool</strong> 安全证书和密钥的管理工具; （支持生成、导入、导出等操作）</p><p><strong>jarsigner</strong> JAR 文件签名和验证工具</p><p><strong>policytool</strong> 实际上这是一款图形界面工具, 管理本机的 Java 安全策略</p><p><strong>JVM 命令行工具</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2ee0dc92-2c82-4ef9-8c0f-be13a61d652c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2ee0dc92-2c82-4ef9-8c0f-be13a61d652c/Untitled.png"></p><p><strong>工具 简介</strong></p><p><strong>jps/jinfo</strong> 查看 java 进程</p><p><strong>jstat</strong> 查看 JVM 内部 gc 相关信息</p><p><strong>jmap</strong> 查看 heap 或类占用空间统计</p><p><strong>jstack</strong> 查看线程信息</p><p><strong>jcmd</strong> 执行 JVM 相关分析命令（整合命令）</p><p><strong>jrunscript/jjs</strong> 执行 js 命令</p><p><strong>JVM 命令行工具-jps/jinfo</strong> D:&gt;jps</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8115ebc-479a-4b1a-9419-f09665d5d398/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8115ebc-479a-4b1a-9419-f09665d5d398/Untitled.png"></p><p>32432</p><p>1716 Jps</p><p>23784 QuorumPeerMain</p><p>4264 Bootstrap</p><p>2460 Launcher</p><p>D:&gt;jps -help</p><p>usage: jps [-help]</p><p>jps [-q] [-mlvV] [<hostid>]</hostid></p><p>Definitions:</p><p><hostid>: <hostname>[:<port>]</port></hostname></hostid></p><p>*<em>JVM 命令行工具-jstat**</em></p><blockquote><p>jstat -options</p></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d2caa856-2c32-47c6-904c-83a7851f5489/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d2caa856-2c32-47c6-904c-83a7851f5489/Untitled.png"></p><p>class 类加载(Class loader)信息统计.</p><p>compiler JIT 即时编译器相关的统计信息。</p><p>gc GC 相关的堆内存信息. 用法: jstat -gc -h 10 -t 864 1s 20</p><p>gccapacity 各个内存池分代空间的容量。</p><p>gccause 看上次 GC, 本次 GC（如果正在 GC中）的原因, 其他输出和 -gcutil 选项一致。</p><p>gcnew 年轻代的统计信息. （New = Young = Eden + S0 + S1）</p><p>gcnewcapacity 年轻代空间大小统计.</p><p>gcold 老年代和元数据区的行为统计。</p><p>gcoldcapacity old 空间大小统计.</p><p>gcmetacapacity meta 区大小统计.</p><p>gcutil GC 相关区域的使用率（utilization）统计。</p><p>printcompilation 打印 JVM 编译统计信息。</p><p><strong>JVM 命令行工具-jstat</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/91855237-c3fe-4a17-9721-64a0b056b1c2/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/91855237-c3fe-4a17-9721-64a0b056b1c2/Untitled.png"></p><p>演示：</p><p>jstat -gcutil pid 1000 1000</p><p><strong>JVM 命令行工具-jstat</strong> 演示</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c089eba8-fc09-432c-8553-9520ab3ceca2/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c089eba8-fc09-432c-8553-9520ab3ceca2/Untitled.png"></p><p>jstat -gc pid 1000 1000</p><p><strong>JVM 命令行工具-jmap</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6ae92792-af6a-49aa-a056-28a37889e56c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6ae92792-af6a-49aa-a056-28a37889e56c/Untitled.png"></p><p>常用选项就 3 个：</p><p>heap 打印堆内存（/内存池）的配置和</p><p>使用信息。</p><p>histo 看哪些类占用的空间最多, 直方图</p><p>dump:format=b,file=xxxx.hprof</p><p>Dump 堆内存。</p><p>演示:</p><p>jmap -heap pid</p><p>jmap -histo pid</p><p>jmap -dump:format=b,file=3826.hprof</p><p>3826</p><p><strong>JVM 命令行工具-jstack</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2515448d-95dd-45fa-840a-75babf18cf23/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2515448d-95dd-45fa-840a-75babf18cf23/Untitled.png"></p><p>F 强制执行 thread dump. 可在 Java 进程卡死</p><p>（hung 住）时使用, 此选项可能需要系统权限。</p><p>m 混合模式(mixed mode),将 Java 帧和 native</p><p>帧一起输出, 此选项可能需要系统权限。</p><p>l 长列表模式. 将线程相关的 locks 信息一起输出，</p><p>比如持有的锁，等待的锁。</p><p>演示：</p><p>jstack pid -l</p><p>*<em>JVM 命令行工具-jcmd**</em></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/454e8d19-5674-4573-958a-2372985e29bc/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/454e8d19-5674-4573-958a-2372985e29bc/Untitled.png"></p><p>Jcmd 综合了前面的几个命令</p><p>示例：</p><p>jcmd pid VM.version</p><p>jcmd pid VM.flags</p><p>jcmd pid VM.command_line</p><p>jcmd pid VM.system_properties</p><p>jcmd pid Thread.print</p><p>jcmd pid GC.class_histogram</p><p>jcmd pid GC.heap_info</p><p><strong>JVM 命令行工具-jrunscript/jjs</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb845609-9d11-41e0-b96d-b9a9ca583ce9/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb845609-9d11-41e0-b96d-b9a9ca583ce9/Untitled.png"></p><p>当curl命令用：</p><p>jrunscript -e “cat(‘<a href="http://www.baidu.com&amp;/#39;)&quot;">http://www.baidu.com')"</a></p><p>执行js脚本片段</p><p>jrunscript -e “print(‘hello,kk.jvm’+1)”</p><p>执行js文件</p><p>jrunscript -l js -f /XXX/XXX/test.js2. JDK 内置图形化工具</p><p><strong>JVM 图形化工具-jconsole</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4eaf28e-b09c-434f-937a-0479cea5011e/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4eaf28e-b09c-434f-937a-0479cea5011e/Untitled.png"></p><p>在命令行输入 jconsole 即可打开</p><p>本地 JVM 可以直接选择</p><p>远程 JVM 可以通过 JMX 方式连接</p><p><strong>JVM 图形化工具-jconsole</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/36aa07e0-8416-44f9-8f05-6efcde7d6812/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/36aa07e0-8416-44f9-8f05-6efcde7d6812/Untitled.png"></p><p>共有 6 个面板</p><p>第一个为概览，四项指标具体为：</p><p>堆内存使用量：此处展示的就是前面 Java 内存模型课程中提到的堆内存使用情况，从图上可以看到，堆内存使用了 94MB 左右，并且一直在增长。</p><p>线程：展示了 JVM 中活动线程的数量，当前时刻共有 17 个活动线程。</p><p>类：JVM 一共加载了 5563 个类，没有卸载类。</p><p>CPU 占用率：目前 CPU 使用率为 0.2%，这个数值非常低，且最高的时候也不到 3%，初步判断系统当前并没有什么负载和压力。</p><p>有如下几个时间维度可供选择：</p><p>1分钟、5分钟、10分钟、30分钟、1小时、2小时、3小时、6小时、</p><p>12小时、1天、7天、1个月、3个月、6个月、1年、全部，一共是16 档。</p><p>当我们想关注最近1小时或者1分钟的数据，就可以选择对应的档。旁</p><p>边的3个标签页(内存、线程、类)，也都支持选择时间范围。</p><p><strong>JVM 图形化工具-jconsole</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/156c8be4-5d5e-48eb-abe7-063c4bc7b604/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/156c8be4-5d5e-48eb-abe7-063c4bc7b604/Untitled.png"></p><p>内存图表包括：</p><p>堆内存使用量，主要包括老年代（内存池 “PS Old</p><p>Gen”）、新生代（“PS Eden Space”）、存活区</p><p>（“PS Survivor Space”）；</p><p>非堆内存使用量，主要包括内存池“Metaspace”、</p><p>“Code Cache”、“Compressed Class Space”等；</p><p>可以分别选择对应的 6 个内存池。</p><p>通过内存面板，我们可以看到各个区域的内存使用和</p><p>变化情况，并且可以：</p><p>1.手动执行 gc，见图上的标号1，点击按钮即可执行JDK 中的 System.gc()</p><p>2.通过图中右下角标号 2 的界面，可以看到各个内存池的百分比使用率，以及堆/非堆空间的汇总使用情况</p><p>3.从左下角标号 3 的界面，可以看到 JVM 使用的垃圾收集器，以及执行垃圾收集的次数，以及相应的时间消耗。</p><p><strong>JVM 图形化工具-jconsole</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c582369c-8377-4633-8f38-e1317fa3f70c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c582369c-8377-4633-8f38-e1317fa3f70c/Untitled.png"></p><p>线程面板展示了线程数变化信息，以及监测到</p><p>的线程列表。</p><p>我们可以常根据名称直接查看线程的状态（运</p><p>行还是等待中）和调用栈（正在执行什么操</p><p>作）。</p><p>特别地，我们还可以直接点击“检测死锁”按钮</p><p>来检测死锁，如果没有死锁则会提示“未检测</p><p>到死锁”。</p><p><strong>JVM 图形化工具-jconsole</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a80cba39-a711-432c-8fae-de45f06c476c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a80cba39-a711-432c-8fae-de45f06c476c/Untitled.png"></p><p>类监控面板，可以直接看到 JVM 加载和卸载的</p><p>类数量汇总信息，以及随着时间的动态变化。</p><p><strong>JVM 图形化工具-jconsole</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/49f8d9df-9bc3-463e-8663-99c2bfdb9b77/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/49f8d9df-9bc3-463e-8663-99c2bfdb9b77/Untitled.png"></p><p>VM 概要的数据有五个部分：</p><p>第一部分是虚拟机的信息；</p><p>第二部分是线程数量，以及类加载的</p><p>汇总信息；</p><p>第三部分是堆内存和 GC 统计。</p><p>第四部分是操作系统和宿主机的设备</p><p>信息，比如 CPU 数量、物理内存、虚</p><p>拟内存等等。</p><p>第五部分是 JVM 启动参数和几个关键</p><p>路径，这些信息其实跟 jinfo 命令看到</p><p>的差不多。</p><p><strong>JVM 图形化工具-jvisualvm</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9e7d314f-ba69-409c-b115-1f596f28870a/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9e7d314f-ba69-409c-b115-1f596f28870a/Untitled.png"></p><p><strong>JVM 图形化工具-jvisualvm</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4cde6262-8200-4e98-a326-f3e33e23646e/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4cde6262-8200-4e98-a326-f3e33e23646e/Untitled.png"></p><p><strong>JVM 图形化工具-jvisualvm</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/30e10c50-9041-4808-b315-a1cd40a99f2a/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/30e10c50-9041-4808-b315-a1cd40a99f2a/Untitled.png"></p><p><strong>JVM 图形化工具-jvisualvm</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3e49bfb8-3894-4843-bf95-2b764c7919af/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3e49bfb8-3894-4843-bf95-2b764c7919af/Untitled.png"></p><p><strong>JVM 图形化工具-VisualGCJVM</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c094df89-3aef-499a-96a0-1bd386a44909/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c094df89-3aef-499a-96a0-1bd386a44909/Untitled.png"></p><p><strong>图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/455d7d1b-dcee-42a2-b178-99b26d59c35f/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/455d7d1b-dcee-42a2-b178-99b26d59c35f/Untitled.png"></p><p><strong>JVM 图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2bd9f938-7919-4663-b364-84bc62520d29/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2bd9f938-7919-4663-b364-84bc62520d29/Untitled.png"></p><p><strong>JVM 图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2fc0a02d-6fe5-4fa1-89c2-a7c971dcb039/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2fc0a02d-6fe5-4fa1-89c2-a7c971dcb039/Untitled.png"></p><p><strong>JVM 图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c10cf933-c5f4-4b53-801e-b567d815d28c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c10cf933-c5f4-4b53-801e-b567d815d28c/Untitled.png"></p><p><strong>JVM 图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59c4a505-6013-48f2-ab6a-898998f8a2fb/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/59c4a505-6013-48f2-ab6a-898998f8a2fb/Untitled.png"></p><p><strong>JVM 图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4ece51af-4488-4bf3-9e7c-92a3001ca170/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4ece51af-4488-4bf3-9e7c-92a3001ca170/Untitled.png"></p><p><strong>JVM 图形化工具-jmc</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb0a1afb-22e4-46eb-949c-e784dbb27d75/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb0a1afb-22e4-46eb-949c-e784dbb27d75/Untitled.png"></p><p><strong>JVM 工具总结</strong></p><p>jsonsole</p><p>jvisualvm</p><p>visualGC</p><p>jmc</p><p>jps/jinfo</p><p>jstat</p><p>jmap</p><p>jstack</p><p>jcmd</p><p>jrunscript/jjs3. GC 的背景与一般原理</p><p><strong>GC 的背景与一般原理</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a6f1a39f-85ab-445a-9bf8-aa32d56c43a3/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a6f1a39f-85ab-445a-9bf8-aa32d56c43a3/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d72eb5f1-47d7-430a-870e-e80d7993c9dd/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d72eb5f1-47d7-430a-870e-e80d7993c9dd/Untitled.png"></p><p>为什么会有 GC</p><p>本质上是内存资源的有限性</p><p>因此需要大家共享使用，手工申请，手动释放。</p><p>下面我们举个例子</p><p><strong>GC 的背景与一般原理</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/592fa86a-bc04-49b6-80f5-1f96ecaabccb/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/592fa86a-bc04-49b6-80f5-1f96ecaabccb/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60123de8-a916-4b7b-b891-f4673295259c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60123de8-a916-4b7b-b891-f4673295259c/Untitled.png"></p><p>仓库与引用计数：计数为 0</p><p>简单粗暴，一般有效</p><p>实际情况复杂一点</p><p>仓库与仓库之间也有关系</p><p>导致形成一个环，大家的计数永远不为 0（跟线程、事务死锁一个原理）</p><p>这些仓库都没法再用：内存泄漏-&gt;内存溢出</p><p>怎么改进呢？引用计数-&gt;引用跟踪</p><p><strong>GC 的背景与一般原理</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e674b9d4-ac1d-4160-ab21-400bbcc73d34/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e674b9d4-ac1d-4160-ab21-400bbcc73d34/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2fa27a6f-eaea-4006-bc1d-210b4c280318/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2fa27a6f-eaea-4006-bc1d-210b4c280318/Untitled.png"></p><p>标记清除算法（Mark and Sweep）</p><p>Marking（标记）: 遍历所有的可达对象，并在本地内存(native)中分门别类记下。</p><p>Sweeping（清除）: 这一步保证了，不可达对象所占用的内存，在之后进行内存分配时可以重用。</p><p>并行 GC 和 CMS 的基本原理。</p><p>优势：可以处理循环依赖，只扫描部分对象</p><p>除了清除，还要做压缩。</p><p>怎么才能标记和清除清楚上百万对象呢？</p><p>答案就是 STW，让全世界停止下来。</p><p><strong>GC 的背景与一般原理</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d0f61371-32e5-431c-8c76-bea8dfc26e92/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d0f61371-32e5-431c-8c76-bea8dfc26e92/Untitled.png"></p><p>内存池划分</p><p>不同类型对象不同区域，不同策略处理。</p><p>分代假设：大部分新生对象很快无用；</p><p>存活较长时间的对象，可能存活更长时间。</p><p><strong>GC 的背景与一般原理</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb5dde48-723a-4b6f-9123-11576484a4c6/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cb5dde48-723a-4b6f-9123-11576484a4c6/Untitled.png"></p><p>对象分配在新生代的 Eden 区，标记阶段 Eden 区存活的对象就会复制到存活区；</p><p>注意：为什么是复制，不是移动？？？大家想想</p><p>两个存活区 from 和 to，互换角色。对象存活到一定周期会提升到老年代。</p><p>由如下参数控制提升阈值</p><p>XX：+MaxTenuringThreshold=15</p><p>老年代默认都是存活对象，采用移动方式：</p><ol><li>标记所有通过 GC roots 可达的对象；</li><li>删除所有不可达对象；</li><li>整理老年代空间中的内容，方法是将所有的存活对象复制，从老年代空间开始的地方依次存放。</li></ol><p>持久代/元数据区</p><p>1.8 之前 -XX:MaxPermSize=256m</p><p>1.8 之后 -XX:MaxMetaspaceSize=256m</p><p><strong>GC 的背景与一般原理</strong></p><p>可以作为 GC Roots 的对象</p><ol><li>当前正在执行的方法里的局部变量和输入参数</li><li>活动线程（Active threads）</li><li>所有类的静态字段（static field）</li><li>JNI 引用</li></ol><p>此阶段暂停的时间，与堆内存大小,对象</p><p>的总数没有直接关系，而是由存活对象</p><p>（alive objects）的数量来决定。所以增</p><p>加堆内存的大小并不会直接影响标记阶段</p><p>占用的时间。</p><p><strong>GC 的背景与一般原理</strong></p><p><strong>标记复制算法(Mark-Copy)</strong></p><p><strong>标记清除(Mark-Sweep)</strong></p><p><strong>标记清除整理算法(Mark-Sweep-Compact)</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/659cc6c9-9244-4bce-ad2b-c448ab9fa33b/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/659cc6c9-9244-4bce-ad2b-c448ab9fa33b/Untitled.png"></p><p><strong>总结一下，三者有什么优缺点</strong></p><ol><li>串行 GC/并行 GC</li></ol><p>（Serial GC/Parallel GC）</p><p><strong>串行 GC（Serial GC）/ParNewGC</strong></p><p>XX：+UseSerialGC 配置串行 GC</p><p>串行 GC 对年轻代使用 mark-copy（标记-复制） 算法，对老年代使用 mark-sweep-compact（标记-清除-整理）算法。</p><p>两者都是单线程的垃圾收集器，不能进行并行处理，所以都会触发全线暂停（STW），停止所有的应用线程。</p><p>因此这种 GC 算法不能充分利用多核 CPU。不管有多少 CPU 内核，JVM 在垃圾收集时都只能使用单个核心。</p><p>CPU 利用率高，暂停时间长。简单粗暴，就像老式的电脑，动不动就卡死。该选项只适合几百 MB 堆内存的 JVM，而且是单核 CPU 时比较有用。</p><p>想想 why？</p><p>XX：+USeParNewGC 改进版本的 Serial GC，可以配合 CMS 使用。</p><p><strong>并行 GC（Parallel GC）</strong></p><p>XX：+UseParallelGC</p><p>XX：+UseParallelOldGC</p><p>XX：+UseParallelGC -XX:+UseParallelOldGC</p><p>年轻代和老年代的垃圾回收都会触发 STW 事件。</p><p>在年轻代使用 标记-复制（mark-copy）算法，在老年代使用 标记-清除-整理（mark-sweepcompact）算法。</p><p>XX：ParallelGCThreads=N 来指定 GC 线程数， 其默认值为 CPU 核心数。并行垃圾收集器适用于多核服务器，主要目标是增加吞吐量。因为对系统资源的有效使用，能达到更高的吞吐量:</p><p>在 GC 期间，所有 CPU 内核都在并行清理垃圾，所以总暂停时间更短；</p><p>在两次 GC 周期的间隔期，没有 GC 线程在运行，不会消耗任何系统资源。</p><p><strong>演示：并行 GC，常用参数以及其内存分配</strong></p><ol><li>CMS GC/G1 GC</li></ol><p><strong>CMS GC（Mostly Concurrent Mark and Sweep</strong></p><p><strong>Garbage Collector）</strong></p><p>XX：+UseConcMarkSweepGC</p><p>其对年轻代采用并行 STW 方式的 mark-copy (标记-复制)算法，对老年代主要使用并发 marksweep (标记-清除)算法。</p><p>CMS GC 的设计目标是避免在老年代垃圾收集时出现长时间的卡顿，主要通过两种手段来达成此</p><p>目标：</p><ol><li>不对老年代进行整理，而是使用空闲列表（free-lists）来管理内存空间的回收。</li><li>在 mark-and-sweep （标记-清除） 阶段的大部分工作和应用线程一起并发执行。也就是说，在这些阶段并没有明显的应用线程暂停。但值得注意的是，它仍然和应用线程争抢CPU 时间。默认情况下，CMS 使用的并发线程数等于 CPU 核心数的 1/4。如果服务器是多核 CPU，并且主要调优目标是降低 GC 停顿导致的系统延迟，那么使用 CMS 是个很明智的选择。进行老年代的并发回收时，可能会伴随着多次年轻代的 minor GC。思考：并行 Parallel 与并发 Concurrent 的区别？</li></ol><p><strong>CMS GC–六个阶段 1（STW）</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/38e3890e-d612-4ce2-a287-f2240a4397f3/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/38e3890e-d612-4ce2-a287-f2240a4397f3/Untitled.png"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>这个阶段伴随着 STW 暂停。初始标记的目标是标记所有</strong></p><p><strong>的根对象，包括根对象直接引用的对象，以及被年轻代中</strong></p><p><strong>所有存活对象所引用的对象（老年代单独回收）。</strong></p><p><strong>CMS GC–六个阶段 2</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/88c6ae3b-e103-4a04-81cc-8804300cc976/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/88c6ae3b-e103-4a04-81cc-8804300cc976/Untitled.png"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>在此阶段，CMS GC 遍历老年代，标记所有的存活对象，从前一阶段 “Initial Mark” 找到的根对象开始算起。 “并发标记”阶段，就是与应用程序同时运行，不用暂停的阶段。</strong></p><p><strong>CMS GC–六个阶段 3</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3651afa1-c319-4250-93af-f044e1b54d15/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3651afa1-c319-4250-93af-f044e1b54d15/Untitled.png"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>此阶段同样是与应用线程并发执行的，不需要停止应用线程。 因为前一阶段【并发标记】与程序并发运行，可能有一些引用关系已经发生了改变。如果在并发标记过程中引用关系发生了变化，JVM 会通过“Card（卡片）”的方式将发生了改变的区域标记为“脏”区，这就是所谓的 卡片标记（Card Marking）。</strong></p><p><strong>CMS GC–六个阶段 4（STW）</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d15af262-0c7a-4549-9f15-6f5a111ac8ca/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d15af262-0c7a-4549-9f15-6f5a111ac8ca/Untitled.png"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>最终标记阶段是此次 GC 事件中的第二次（也是最后一次）STW 停顿。本阶段的目标是完成老年代中所有存活对象的标记. 因为之前的预清理阶段是并发执行的，有可能 GC 线程跟不上应用程序的修改速度。所以需要一次STW 暂停来处理各种复杂的情况。通常 CMS 会尝试在年轻代尽可能空的情况下执行 FinalRemark 阶段，以免连续触发多次 STW 事件。</strong>最终标记</p><p><strong>CMS GC–六个阶段 5</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60445f7e-279a-4c15-a774-cc8597730046/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60445f7e-279a-4c15-a774-cc8597730046/Untitled.png"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>此阶段与应用程序并发执行，不需要 STW 停顿。JVM 在此阶段删除不再使用的对象，并回收他们占用的内存空间。</strong></p><p><strong>CMS GC–六个阶段 6</strong></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>此阶段与应用程序并发执行，重置 CMS 算法相关的内部数据，为下一次 GC 循环做准备。</strong></p><p><strong>CMS 垃圾收集器在减少停顿时间上做了很多复杂而有用的工作，用于垃圾回收的并发线程执行的同时，并不需要暂停应用线程。 当然，CMS 也有一些缺点，其中最大的问题就是老年代内存碎片问题（因为不压缩），在某些情况下 GC 会造成不可预测的暂停时间，特别是堆</strong></p><p><strong>内存较大的情况下。</strong></p><p><strong>演示：CMS GC，常用参数以及其内存分配（注意跟 ParallelGC 有什么差异）</strong></p><p><strong>G1 GC</strong> G1 的全称是 Garbage-First，意为垃圾优先，哪一块的垃圾最多就优先清理它。</p><p>G1 GC 最主要的设计目标是：将 STW 停顿的时间和分布，变成可预期且可配置的。</p><p>事实上，G1 GC 是一款软实时垃圾收集器，可以为其设置某项特定的性能指标。为了达成可预期停顿时间的指标，G1 GC 有一些独特的实现。首先，堆不再分成年轻代和老年代，而是划分为多个（通常是 2048 个）可以存放对象的 小块堆区域(smaller heap regions)。每个小块，可能一会被定义成 Eden 区，一会被指定为 Survivor区或者Old 区。在逻辑上，所有的 Eden 区和 Survivor区合起来就是年轻代，所有的 Old 区拼在一起那就是老年代</p><p>XX：+UseG1GC -XX:MaxGCPauseMillis=50</p><p><strong>G1 GC</strong> 这样划分之后，使得 G1 不必每次都去收集整</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b172f5cf-55c7-41c9-89c5-3099153eacde/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b172f5cf-55c7-41c9-89c5-3099153eacde/Untitled.png"></p><p>个堆空间，而是以增量的方式来进行处理: 每</p><p>次只处理一部分内存块，称为此次 GC 的回收</p><p>集(collection set)。每次 GC 暂停都会收集所</p><p>有年轻代的内存块，但一般只包含部分老年代</p><p>的内存块。</p><p>G1 的另一项创新是，在并发阶段估算每个小</p><p>堆块存活对象的总数。构建回收集的原则是：</p><p>垃圾最多的小块会被优先收集。这也是 G1 名</p><p>称的由来。</p><p><strong>G1 GC–配置参数</strong></p><p>XX：+UseG1GC：启用 G1 GC；</p><p>XX：G1NewSizePercent：初始年轻代占整个 Java Heap 的大小，默认值为 5%；</p><p>XX：G1MaxNewSizePercent：最大年轻代占整个 Java Heap 的大小，默认值为 60%；</p><p>XX：G1HeapRegionSize：设置每个 Region 的大小，单位 MB，需要为 1，2，4，8，16，32 中的某个值，默认是堆内存的 1/2000。如果这个值设置比较大，那么大对象就可以进入 Region 了。</p><p>XX：ConcGCThreads：与 Java 应用一起执行的 GC 线程数量，默认是 Java 线程的 1/4，减少这个参数的数值可能会提升并行回收的效率，提高系统内部吞吐量。如果这个数值过低，参与回收垃圾的线程不足，也会导致并行回收机制耗时加长。</p><p>XX：+InitiatingHeapOccupancyPercent（简称 IHOP）：G1 内部并行回收循环启动的阈值，默认为 Java Heap 的 45%。这个可以理解为老年代使用大于等于 45% 的时候，JVM 会启动垃圾回收。这个值非常重要，它决定了在什么时间启动老年代的并行回收。</p><p>XX：G1HeapWastePercent：G1停止回收的最小内存大小，默认是堆大小的 5%。GC 会收集所有的 Region 中的对象，但是如果下降到了 5%，就会停下来不再收集了。就是说，不必每次回收就把所有的垃圾都处理完，可以遗留少量的下次处理，这样也降低了单次消耗的时间。</p><p>XX：G1MixedGCCountTarget：设置并行循环之后需要有多少个混合 GC 启动，默认值是 8 个。老年代 Regions 的回收时间通常比年轻代的收集时间要长一些。所以如果混合收集器比较多，可以允许 G1 延长老年代的收集时间。</p><p><strong>G1 GC–配置参数</strong></p><p>XX：+G1PrintRegionLivenessInfo：这个参数需要和 -XX:+UnlockDiagnosticVMOptions 配合启动，打印 JVM 的调试信息，每个 Region 里的对象存活信息。</p><p>XX：G1ReservePercent：G1 为了保留一些空间用于年代之间的提升，默认值是堆空间的 10%。因为大量执行回收的地方在年轻代（存活时间较短），所以如果你的应用里面有比较大的堆内存空间、比较多的大对象存活，这里需要保留一些内存。</p><p>XX：+G1SummarizeRSetStats：这也是一个 VM 的调试信息。如果启用，会在 VM 退出的时候打印出 Rsets 的详细总结信息。如果启用 -XX:G1SummaryRSetStatsPeriod 参数，就会阶段性地打印 Rsets 信息。</p><p>XX：+G1TraceConcRefinement：这个也是一个 VM 的调试信息，如果启用，并行回收阶段的日志就会被详细打印出来。</p><p>XX：+GCTimeRatio：这个参数就是计算花在 Java 应用线程上和花在 GC 线程上的时间比率，默认是 9，跟新生代内存的分配比例一致。这个参数主要的目的是让用户可以控制花在应用上的时间，G1 的计算公式是 100/（1+GCTimeRatio）。这样如果参数设置为 9，则最多 10% 的时间会花在 GC 工作上面。Parallel GC 的默认值是 99，表示 1% 的时间被用在 GC 上面，这是因为 Parallel GC 贯穿整个 GC，而 G1 则根据 Region 来进行划分，不需要全局性扫描整个内存堆。</p><p>XX：+UseStringDeduplication：手动开启 Java String 对象的去重工作，这个是 JDK8u20 版本之后新增的参数，主要用于相同 String 避免重复申请内存，节约 Region 的使用。</p><p>XX：MaxGCPauseMills：预期 G1 每次执行 GC 操作的暂停时间，单位是毫秒，默认值是 200 毫秒，G1 会尽量保证控制在这个范围内。</p><p><strong>G1 GC 的处理步骤 1</strong></p><p>1、年轻代模式转移暂停（Evacuation Pause）</p><p>G1 GC 会通过前面一段时间的运行情况来不断的调整自己的回收策略和行为，以此来比较稳定地控制暂停时间。在应用程序刚启动时，G1 还没有采集到什么足够的信息，这时候就处于初始的 fullyyoung 模式。当年轻代空间用满后，应用线程会被暂停，年轻代内存块中的存活对象被拷贝到存活区。如果还没有存活区，则任意选择一部分空闲的内存块作为存活区。拷贝的过程称为转移（Evacuation)，这和前面介绍的其他年轻代收集器是一样的工作原理。</p><p><strong>G1 GC 的处理步骤 2</strong></p><p>2、并发标记（Concurrent Marking）</p><p>同时我们也可以看到，G1 GC 的很多概念建立在 CMS 的基础上，所以下面的内容需要对 CMS 有一定的</p><p>理解。</p><p>G1 并发标记的过程与 CMS 基本上是一样的。G1 的并发标记通过 Snapshot-At-The-Beginning（起始快照）的方式，在标记阶段开始时记下所有的存活对象。即使在标记的同时又有一些变成了垃圾。通过对象的存活信息，可以构建出每个小堆块的存活状态，以便回收集能高效地进行选择。这些信息在接下来的阶段会用来执行老年代区域的垃圾收集。</p><p>有两种情况是可以完全并发执行的：</p><p>一、如果在标记阶段确定某个小堆块中没有存活对象，只包含垃圾；</p><p>二、在 STW 转移暂停期间，同时包含垃圾和存活对象的老年代小堆块。</p><p>当堆内存的总体使用比例达到一定数值，就会触发并发标记。这个默认比例是 45%，但也可以通过 JVM参数 InitiatingHeapOccupancyPercent 来设置。和 CMS 一样，G1 的并发标记也是由多个阶段组成，其中一些阶段是完全并发的，还有一些阶段则会暂停应用线程。</p><p><strong>G1 GC 的处理步骤 2</strong></p><p><strong>阶段 1: Initial Mark（初始标记）</strong></p><p>此阶段标记所有从 GC 根对象直接可达的对象。</p><p><strong>阶段 2: Root Region Scan（Root区扫描）</strong></p><p>此阶段标记所有从 “根区域” 可达的存活对象。根区域包括：非空的区域，以及在标记过程中不得不收集的区域。</p><p><strong>阶段 3: Concurrent Mark（并发标记）</strong></p><p>此阶段和 CMS 的并发标记阶段非常类似：只遍历对象图，并在一个特殊的位图中标记能访问到的对象。</p><p><strong>阶段 4: Remark（再次标记）</strong></p><p>和 CMS 类似，这是一次 STW 停顿(因为不是并发的阶段)，以完成标记过程。 G1 收集器会短暂地停止应用线程，停止并发更新信息的写入，处理其中的少量信息，并标记所有在并发标记开始时未被标记的存活对象。</p><p><strong>阶段 5: Cleanup（清理）</strong></p><p>最后这个清理阶段为即将到来的转移阶段做准备，统计小堆块中所有存活的对象，并将小堆块进行排序，以提升GC 的效率，维护并发标记的内部状态。 所有不包含存活对象的小堆块在此阶段都被回收了。有一部分任务是并发的：例如空堆区的回收，还有大部分的存活率计算。此阶段也需要一个短暂的 STW 暂停。</p><p><strong>G1 GC 的处理步骤 3</strong></p><p>3、转移暂停: 混合模式（Evacuation Pause (mixed)）</p><p>并发标记完成之后，G1将执行一次混合收集（mixed collection），就是不只清理年轻代，还将一部分老年代区域也加入到 回收集 中。混合模式的转移暂停不一定紧跟并发标记阶段。有很多规则和历史数据会影响混合模式的启动时机。比如，假若在老年代中可以并发地腾出很多的小堆块，就没有必要启动混合模式。</p><p>因此，在并发标记与混合转移暂停之间，很可能会存在多次 young 模式的转移暂停。具体添加到回收集的老年代小堆块的大小及顺序，也是基于许多规则来判定的。其中包括指定的软实时性能指标，存活性，以及在并发标记期间收集的 GC 效率等数据，外加一些可配置的 JVM 选项。混合收集的过程，很大程度上和前面的 fully-young gc 是一样的。</p><p><strong>G1 GC 的注意事项</strong></p><p>特别需要注意的是，某些情况下 G1 触发了 Full GC，这时 G1 会退化使用 Serial 收集器来完成垃圾的清理工作，它仅仅使用单线程来完成 GC 工作，GC 暂停时间将达到秒级别的。</p><p>1.并发模式失败</p><p>G1 启动标记周期，但在 Mix GC 之前，老年代就被填满，这时候 G1 会放弃标记周期。解决办法：增加堆大小，或者调整周期（例如增加线程数-XX：ConcGCThreads 等）。</p><p>2.晋升失败</p><p>没有足够的内存供存活对象或晋升对象使用，由此触发了 Full GC(to-space exhausted/to-space overflow）。</p><p><strong>解决办法：</strong></p><p>a) 增加 –XX：G1ReservePercent 选项的值（并相应增加总的堆大小）增加预留内存量。</p><p>b) 通过减少 –XX：InitiatingHeapOccupancyPercent 提前启动标记周期。</p><p>c) 也可以通过增加 –XX：ConcGCThreads 选项的值来增加并行标记线程的数目。</p><p>3.巨型对象分配失败</p><p>当巨型对象找不到合适的空间进行分配时，就会启动 Full GC，来释放空间。</p><p>解决办法：增加内存或者增大 -XX：G1HeapRegionSize</p><p><strong>演示：G1 GC，常用参数以及其内存分配（注意跟 CMS/ParallelGC 有什么差异）</strong></p><p><strong>各个 GC 对比</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/deabdab1-2779-4089-a635-ff3c9f50e07c/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/deabdab1-2779-4089-a635-ff3c9f50e07c/Untitled.png"></p><p><strong>常用的 GC 组合（重点）</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/992e2117-37b2-4704-8ed9-fead8bb6c12d/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/992e2117-37b2-4704-8ed9-fead8bb6c12d/Untitled.png"></p><p>常用的组合为：</p><p>（1）Serial+Serial Old 实现单线程的低延迟</p><p>垃圾回收机制；</p><p>（2）ParNew+CMS，实现多线程的低延迟垃</p><p>圾回收机制；</p><p>（3）Parallel Scavenge和Parallel</p><p>Scavenge Old，实现多线程的高吞吐量垃圾</p><p>回收机制；</p><p><strong>GC 如何选择</strong></p><p>选择正确的 GC 算法，唯一可行的方式就是去尝试，一般性的指导原则：</p><ol><li>如果系统考虑吞吐优先，CPU 资源都用来最大程度处理业务，用 Parallel GC；</li><li>如果系统考虑低延迟有限，每次 GC 时间尽量短，用 CMS GC；</li><li>如果系统内存堆较大，同时希望整体来看平均 GC 时间可控，使用 G1 GC。</li></ol><p>对于内存大小的考量：</p><ol><li>一般 4G 以上，算是比较大，用 G1 的性价比较高。</li><li>一般超过 8G，比如 16G-64G 内存，非常推荐使用 G1 GC。</li></ol><p>最后讨论一个很多开发者经常忽视的问题，也是面试大厂常问的问题：JDK8 的默认 GC 是什么？</p><p>JDK9，JDK10，JDK11…等等默认的是 GC 是什么？6. ZGC/Shenandoah GC</p><p><strong>ZGC 介绍</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ba4fa9ac-e26b-4706-985f-de5518bfe88d/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ba4fa9ac-e26b-4706-985f-de5518bfe88d/Untitled.png"></p><p>XX：+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx16g</p><p>ZGC 最主要的特点包括:</p><ol><li>GC 最大停顿时间不超过 10ms</li><li>堆内存支持范围广，小至几百 MB 的堆空间，大至 4TB 的超大堆</li></ol><p>内存（JDK13 升至 16TB）</p><ol><li>与 G1 相比，应用吞吐量下降不超过 15%</li><li>当前只支持 Linux/x64 位平台，JDK15 后支持 MacOS 和</li></ol><p>Windows 系统</p><p><strong>ShennandoahGC 介绍</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b7edd271-8ce4-4e5e-aa45-e476397ee59e/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b7edd271-8ce4-4e5e-aa45-e476397ee59e/Untitled.png"></p><p>XX：+UnlockExperimentalVMOptions -</p><p>XX:+UseShenandoahGC -Xmx16g</p><p>Shenandoah GC 立项比 ZGC 更早，设计为GC 线程与应用线程并发执行的方式，通过实现垃圾回收过程的并发处理，改善停顿时间，使得 GC 执行线程能够在业务处理线程运行过程中进行堆压缩、标记和整理，从而消除了绝大部分的暂停时间。</p><p>Shenandoah 团队对外宣称 ShenandoahGC 的暂停时间与堆大小无关，无论是 200MB 还是 200 GB的堆内存，都可以保障具有很低的暂停时间（注意:并不像 ZGC 那样保证暂停时间在 10ms 以内）。</p><p><strong>ShennandoahGC 与其他 GC 的 STW 比较GC 总结</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f718ad07-5eca-4362-96a4-2282ac76c8c3/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f718ad07-5eca-4362-96a4-2282ac76c8c3/Untitled.png"></p><p>到目前为止，我们一共了解了 Java 目前支持的所有 GC 算法，一共有 7 类:</p><ol><li>串行 GC（Serial GC）: 单线程执行，应用需要暂停；</li><li>并行 GC（ParNew、Parallel Scavenge、Parallel Old）: 多线程并行地执行垃圾回收，</li></ol><p>关注与高吞吐；</p><ol><li>CMS（Concurrent Mark-Sweep）: 多线程并发标记和清除，关注与降低延迟；</li><li>G1（G First）: 通过划分多个内存区域做增量整理和回收，进一步降低延迟；</li><li>ZGC（Z Garbage Collector）: 通过着色指针和读屏障，实现几乎全部的并发执行，几毫</li></ol><p>秒级别的延迟，线性可扩展；</p><ol><li>Epsilon: 实验性的 GC，供性能分析使用；</li><li>Shenandoah: G1 的改进版本，跟 ZGC 类似。</li></ol><p><strong>GC 总结</strong></p><p>可以看出 GC 算法和实现的演进路线:</p><ol><li>串行 -&gt; 并行: 重复利用多核 CPU 的优势，大幅降低 GC 暂停时间，提升吞吐量。</li><li>并行 -&gt; 并发： 不只开多个 GC 线程并行回收，还将GC操作拆分为多个步骤，让很多繁重的任务和应用线程一起并发执行，减少了单次 GC 暂停持续的时间，这能有效降低业务系统的延迟。</li><li>CMS -&gt; G1： G1 可以说是在 CMS 基础上进行迭代和优化开发出来的，划分为多个小堆块进行增量回收，这样就更进一步地降低了单次 GC 暂停的时间</li><li>G1 -&gt; ZGC:：ZGC 号称无停顿垃圾收集器，这又是一次极大的改进。ZGC 和 G1 有一些相似的地方，但是底层的算法和思想又有了全新的突破。</li></ol><p>脱离场景谈性能都是耍流氓”。</p><p>目前绝大部分 Java 应用系统，堆内存并不大比如 2G-4G 以内，而且对 10ms 这种低延迟的 GC 暂停不敏感，也就是说处理一个业务步骤，大概几百毫秒都是可以接受的，GC 暂停 100ms 还是 10ms 没多大区别。另一方面，系统的吞吐量反而往往是我们追求的重点，这时候就需要考虑采用并行 GC。如果堆内存再大一些，可以考虑 G1 GC。如果内存非常大（比如超过 16G，甚至是 64G、128G），或者是对延迟非常敏感（比如高频量化交易系统），就需要考虑使用本节提到的新 GC（ZGC/Shenandoah）。</p><ol><li>总结回顾与作业实践</li></ol><p><strong>第 2 课总结回顾</strong></p><p>工具有哪些？</p><p>GC 有哪些？</p><p>都有什么特点？</p><p><strong>第 2 节课作业实践</strong></p><p>1、本机使用 G1 GC 启动一个程序，仿照课上案例分析一下 JVM 情况</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1期第一课补充笔记</title>
      <link href="2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Java1%E6%9C%9F%E7%AC%AC%E4%B8%80%E8%AF%BE%E8%A1%A5%E5%85%85%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Java1%E6%9C%9F%E7%AC%AC%E4%B8%80%E8%AF%BE%E8%A1%A5%E5%85%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>学习理论说，仅仅听讲只能获得知识的5-10%，只有经过实践和思考，才能变成你的经验。</p><p>1）一定要看预习材料，那是我和铁锚老师的jvm书稿的一部分，很详细。</p><p>2）课上的两个小时是帮大家组织起技术体系，带大家操作演示。</p><p>3）课后动手实践，按课上的演练自己是实验，最后完成必做作业。</p><h2 id="1、字节码"><a href="#1、字节码" class="headerlink" title="1、字节码"></a>1、字节码</h2><p>字节码的本质是java代码编译后的，给jvm虚拟机运行的操作指令。</p><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>字节码不需要全部掌握，大家明白原理就好，面试一般问的也不会太多。</p><p>比如 0: new #2</p><p>表示的是本块代码的第一个指令是new 一个常量池里的第二个常量代表的类型的实例。</p><p>其中new的操作码二进制是bb，操作数是2，那么用二进制表示这条指令就是3个字节：bb 00 02，补上一个00是因为new后面跟两个操作数。（大家想想为什么需要2个操作数？ ）</p><h3 id="学以致用"><a href="#学以致用" class="headerlink" title="学以致用"></a>学以致用</h3><p>了解字节码有两个用途：</p><p>1）能够了解底层jvm执行的是什么，可以用来分析不同代码是否是等价的，如果不等价哪个方式更好。</p><p>比如for循环里用i++还是for(i:数组) 。通过课上的演示，我们知道他们是等价的。（大家想想，如果for : 里不是数组，而是list，字节码会怎么样？）</p><p>比如String a = “a” + “b”; String c = a + “c”; 通过字节码分析，我们知道：</p><p>编译后”a” + “b”直接变成了“ab”，相当于 a =“ab”；</p><p>字符串String作为一个类，是不能做+操作的，所以在字节码层面，都转换成了StringBuilder的append操作，上面的代码相当于String c = new StringBuilder().append(“ab”).append(“c”).toString(); </p><p>2）后面学习AOP的时候，有一大块是字节码操作和增强，这里的内容是那一部分的基础。</p><h2 id="2、类加载器（☆重点）"><a href="#2、类加载器（☆重点）" class="headerlink" title="2、类加载器（☆重点）"></a>2、类加载器（☆重点）</h2><p>类加载器负责把字节码文件或字节码的byte[]转换成为jvm中的类。</p><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><p>理解类加载器的原理和作用，加载时机，三类类加载器。</p><p>三个特性：双亲委托，加载依赖，类型缓存。</p><p>知道如何给项目程序添加依赖的jar或路径。</p><p>了解URLClassLoader的作用和跟扩展类加载器、应用类加载器的关系。</p><p>学会自定义简单的classloader。</p><h3 id="学以致用-1"><a href="#学以致用-1" class="headerlink" title="学以致用"></a>学以致用</h3><p>注意：JDK9里扩展类加载器和应用类加载器，不再继承URLClassLoader。</p><p>但是可以这些主动加载： Class.forName(“xxx”, new URLClassloader(“dddd”));</p><p>了解类加载器有几个用途：</p><p>1）能够清楚知道字节码是如何加载的；</p><p>2）能够分析程序加载了那些jar或路径，从而排查找不到类的错误问题；如果遇到了找不到方法或方法参数不匹配的错误问题，说明加载了错误版本的jar，也可以用相同方法排查；</p><p>3）可以实现自定义classloader，做加密、混淆等，保护我们的jar包不被反编译和破解；实际上通过自定义classloader，我们在类加载到jvm的时候可以做一些额外的处理（想想是不是跟AOP有点像？）；</p><p>4）早期实现动态加载，模块化都是基于自定义classloader的，如果我们实现两个自定义classloader，比如A和B，他们没有关系，且各自加载了一个叫Hello的类，这两个Hello的类型是不同的，这样就可以实现不同版本的类隔离（如果代码写的不恰当，也可能会出现所谓A的一个Hello类的实例，运行时做类型转换无法转换成B的Hello类型的错误）；</p><p>5）作业必做题与此相关。</p><p>需要注意的是：jdk代码里写死了，不允许自定义classloader加载以java.开头包名的类。</p><h2 id="3、Java内存模型（☆重点）"><a href="#3、Java内存模型（☆重点）" class="headerlink" title="3、Java内存模型（☆重点）"></a>3、Java内存模型（☆重点）</h2><p>类被加载到JVM中，代码运行时都需要使用内存，所以Java内存模型就是用来规定JVM内部的内存结构。</p><h3 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h3><p>了解栈、堆、非堆、堆外等内存，以及它们的关系和区别。</p><p>了解栈的结构，可以跟前面字节码执行对应起来。</p><p>了解堆的结构，新生代young gen，老年代old gen，新生代又包括eden和s0、s1</p><p>了解非堆和堆外是用来做什么的。</p><h3 id="学以致用-2"><a href="#学以致用-2" class="headerlink" title="学以致用"></a>学以致用</h3><p>了解内存模型有几个用途：</p><p>1）这一块是下一节课讲的GC的基础，也是第三个模块讲并发编程的基础，这一块熟悉了有利于学习GC和并发；</p><p>2）面试经常会被问到这个问题；</p><p>3）作业必做题与这一块有直接关系，多动手画一画，有助于面试时能比较好的讲清楚。</p><h2 id="4、命令行参数"><a href="#4、命令行参数" class="headerlink" title="4、命令行参数"></a>4、命令行参数</h2><p>JVM作为一个通用的虚拟计算机，是通过java命令来启动的，为了让JVM能够适应不同的需求环境，所以需要配置不同的参数使JVM更好的工作，这就是java命令执行的命令行参数。</p><h3 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h3><p>常用的命令行参数有哪些？</p><p>标准参数 -server</p><p>非标准参数 -Xmx，-XX：xxxx=yyyy</p><p>系统属性-Dxxx=yyy</p><h3 id="学以致用-3"><a href="#学以致用-3" class="headerlink" title="学以致用"></a>学以致用</h3><p>jvm内存配置经验：xmx ~ 不要超过系统可用内存的60-80%</p><p>例如 系统有4g可用内存 -&gt; 4g*0.6<del>0.8 -&gt; 可以设置xmx为2.4</del>3.2g</p><p>java参数目前有1000多个，其中GC相关的占一大半。具体参数相关的一些问题，我们下节课继续讲。</p><h2 id="5、课堂答疑"><a href="#5、课堂答疑" class="headerlink" title="5、课堂答疑"></a>5、课堂答疑</h2><p>其他的问题整理与回答：</p><p><a href="https://shimo.im/docs/rcxYt6PtQgkkyd8h">https://shimo.im/docs/rcxYt6PtQgkkyd8h</a></p><h2 id="6、其他资料"><a href="#6、其他资料" class="headerlink" title="6、其他资料"></a>6、其他资料</h2><p>官方对JDK/JRE、classloader和一些工具的说明：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/toc.html">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/toc.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210219092358.png!thumbnail" alt="img"></p><p>上图来源于：<a href="https://docs.oracle.com/javase/8/docs/">https://docs.oracle.com/javase/8/docs/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week01-01 JVM 核心技术--基础知识</title>
      <link href="2021/02/18/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/02/18/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第1课-JVM-核心技术–基础知识"><a href="#第1课-JVM-核心技术–基础知识" class="headerlink" title="第1课  JVM 核心技术–基础知识"></a>第1课  JVM 核心技术–基础知识</h1><p><strong>目录</strong></p><ol><li>JVM 基础知识：不积跬步，无以至千里</li><li>Java 字节码技术：不积细流，无以成江河</li><li>JVM 类加载器*：山不辞土，故能成其高</li><li>JVM 内存模型*：海不辞水，故能成其深</li><li>JVM 启动参数：博观而约取、厚积而薄发</li><li>第1课总结回顾与作业实践</li></ol><h2 id="1-JVM-核心技术–基础知识"><a href="#1-JVM-核心技术–基础知识" class="headerlink" title="1. JVM 核心技术–基础知识"></a>1. JVM 核心技术–基础知识</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a><strong>编程语言</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218232956.png" alt="image-20210218232956278"></p><p>面向过程、面向对象、面向函数</p><p>静态类型、动态类型</p><p>编译执行、解释执行</p><p>有虚拟机、无虚拟机</p><p>有 GC、无 GC</p><p>Java 是一种面向对象、静态类型、编译执行，</p><p>有 VM/GC 和运行时、跨平台的高级语言。</p><h3 id="编程语言跨平台"><a href="#编程语言跨平台" class="headerlink" title="编程语言跨平台"></a><strong>编程语言跨平台</strong></h3><p><strong>源代码跨平台</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218233210.png" alt="image-20210218233210633"></p><p><strong>二进制跨平台</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218233411.png" alt="image-20210218233411294"></p><p><strong>Java、C++、Rust 的区别</strong></p><p><strong>C/C++</strong> 完全相信而且惯着程序员，让大家自行管理内存，可以编写很自由的代码，但一不小心就会造成内存泄漏等问题，导致程序崩溃。</p><p><strong>Java/Golang</strong> 完全不相信程序员，但也惯着程序员。所有的内存生命周期都由 JVM 运行时统一管理。 在绝大部分场景下，你可以非常自由的写代码，而且不用关心内存到底是什么情况。 内存使用有问题的时候，我们可以通过 JVM 来进行信息相关的分析诊断和调整。 这也是本课程的目标。</p><p><strong>Rust</strong> 语言选择既不相信程序员，也不惯着程序员。 让你在写代码的时候，必须清楚明白的用 Rust 的规则管理好你的变量，好让机器能明白高效地分析和管理内存。 但是这样会导致代码不利于人的理解，写代码很不自由，学习成本也很高。</p><h3 id="字节码、类加载器、虚拟机"><a href="#字节码、类加载器、虚拟机" class="headerlink" title="字节码、类加载器、虚拟机"></a><strong>字节码、类加载器、虚拟机</strong></h3><p>![image-20210218233626837](/Users/cutie/Library/Application Support/typora-user-images/image-20210218233626837.png)</p><h2 id="2-Java-字节码技术"><a href="#2-Java-字节码技术" class="headerlink" title="2. Java 字节码技术"></a>2. Java 字节码技术</h2><h3 id="什么是字节码？"><a href="#什么是字节码？" class="headerlink" title="什么是字节码？"></a><strong>什么是字节码？</strong></h3><p>Java bytecode 由单字节（byte）的指令组成，理论上最多支持 256 个操作码（opcode）。</p><p>实际上 Java 只使用了200左右的操作码， 还有一些操作码则保留给调试操作。</p><p>根据指令的性质，主要分为四个大类：</p><ol><li>栈操作指令，包括与局部变量交互的指令</li><li>程序流程控制指令</li><li>对象操作指令，包括方法调用指令</li><li>算术运算以及类型转换指令</li></ol><p>1，java的所有的操作都发生在栈上；是用来真正做计算的</p><p>2，3，4都跟java语法相关的</p><h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a><strong>生成字节码</strong></h3><p>假如有一个最简单的类，源代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234107.png" alt="image-20210218234107349"></p><p>编译：javac demo/jvm0104/HelloByteCode.java</p><p>查看字节码：javap -c demo.jvm0104.HelloByteCode</p><h3 id="最简单的字节码"><a href="#最简单的字节码" class="headerlink" title="最简单的字节码"></a><strong>最简单的字节码</strong></h3><p>结果如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234121.png" alt="image-20210218234120981"></p><p>上图使用助记符的方式展示出来的</p><p>aload_0 是助记符，是字节码里面的操作码。栈，本地变量表。</p><p>运行时候，变量挪到栈上，运行结束后，放回本地变量表。</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234217.png" alt="image-20210218234217321"></p><h3 id="复杂点的例子"><a href="#复杂点的例子" class="headerlink" title="复杂点的例子"></a><strong>复杂点的例子</strong></h3><p>进一步：javap -c -verbose demo.jvm0104.HelloByteCode</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234244.png" alt="image-20210218234244088"></p><p>52.0默认表示java8的版本，每上一个大版本，都会加1</p><p>flags表示类是public还是非public</p><p>Constant pool，常量池</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234303.png" alt="image-20210218234303117"></p><h3 id="字节码的运行时结构"><a href="#字节码的运行时结构" class="headerlink" title="字节码的运行时结构"></a><strong>字节码的运行时结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234343.png" alt="image-20210218234343475"></p><p>JVM 是一台基于栈的计算机器。</p><p>每个线程都有一个独属于自己的线程栈（JVM Stack），用于存储栈帧（Frame）。</p><p>每一次方法调用，JVM 都会自动创建一个栈帧。</p><p>栈帧由操作数栈， 局部变量数组以及一个 Class 引用组成。</p><p>Class 引用 指向当前方法在运行时常量池中对应的 Class。</p><h3 id="从助记符到二进制"><a href="#从助记符到二进制" class="headerlink" title="从助记符到二进制"></a><strong>从助记符到二进制</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234358.png" alt="image-20210218234358007"></p><h3 id="四则运行的例子"><a href="#四则运行的例子" class="headerlink" title="四则运行的例子"></a><strong>四则运行的例子</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234411.png" alt="image-20210218234411785"></p><h3 id="数值处理与本地变量表"><a href="#数值处理与本地变量表" class="headerlink" title="数值处理与本地变量表"></a><strong>数值处理与本地变量表</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234433.png" alt="image-20210218234433598"></p><p>i int， load 加载到栈，store 放回，const常量， dstore double类型的存储</p><p>i2d integer转换为double</p><h3 id="算数操作与类型转换"><a href="#算数操作与类型转换" class="headerlink" title="算数操作与类型转换"></a><strong>算数操作与类型转换</strong></h3><p>算数操作与类型转换</p><p>![image-20210218234443510](/Users/cutie/Library/Application Support/typora-user-images/image-20210218234443510.png)</p><p>byte，boolean 用int，是最小单位，32位</p><p>int（32位）和long（64位）是否是原子性的？32位机器处理long需要处理2次，64位只要处理一次，主流的都是原子操作</p><h3 id="一个完整的循环控制"><a href="#一个完整的循环控制" class="headerlink" title="一个完整的循环控制"></a><strong>一个完整的循环控制</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234507.png" alt="image-20210218234507284"></p><p>if_icmpge 比较大小，如果不符合的话跳转到43，iinc int类型的自增加1，goto 跑到第18个标号，</p><h3 id="方法调用的指令"><a href="#方法调用的指令" class="headerlink" title="方法调用的指令"></a><strong>方法调用的指令</strong></h3><p>方法调用的指令：</p><p>invokestatic，顾名思义，这个指令用于调用某个类的静态方法，这是方法调用指令中最快的一个。</p><p>invokespecial, 用来调用构造函数，但也可以用于调用同一个类中的 private 方法, 以及可见的超类方法。</p><p>invokevirtual，如果是具体类型的目标对象，invokevirtual 用于调用公共，受保护和package 级的私有方法。</p><p>invokeinterface，当通过接口引用来调用方法时，将会编译为 invokeinterface 指令。</p><p>invokedynamic，JDK7 新增加的指令，是实现“动态类型语言”（Dynamically TypedLanguage）支持而进行的升级改进，同时也是 JDK8 以后支持 lambda 表达式的实现基础。</p><p><strong>一个动态例子</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234718.png" alt="image-20210218234718062"></p><h2 id="3-JVM-类加载器"><a href="#3-JVM-类加载器" class="headerlink" title="3. JVM 类加载器"></a>3. JVM 类加载器</h2><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a><strong>类的生命周期</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234745.png" alt="image-20210218234745547"></p><ol><li>加载（Loading）：找 Class 文件</li><li>验证（Verification）：验证格式、依赖</li><li>准备（Preparation）：静态字段、方法表</li><li>解析（Resolution）：符号解析为引用</li><li>初始化（Initialization）：构造器、静态变量赋值、静态代码块</li><li>使用（Using）</li><li>卸载（Unloading）</li></ol><h3 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a><strong>类的加载时机</strong></h3><ol><li>当虚拟机启动时，初始化用户指定的主类，就是启动执行的 main 方法所在的类；</li><li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类，就是 new一个类的时候要初始化；</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li><li>子类的初始化会触发父类的初始化；</li><li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类，其实跟前面一样，反射调用要么是已经有实例了，要么是静态方法，都需要初始化；</li><li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li></ol><p>1主类，2new，3，4静态调用，5父类，6default，7，8反射 </p><h3 id="不会初始化（可能会加载）"><a href="#不会初始化（可能会加载）" class="headerlink" title="不会初始化（可能会加载）"></a><strong>不会初始化（可能会加载）</strong></h3><ol><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li><li>通过类名获取 Class 对象，不会触发类的初始化，Hello.class 不会让 Hello 类初始化。</li><li>通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。Class.forName（“jvm.Hello”）默认会加载 Hello 类。</li><li>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作（加载了，但是不初始化）。</li></ol><h3 id="三类加载器"><a href="#三类加载器" class="headerlink" title="三类加载器"></a><strong>三类加载器</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234847.png" alt="image-20210218234847003"></p><p>三类加载器：</p><ol><li>启动类加载器（BootstrapClassLoader）</li><li>扩展类加载器（ExtClassLoader）</li><li>应用类加载器（AppClassLoader）</li></ol><p>加载器特点：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234857.png" alt="image-20210218234857042"></p><p>避免类被重复加载</p><ol><li>双亲委托：业务类加载器，需要用一个类的时候，父类加载器里面是否该类已经被加载了，如果没有，从祖父加载器中找是否已经加载了，如果找到了就给应用加载器使用</li><li>负责依赖：</li><li>缓存加载：类加载了就缓存起来，对每个类加载器来说，同一个类型的类只会被加载一次</li></ol><p>jdk9之前ExtClassLoader和AppClassLoader的父类都是URLClassLoader</p><h3 id="显示当前ClassLoader-加载了哪些-Jar？"><a href="#显示当前ClassLoader-加载了哪些-Jar？" class="headerlink" title="显示当前ClassLoader 加载了哪些 Jar？"></a><strong>显示当前ClassLoader 加载了哪些 Jar？</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234951.png" alt="image-20210218234951527"></p><h3 id="自定义-ClassLoader"><a href="#自定义-ClassLoader" class="headerlink" title="自定义 ClassLoader"></a><strong>自定义 ClassLoader</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235043.png" alt="image-20210218235043536"></p><h3 id="添加引用类的几种方式"><a href="#添加引用类的几种方式" class="headerlink" title="添加引用类的几种方式"></a><strong>添加引用类的几种方式</strong></h3><p>1、放到 JDK 的 lib/ext 下，或者-Djava.ext.dirs</p><p>2、 java –cp/classpath 或者 class 文件放到当前路径</p><p>3、自定义 ClassLoader 加载</p><p>4、拿到当前执行类的 ClassLoader，反射调用 addUrl 方法添加 Jar 或路径(JDK9 无效)。（JDK9之后只要一行）</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235342.png" alt="image-20210218235342159"></p><h2 id="4-JVM-内存模型"><a href="#4-JVM-内存模型" class="headerlink" title="4.JVM 内存模型"></a>4.JVM 内存模型</h2><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a><strong>JVM 内存结构</strong></h3><p>![image-20210218235435915](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235435915.png)</p><p>每个线程都只能访问自己的线程栈。</p><p>每个线程都不能访问（看不见）其他线程的局部变量。</p><p>所有原生类型的局部变量都存储在线程栈中，因此对其他线程是不可见的。</p><p>线程可以将一个原生变量值的副本传给另一个线程，但不能共享原生局部变量本身。</p><p>堆内存中包含了 Java 代码中创建的所有对象，不管是哪个线程创建的。 其中也涵盖了包装类型（例如 Byte，Integer，Long 等）。</p><p>不管是创建一个对象并将其赋值给局部变量， 还是赋值给另一个对象的成员变量， 创建的对象都会被保存到堆内存中。</p><p><strong>JVM 内存结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235503.png" alt="image-20210218235503518"></p><p>如果是原生数据类型的局部变量，那么它的内容就全部保留在线程栈上。</p><p>如果是对象引用，则栈中的局部变量槽位中保存着对象的引用地址，而实际的对象内容保存在堆中。</p><p>对象的成员变量与对象本身一起存储在堆上, 不管成员变量的类型是原生数值，还是对象引用。类的静态变量则和类定义一样都保存在堆中。</p><p><strong>JVM 内存结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235528.png" alt="image-20210218235528760"></p><p>总结一下：方法中使用的原生数据类型和对象引用地址在栈上存储；对象、对象成员与类定义、静态变量在堆上。</p><p>堆内存又称为“共享堆”，堆中的所有对象，可以被所有线程访问, 只要他们能拿到对象的引用地址。如果一个线程可以访问某个对象时，也就可以访问该对象的成员变量。</p><p>如果两个线程同时调用某个对象的同一方法，则它们都可以访问到这个对象的成员变量，但每个线程的局部变量副本是独立的。</p><h3 id="JVM-内存整体结构"><a href="#JVM-内存整体结构" class="headerlink" title="JVM 内存整体结构"></a><strong>JVM 内存整体结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235541.png" alt="image-20210218235541105"></p><p>每启动一个线程，JVM 就会在栈空间栈分配对应的 线程栈, 比如 1MB 的空间（-Xss1m）。</p><p>线程栈也叫做 Java 方法栈。 如果使用了JNI 方法，则会分配一个单独的本地方法栈(Native Stack)。</p><p>线程执行过程中，一般会有多个方法组成调用栈（Stack Trace）, 比如 A 调用 B，B调用 C。。。每执行到一个方法，就会创建对应的 栈帧（Frame）。</p><h3 id="JVM-栈内存结构"><a href="#JVM-栈内存结构" class="headerlink" title="JVM 栈内存结构"></a><strong>JVM 栈内存结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235553.png" alt="image-20210218235553092"></p><p>栈帧是一个逻辑上的概念，具体的大小在一个方法编写完成后基本上就能确定。</p><p>比如返回值 需要有一个空间存放吧，每个局部变量都需要对应的地址空间，此外还有给指令使用的 操作数栈，以及 class 指针（标识这个栈帧对应的是哪个类的方法,指向非堆里面的 Class 对象）。</p><h3 id="JVM-堆内存结构"><a href="#JVM-堆内存结构" class="headerlink" title="JVM 堆内存结构"></a><strong>JVM 堆内存结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235608.png" alt="image-20210218235608903"></p><p>堆内存是所有线程共用的内存空间，JVM 将Heap 内存分为年轻代（Young generation）和老年代（Old generation, 也叫 Tenured）两部分。</p><p>年轻代还划分为 3 个内存池，新生代（Edenspace）和存活区（Survivor space）, 在大部分GC 算法中有 2 个存活区（S0, S1），在我们可以观察到的任何时刻，S0 和 S1 总有一个是空的,但一般较小，也不浪费多少空间。</p><p>Non-Heap 本质上还是 Heap，只是一般不归 GC管理，里面划分为 3 个内存池。Metaspace, 以前叫持久代（永久代, Permanentgeneration）, Java8 换了个名字叫 Metaspace.</p><p>CCS, Compressed Class Space, 存放 class 信息的，和 Metaspace 有交叉。</p><p>Code Cache, 存放 JIT 编译器编译后的本地机器代码。</p><h3 id="CPU-与内存行为"><a href="#CPU-与内存行为" class="headerlink" title="CPU 与内存行为"></a><strong>CPU 与内存行为</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235702.png" alt="image-20210218235620082"></p><p>CPU 乱序执行</p><p>volatile 关键字</p><p>原子性操作</p><p>内存屏障</p><h3 id="小结：什么是-JMM"><a href="#小结：什么是-JMM" class="headerlink" title="小结：什么是 JMM?"></a><strong>小结：什么是 JMM?</strong></h3><p>所有的对象(包括内部的实例成员变量)，static 变量，以及数组，都必须存放到堆内存中。</p><p>局部变量，方法的形参/入参，异常处理语句的入参不允许在线程之间共享，所以不受内存模型的影响。</p><p>多个线程同时对一个变量访问时【读取/写入】，这时候只要有某个线程执行的是写操作，那么这种现象就称之为“冲突”。</p><p>可以被其他线程影响或感知的操作，称为线程间的交互行为， 可分为： 读取、写入、同步操作、外部操作等等。 其中同步操作包括：对 volatile 变量的读写，对管程（monitor）的锁定与解锁，线程的起始操作与结尾操作，线程启动和结束等等。 外部操作则是指对线程执行环境之外的操作，比如停止其他线程等等。</p><p>JMM 规范的是线程间的交互操作，而不管线程内部对局部变量进行的操作。</p><p>JMM 规范对应的是“[JSR-133. JavaMemory Model and ThreadSpecification]”，《Java 语言规范》的 [$17.4. Memory Model章节]</p><p>JMM 规范明确定义了不同的线程之间，通过哪些方式，在什么时候可以看见其他线程保存到共享变量中的值；以及在必要时，如何对共享变量的访问进行同步。这样的好处是屏蔽各种硬件平台和操作系统之间的内存访问差异，实现了 Java 并发程序真正的跨平台。</p><h2 id="5-JVM-启动参数"><a href="#5-JVM-启动参数" class="headerlink" title="5.JVM 启动参数"></a>5.JVM 启动参数</h2><h3 id="JVM-启动参数"><a href="#JVM-启动参数" class="headerlink" title="JVM 启动参数"></a><strong>JVM 启动参数</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235702.png" alt="image-20210218235702045"></p><p><strong>JVM 启动参数</strong></p><p>![image-20210218235740388](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235740388.png)</p><p>-server</p><p>-Dfile.encoding=UTF-8</p><p>-Xmx8g</p><p>-XX:+UseG1GC</p><p>-XX:MaxPermSize=256m</p><p>以-开头为标准参数，所有的 JVM 都要实现这些参数，并且向后兼容。</p><p>-D 设置系统属性。</p><p>以 -X 开头为非标准参数， 基本都是传给 JVM 的，默认 JVM 实现这些参数的功能，但是并不保证所有 JVM 实现都满足，且不保证向后兼容。 可以使用 java -X 命令来查看当前 JVM 支持的非标准参数。</p><p>以 –XX：开头为非稳定参数, 专门用于控制 JVM的行为，跟具体的 JVM 实现有关，随时可能会在下个版本取消。</p><p>XX：+-Flags 形式, +- 是对布尔值进行开关。</p><p>XX：key=value 形式, 指定某个选项的值。</p><p><strong>JVM 启动参数</strong></p><ol><li>系统属性参数</li><li>运行模式参数</li><li>堆内存设置参数</li><li>GC 设置参数</li><li>分析诊断参数</li><li>JavaAgent 参数</li></ol><h3 id="JVM-启动参数-系统属性"><a href="#JVM-启动参数-系统属性" class="headerlink" title="JVM 启动参数-系统属性"></a><strong>JVM 启动参数-系统属性</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235809.png" alt="image-20210218235809898"></p><p>-Dfile.encoding=UTF-8</p><p>-Duser.timezone=GMT+08</p><p>-Dmaven.test.skip=true</p><p>-Dio.netty.eventLoopThreads=8</p><p>System.setProperty(“a”,”A100”);</p><p>String a=System.getProperty(“a”);</p><p><strong>Linux上还可以通过: a=A100 java XXXJVM</strong></p><h3 id="启动参数-运行模式"><a href="#启动参数-运行模式" class="headerlink" title="启动参数-运行模式"></a><strong>启动参数-运行模式</strong></h3><ol><li>-server：设置 JVM 使用 server 模式，特点是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境。在具有 64 位能力的 JDK 环境下将默认启用该模式，而忽略 -client 参数。</li><li>-client ：JDK1.7 之前在32位的 x86 机器上的默认值是 -client 选项。设置 JVM 使用 client 模式，特点是启动速度比较快，但运行时性能和内存管理效率不高，通常用于客户端应用程序或者 PC 应用开发和调试。此外，我们知道 JVM 加载字节码后，可以解释执行，也可以编译成本地代码再执行，所以可以配置 JVM 对字节码的处理模式：</li><li>-Xint：在解释模式（interpreted mode）下运行，-Xint 标记会强制 JVM 解释执行所有的字节码，这当然会降低运行速度，通常低10倍或更多。</li><li>-Xcomp：-Xcomp 参数与-Xint 正好相反，JVM 在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。【注意预热】</li><li>-Xmixed：-Xmixed 是混合模式，将解释模式和编译模式进行混合使用，有 JVM 自己决定，这是 JVM 的默认模式，也是推荐模式。 我们使用 java -version 可以看到 mixed mode 等信息。</li></ol><p><strong>JVM 启动参数-堆内存</strong></p><p>![image-20210218235833782](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235833782.png)</p><p>-Xmx, 指定最大堆内存。 如 -Xmx4g. 这只是限制了 Heap 部分的最大值为4g。这个内存不包括栈内存，也不包括堆外使用的内存。</p><p>-Xms, 指定堆内存空间的初始大小。 如 -Xms4g。 而且指定的内存大小，并不是操作系统实际分配的初始值，而是GC先规划好，用到才分配。 专用服务器上需要保持 –Xms 和 –Xmx 一致，否则应用刚启动可能就有好几个 FullGC。当两者配置不一致时，堆内存扩容可能会导致性能抖动。</p><p>-Xmn, 等价于 -XX:NewSize，使用 G1 垃圾收集器 不应该 设置该选项，在其他的某些业务场景下可以设置。官方建议设置为 -Xmx 的 1/2 ~ 1/4.</p><p>-XX：MaxPermSize=size, 这是 JDK1.7 之前使用的。Java8 默认允许的Meta空间无限大，此参数无效。</p><p>-XX：MaxMetaspaceSize=size, Java8 默认不限制 Meta 空间, 一般不允许设置该选项。</p><p>-XX：MaxDirectMemorySize=size，系统可以使用的最大堆外内存，这个参数跟 -Dsun.nio.MaxDirectMemorySize 效果相同。</p><p>-Xss, 设置每个线程栈的字节数。 例如 -Xss1m 指定线程栈为 1MB，与-XX:ThreadStackSize=1m 等价</p><p>堆内（Xms-Xmx）</p><p>非堆+堆外</p><ol><li>如果什么都不配置会如何？</li><li>Xmx 是否与 Xms 设置相等？</li><li>Xmx 设置为机器内存的什么比例合适？</li><li>作业：画一下 Xmx、Xms、Xmn、Meta、</li></ol><p>DirectMemory、Xss 这些内存参数的关系</p><h3 id="JVM-启动参数-GC-相关"><a href="#JVM-启动参数-GC-相关" class="headerlink" title="JVM 启动参数 - GC 相关"></a><strong>JVM 启动参数 - GC 相关</strong></h3><p>![image-20210218235908235](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235908235.png)</p><p>-XX：+UseG1GC：使用 G1 垃圾回收器</p><p>-XX：+UseConcMarkSweepGC：使用 CMS 垃圾回收器</p><p>-XX：+UseSerialGC：使用串行垃圾回收器</p><p>-XX：+UseParallelGC：使用并行垃圾回收器</p><p>// Java 11+</p><p>-XX：+UnlockExperimentalVMOptions -XX:+UseZGC</p><p>// Java 12+</p><ol><li>各个 JVM 版本的默认 GC 是什么？ -XX：+UnlockExperimentalVMOptions -XX:+UseShenandoahGC</li></ol><h3 id="JVM-启动参数-分析诊断"><a href="#JVM-启动参数-分析诊断" class="headerlink" title="JVM 启动参数-分析诊断"></a><strong>JVM 启动参数-分析诊断</strong></h3><p>-XX：+-HeapDumpOnOutOfMemoryError 选项, 当 OutOfMemoryError 产生，即内存溢出(堆内或持久代)时，自动 Dump 堆内存。</p><p>示例用法： java -XX:+HeapDumpOnOutOfMemoryError -Xmx256m ConsumeHeap</p><p>-XX：HeapDumpPath 选项, 与 HeapDumpOnOutOfMemoryError 搭配使用, 指定内存溢出时 Dump文件的目录。</p><p>如果没有指定则默认为启动 Java 程序的工作目录。</p><p>示例用法： java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/ ConsumeHeap</p><p>自动 Dump 的 hprof 文件会存储到 /usr/local/ 目录下。</p><p>-XX：OnError 选项, 发生致命错误时（fatal error）执行的脚本。</p><p>例如, 写一个脚本来记录出错时间, 执行一些命令, 或者 curl 一下某个在线报警的 url.</p><p>示例用法：java -XX:OnError=”gdb - %p” MyApp</p><p>可以发现有一个 %p 的格式化字符串，表示进程 PID。</p><p>-XX：OnOutOfMemoryError 选项, 抛出 OutOfMemoryError 错误时执行的脚本。</p><p>-XX：ErrorFile=filename 选项, 致命错误的日志文件名,绝对路径或者相对路径。</p><p>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1506，远程调试</p><h3 id="JVM-启动参数-JavaAgent"><a href="#JVM-启动参数-JavaAgent" class="headerlink" title="JVM 启动参数 -JavaAgent"></a><strong>JVM 启动参数 -JavaAgent</strong></h3><p>Agent 是 JVM 中的一项黑科技, 可以通过无侵入方式来做很多事情，比如注入 AOP 代码，执行统计等等，权限非常大。这里简单介绍一下配置选项，详细功能需要专门来讲。</p><p>设置 agent 的语法如下:</p><p>agentlib:libname[=options] 启用 native 方式的 agent, 参考 LD_LIBRARY_PATH 路径。</p><p>agentpath:pathname[=options] 启用 native 方式的 agent。</p><p>javaagent:jarpath[=options] 启用外部的 agent 库, 比如 pinpoint.jar 等等。</p><p>Xnoagent 则是禁用所有 agent。</p><p>以下示例开启 CPU 使用时间抽样分析:</p><p>JAVA_OPTS=”-agentlib:hprof=cpu=samples,file=cpu.samples.log”</p><h2 id="6-总结回顾与作业实践"><a href="#6-总结回顾与作业实践" class="headerlink" title="6.总结回顾与作业实践"></a>6.总结回顾与作业实践</h2><h3 id="第1课总结回顾"><a href="#第1课总结回顾" class="headerlink" title="第1课总结回顾"></a><strong>第1课总结回顾</strong></h3><p>字节码技术</p><p>类加载器</p><p>内存模型</p><p>启动参数</p><h3 id="第1课作业实践"><a href="#第1课作业实践" class="headerlink" title="第1课作业实践"></a><strong>第1课作业实践</strong></h3><p>1、（可选）自己写一个简单的 Hello.java，里面需要涉及基本类型，四则运行，if 和 for，然后自己分析一下对应的字节码，有问题群里讨论。</p><p>2、（必做）自定义一个 Classloader，加载一个 Hello.xlass 文件，执行 hello 方法，此文件内容是一个 Hello.class 文件所有字节（x=255-x）处理后的文件。文件群里提供。</p><p>3、（必做）画一张图，展示 Xmx、Xms、Xmn、Meta、DirectMemory、Xss 这些内存参数的关系。</p><p>4、（可选）检查一下自己维护的业务系统的 JVM 参数配置，用 jstat 和 jstack、jmap 查看一下详情，并且自己独立分析一下大概情况，思考有没有不合理的地方，如何改进。</p><p>注意：如果没有线上系统，可以自己 run 一个 web/java 项目。</p><h2 id="7-其他笔记"><a href="#7-其他笔记" class="headerlink" title="7.其他笔记"></a>7.其他笔记</h2><p>java特性</p><p>GC - 垃圾回收，jvm内存管理器；golang和rust在编译时候就进行垃圾回收处理，不需要虚拟机。java是二进制跨平台，c&amp;c++是源代码跨平台的。</p><p>java跨平台，一直向前兼容，生态完整（任何东西java实现都可以找到）。</p><p><strong>总结下学了什么，有哪些点没懂？</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/18/hello-world/"/>
      <url>2021/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
