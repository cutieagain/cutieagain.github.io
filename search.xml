<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第四节 数据校验</title>
      <link href="2021/03/06/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%9B%9B%E8%8A%82%20%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/"/>
      <url>2021/03/06/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E5%9B%9B%E8%8A%82%20%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>小马哥的 Java 项目实战营 </p><p>Java EE 项目 - 第四节 数据校验 </p><p>小马哥（mercyblitz）<strong>我是谁？</strong> </p><p>小马哥（mercyblitz） </p><p>•父亲 </p><p>•Java 劝退师 </p><p>• Apache Dubbo PMC </p><p>• Spring Cloud Alibaba 架构师 </p><p>•《Spring Boot 编程思想》作者<strong>议题</strong> </p><p>• Apache commons-validator </p><p>• Bean Validation 1.0（JSR-303） </p><p>• 问答互动</p><p><strong>Apache commons-validator</strong> </p><p>• 简介 </p><p>A common issue when receiving data either electronically or from user input </p><p>is verifying the integrity of the data. This work is repetitive and becomes even </p><p>more complicated when different sets of validation rules need to be applied </p><p>to the same set of data based on locale. Error messages may also vary by </p><p>locale. This package addresses some of these issues to speed development </p><p>and maintenance of validation rules.</p><p><strong>Apache commons-validator</strong> </p><p>• 功能特性 </p><p>• 可配置的校验引擎 </p><p>• 可重用的原生校验手段 </p><p>• 第三方依赖 </p><p>• commons-beanutils </p><p>• commons-digester </p><p>• commons-logging </p><p>• commons-collections</p><p><strong>Apache commons-validator</strong> </p><p>• 验证器类型 </p><p>• Date 与 Time 校验器 </p><p>• 数值校验器 </p><p>• 正则表达式校验器 </p><p>• ISBN校验器 </p><p>• IP 地址校验器 </p><p>• 邮件地址校验器 </p><p>• URL 校验器 </p><p>• 域名校验器</p><p><strong>Apache commons-validator</strong> </p><p>• Date 与 Time 校验器 </p><p>• API </p><p>• org.apache.commons.validator.routines.DateValidator </p><p>• org.apache.commons.validator.routines.CalendarValidator </p><p>• org.apache.commons.validator.routines.TimeValidator </p><p>• 使用场景 </p><p>• 校验 </p><p>• 格式化 </p><p>• 时区 </p><p>• 比较</p><p><strong>Apache commons-validator</strong> </p><p>• 数值校验器（Numberic） </p><p>• API </p><p>• org.apache.commons.validator.routines.ByteValidator </p><p>• org.apache.commons.validator.routines.ShortValidator </p><p>• org.apache.commons.validator.routines.IntegerValidator </p><p>• org.apache.commons.validator.routines.LongValidator </p><p>• org.apache.commons.validator.routines.FloatValidator </p><p>• org.apache.commons.validator.routines.DoubleValidator </p><p>• org.apache.commons.validator.routines.BigIntegerValidator </p><p>• org.apache.commons.validator.routines.BigDecimalValidator </p><p>• org.apache.commons.validator.routines.CurrencyValidator</p><p><strong>Apache commons-validator</strong> </p><p>• 其他校验器 </p><p>• API </p><p>• org.apache.commons.validator.routines.RegexValidator </p><p>• org.apache.commons.validator.routines.CodeValidator </p><p>• org.apache.commons.validator.routines.ISBNValidator </p><p>• org.apache.commons.validator.routines.InetAddressValidator </p><p>• org.apache.commons.validator.routines.EmailValidator </p><p>• org.apache.commons.validator.routines.UrlValidator </p><p>• org.apache.commons.validator.routines.DomainNameValidator</p><p><strong>Bean Validation 1.0**</strong>（JSR-303）** </p><p>• 介绍 </p><p>Java API for JavaBean validation in Java EE and Java SE. The technical objective of </p><p>this work is to provide a class level constraint declaration and validation facility </p><p>for the Java application developer, as well as a constraint metadata repository and </p><p>query API. </p><p>• 规范版本 </p><p>• 2009.10.12 Bean Validation 1.0（JSR-303） </p><p>• 2013.04.10 Bean Validation 1.1（JSR-349） </p><p>• 2017.06.21 Bean Validation 2.0.0.CR1（JSR-380）</p><p><strong>Bean Validation 1.0**</strong>（JSR-303）** </p><p>• 常用注解 </p><p>• @Valid </p><p>• @NotNull </p><p>• @Null </p><p>• @Size </p><p>• @Min </p><p>• @Max</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>通过课堂上简易版的依赖注入和依赖查找，实现用户注册功能</p><ul><li>通过UserService实现用户注册【依赖注入】</li><li>注册用户时，需要校验<ul><li>密码6-32位</li><li>id必须是大于0的整数</li><li>电话号码采用中文的方式【十一位校验】</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 项目实战营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二节 数据存储之 JDBC</title>
      <link href="2021/02/27/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8B-JDBC/"/>
      <url>2021/02/27/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%BA%8C%E8%8A%82-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8B-JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="小马哥的-Java-项目实战营-Java-EE-项目-第二节-数据存储之-JDBC"><a href="#小马哥的-Java-项目实战营-Java-EE-项目-第二节-数据存储之-JDBC" class="headerlink" title="小马哥的 Java 项目实战营  Java EE 项目 - 第二节 数据存储之 JDBC"></a>小马哥的 Java 项目实战营  Java EE 项目 - 第二节 数据存储之 JDBC</h1><h2 id="Java-Database-Connectivity（JDBC）"><a href="#Java-Database-Connectivity（JDBC）" class="headerlink" title="Java Database Connectivity（JDBC）"></a>Java Database Connectivity（JDBC）</h2><p>• 概念 </p><p>JDBC(Java DataBase Connectivity,java数据库连接)是一种用于执行SQL语句的Java API， </p><p>可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提 </p><p>供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应 </p><p>用程序，同时，JDBC也是个商标名。（文字来源 - 360 百科） </p><p>JDBC 是 Java 针对关系型数据库的底层 API，也是 iBatis（MyBatis）、JDO、Hibernate、 </p><p>JPA 等高层框架的基石。</p><h2 id="JDBC-4-0-主要特征"><a href="#JDBC-4-0-主要特征" class="headerlink" title="JDBC 4.0 主要特征"></a>JDBC 4.0 主要特征</h2><p>• 面向数据表行列编程 </p><p>• 驱动程序需要数据库定制（MySQL、Oracle） </p><p>• SQL 语法与目标数据库保持一致 </p><p>• 事务（需要数据库支持） </p><p>• 数据库元信息（数据库信息、表结构信息等）</p><h2 id="JDBC-核心-API"><a href="#JDBC-核心-API" class="headerlink" title="JDBC 核心 API"></a>JDBC 核心 API</h2><h3 id="数据源接口-javax-sql-DataSource"><a href="#数据源接口-javax-sql-DataSource" class="headerlink" title="数据源接口 - javax.sql.DataSource"></a>数据源接口 - javax.sql.DataSource</h3><p>接口 - javax.sql.DataSource </p><p>获取方式</p><ul><li>普通对象初始化<ul><li>Spring Bean</li><li>API实现</li></ul></li><li>JNDI 依赖查找</li><li></li></ul><p>举例：</p><p>comons.apache.</p><p>主流DataSource实现</p><ul><li>DBCP 1/2<ul><li>间接依赖 - Apache Commons Pool<ul><li>对象池的概念<ul><li>池化 - 肉少狼多，肉 - 资源，狼 - 消费者<ul><li>特点：有借有还</li><li>核心编程思想：生产者/消费者模型</li><li>资源：线程资源，数据库资源【分表很多，分库并不多，分库问题：局部可用】，I/O资源</li><li>举例：线程池，数据库连接池【都和线程有关系】【单例的还是原生的，原生的每次都是一个新的实例】</li></ul></li></ul></li></ul></li></ul></li><li>C3P0（字节码提升/优化）</li><li>Alibaba Druid（字节码提升/优化）</li></ul><h3 id="JDBC-驱动接口-java-sql-Driver"><a href="#JDBC-驱动接口-java-sql-Driver" class="headerlink" title="JDBC 驱动接口 - java.sql.Driver"></a>JDBC 驱动接口 - java.sql.Driver</h3><p>acceptsURL ：尝试连接，是否成功</p><p>DriverPropertiesInfo：属性</p><p>getMarjorVersion（）：API版本属性比较关键的时候使用，以及getMinorVersion（）</p><p>jdbcCompliant：jdbc是否兼容</p><p>一般使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.derby.jdbc.EmbeddedDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注册Driver到DriverManager中</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">setLogWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//通过ClassLoader加载Java.sql.DriverManager  -&gt; static{}</span><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getDriver</span><span class="token punctuation">(</span><span class="token string">"jdbc:derby:/db/user-platform;create=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"jdbc:derby:/db/user-platform;create=true"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="驱动管理器接口-java-sql-DriverManager"><a href="#驱动管理器接口-java-sql-DriverManager" class="headerlink" title="驱动管理器接口 - java.sql.DriverManager"></a>驱动管理器接口 - java.sql.DriverManager</h3><p>管理器的角色</p><ul><li>registerDriver()<ul><li>JDBC规范中，Class.forName(“org.apache.derby.jdbc.EmbeddedDriver”); 需要驱动自己进行主动注册</li></ul></li></ul><ul><li>获取Driver实现的方式【下面是顺序】<ul><li>前提：数据库驱动Driver实现会显示地调用registerDriver()方法</li><li>通过ClassLoader去加载Driver实现【用户/应用控制】【1】</li><li>通过java SPI serviceLoader获取Driver实现【2】<ul><li>ServiceLoader会初始化Driver实现类（应用主动配置），包含Class加载</li></ul></li><li>通过jdbc.driver 系统属性【3】<ul><li>通过读取“jcbc.driver”系统属性后，在经过“：”分割，尝试获取多值，在通过ClassLoader加载对应的实现类</li></ul></li></ul></li></ul><ul><li>获取Connection<ul><li>通过ClassLoader类加载数据库JDBC Driver 实现类的方式，增加java.sql.DriverManager#registeredDrivers字段的元素，然后通过迭代的方式逐一getConnection方法参数的JDBC URL是否可用。</li></ul></li></ul><h3 id="数据连接接口-java-sql-Connection"><a href="#数据连接接口-java-sql-Connection" class="headerlink" title="数据连接接口 - java.sql.Connection"></a>数据连接接口 - java.sql.Connection</h3><ul><li>相近语义术语<ul><li>一个JDBC相当于MyBatis中的Session或者Hibernate的Session</li></ul></li></ul><h3 id="SQL-命令接口-java-sql-Statement"><a href="#SQL-命令接口-java-sql-Statement" class="headerlink" title="SQL 命令接口 - java.sql.Statement"></a>SQL 命令接口 - java.sql.Statement</h3><p>主要类型</p><ul><li><p>创建SQL命令 - Statement【都是接口】</p><ul><li>普通SQL命令 - java.sql.Statement</li><li>预编译SQL命令 - java.sql.PreparedStatement</li><li>存储过程SQL命令 - java.sql.CallableStatement</li></ul></li><li><p>DDL语句和DML语句</p><ul><li>DML语句：CRUD<ul><li>R: java.sql.Statement#executeQuery</li><li>CUD： java.sql.Statement#executeUpdate</li></ul></li><li>DDL<ul><li>java.sql.Statement#execute<ul><li>成功的话，不需要返回值（返回false）。创建过程中，失败是一个异常，成功的话返回true或者false都没有意义，为什么？</li><li>失败的话，抛出SQLException</li></ul></li></ul></li></ul></li></ul><h3 id="SQL-执行结果接口-java-sql-ResultSet"><a href="#SQL-执行结果接口-java-sql-ResultSet" class="headerlink" title="SQL 执行结果接口 - java.sql.ResultSet"></a>SQL 执行结果接口 - java.sql.ResultSet</h3><h3 id="ResultSet-元数据接口-java-sql-ResultSetMetaData"><a href="#ResultSet-元数据接口-java-sql-ResultSetMetaData" class="headerlink" title="ResultSet 元数据接口 - java.sql.ResultSetMetaData"></a>ResultSet 元数据接口 - java.sql.ResultSetMetaData</h3><h3 id="SQL-执行异常-java-sql-SQLException"><a href="#SQL-执行异常-java-sql-SQLException" class="headerlink" title="SQL 执行异常 - java.sql.SQLException"></a>SQL 执行异常 - java.sql.SQLException</h3><ul><li>基本特点<ul><li>几乎所有的JDBC API操作都需要try catch SQLException</li><li>SQLException属于检查类型异常，继承了Exception</li></ul></li></ul><h3 id="事务保护点接口-java-sql-Savepoint"><a href="#事务保护点接口-java-sql-Savepoint" class="headerlink" title="事务保护点接口 - java.sql.Savepoint"></a>事务保护点接口 - java.sql.Savepoint</h3><h2 id="上课记录"><a href="#上课记录" class="headerlink" title="上课记录"></a>上课记录</h2><h3 id="数据源接口"><a href="#数据源接口" class="headerlink" title="数据源接口"></a>数据源接口</h3><h3 id="关联技术"><a href="#关联技术" class="headerlink" title="关联技术"></a>关联技术</h3><h4 id="Native-SQL"><a href="#Native-SQL" class="headerlink" title="Native SQL"></a>Native SQL</h4><h4 id="数据源-DataSource"><a href="#数据源-DataSource" class="headerlink" title="数据源 DataSource"></a>数据源 DataSource</h4><h5 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h5><ul><li>n个DataSources</li><li>DataSource代理<ul><li>Druid</li></ul></li></ul><h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><ul><li>MyBatis Generator 通过数据库表结构生成Java代码和SQL Mapper</li></ul><h4 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h4><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><p>对应不同的技术栈的时候，数据源，JDBC，JPA，Redis，写的过程中不要过度依赖</p><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><ul><li>如果有多个驱动，程序如何确定是使用哪一个驱动？<ul><li>无法确认</li></ul></li><li>java SPI会一次性全部加载，会不会比较浪费资源<ul><li>会，尽量不要配置多个。Dubbo中有自己的实现？</li></ul></li><li>多个Driver被加载到ClassLoader之后，到底用的是哪个？<ul><li>getConnection方法是通过JDBC URL来判断的，通过迭代多次，返回第一个成功的Connection</li></ul></li><li><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210227202010.png" alt="image-20210227202010764"><ul><li>java.sql.DriverManager#loadInitialDrivers方法中java SPI 空遍历的意义？</li><li>ServiceLoader 中查看：ServiceLoader#next() 方法会主动触发ClassLoader加载</li></ul></li><li></li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>要求【derby数据库】</p><ul><li>通过自研Web MVC框架实现一个用户注册，forward到一个成功的页面（JSP用法）<ul><li>/register</li></ul></li><li>通过Controller -&gt; Service -&gt; Repository实现（数据库实现）</li><li>（非必须）JNDI方式获取数据库源（DataSource）</li></ul><p>问题：</p><p>1、derby数据库如何使用</p><p><a href="https://www.wisyoong.com/2020/04/25/macOS-%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%85%8D%E7%BD%AE-Derby-%E6%95%B0%E6%8D%AE%E5%BA%93/">macOS 环境下配置 Derby 数据库</a></p><p>不行，使用mysql吧。。</p><p>2、用户注册页面使用bootstrap绘制</p><p>3、注册成功数据库操作【通过Controller -&gt; Service -&gt; Repository实现】done</p><p>4、成功后forward到成功的页面【使用jsp】</p><p>5、JNDI方式获取数据库源</p><p>数据库的连接整体流程</p><p>SPI</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 项目实战营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库对比及选型</title>
      <link href="2021/02/26/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94%E5%8F%8A%E9%80%89%E5%9E%8B/"/>
      <url>2021/02/26/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94%E5%8F%8A%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h1><p>关系型数据库，是指采用了关系模型来组织数据的数据库。简单来说，关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。</p><h2 id="关系型数据库的优点"><a href="#关系型数据库的优点" class="headerlink" title="关系型数据库的优点"></a>关系型数据库的优点</h2><p>1、容易理解：二维表结构是非常贴近逻辑世界的一个概念，关系模型相对网状、层次等其他模型来说更容易理解</p><p>2、使用方便：通用的SQL语言使得操作关系型数据库非常方便</p><p>3、易于维护：丰富的完整性(实体完整性、参照完整性和用户定义的完整性)大大减低了数据冗余和数据不一致的概率</p><h2 id="关系型数据库的缺点"><a href="#关系型数据库的缺点" class="headerlink" title="关系型数据库的缺点"></a>关系型数据库的缺点</h2><p>1、 当数据存储容量足够大的时候，备份成为了一件非常复杂的事情，费时费力。</p><p>2、 主备模式下，如果主库不出现问题并不会切换到备库，备库仅仅起到了一个以防万一的作用平时并不能分担压力，但是却不得不承担备库部分的成本。</p><p>3、 在读写分离场下，每添加一个只读库基本上就得购买一个一模一样的存储空间，如果是一个1T的主库，那么两个只读库的成本就是2个1T。</p><p>4、 还是读写分离场景，一个上TB的数据库容量加个只读副本就需要一到两天时间，非常的麻烦。</p><p>5、 传统模式下为了保障数据库不会到达 100% 都会预留10%~20% 的容量作为阈值，到了 80% 就进行升级或者扩容，其实这个时候那个预留的阈值是浪费了的，但是又不得不浪费。</p><p>6、 存储容量瓶颈，云计算厂商提供的关系型数据库基本上都有一个问题，那就是存储容量存在瓶颈，当数据量达到 2T 左右的时候就已经是瓶颈了无法进一步上升，而部分数据库应用场景恰恰就是需要大容量大存储的。</p><p>7、 性能瓶颈，当使用数据库遭遇性能瓶颈的时候其实是很糟心的，如果是能通过升级配置解决的那倒还行，如果是因为数据库软件本身的问题而更换数据库软件又意味着更高额的成本和风险。</p><hr><p>8、高并发读写需求<br>    网站的用户并发性非常高，往往达到每秒上万次读写请求，对于传统关系型数据库来说，硬盘I/O是一个很大的瓶颈</p><p>9、海量数据的高效率读写<br>    网站每天产生的数据量是巨大的，对于关系型数据库来说，在一张包含海量数据的表中查询，效率是非常低的</p><p>10、高扩展性和可用性<br>    在基于web的结构当中，数据库是最难进行横向扩展的，当一个应用系统的用户量和访问量与日俱增的时候，数据库却没有办法像web server和app server那样简单的通过添加更多的硬件和服务节点来扩展性能和负载能力。对于很多需要提供24小时不间断服务的网站来说，对数据库系统进行升级和扩展是非常痛苦的事情，往往需要停机维护和数据迁移。</p><h2 id="关系型数据库的主流产品"><a href="#关系型数据库的主流产品" class="headerlink" title="关系型数据库的主流产品"></a>关系型数据库的主流产品</h2><p>1、Oracle</p><p>Oracle是1983年推出的世界上第一个开放式商品化关系型数据库管理系统。它采用标准的SQL结构化查询语言，支持多种数据类型，提供面向对象存储的数据支持，具有第四代语言开发工具，支持Unix、Windows NT、OS/2、Novell等多种平台。除此之外，它还具有很好的并行处理功能。Oracle产品主要由Oracle服务器产品、Oracle开发工具、Oracle应用软件组成，也有基于微机的数据库产品。主要满足对银行、金融、保险等企业、事业开发大型数据库的需求。</p><p>2、DB2</p><p>DB2是美国IBM公司开发的一套关系型数据库管理系统，它主要的运行环境为UNIX（包括IBM自家的AIX）、Linux、IBM i（旧称OS/400）、z/OS，以及Windows服务器版本。</p><p>DB2主要应用于大型应用系统，具有较好的可伸缩性，可支持从大型机到单用户环境，应用于所有常见的服务器操作系统平台下。 DB2提供了高层次的数据利用性、完整性、安全性、可恢复性，以及小规模到大规模应用程序的执行能力，具有与平台无关的基本功能和SQL命令。</p><p>DB2采用了数据分级技术，能够使大型机数据很方便地下载到LAN数据库服务器，使得客户机/服务器用户和基于LAN的应用程序可以访问大型机数据，并使数据库本地化及远程连接透明化。</p><p>DB2以拥有一个非常完备的查询优化器而著称，其外部连接改善了查询性能，并支持多任务并行查询。 DB2具有很好的网络支持能力，每个子系统可以连接十几万个分布式用户，可同时激活上千个活动线程，对大型分布式应用系统尤为适用。</p><p>3、Microsoft SQL Server</p><p>SQL Server 是Microsoft 公司推出的关系型数据库管理系统。具有使用方便可伸缩性好与相关软件集成程度高等优点，可跨越从运行Microsoft Windows 98 的膝上型电脑到运行Microsoft Windows 2012 的大型多处理器的服务器等多种平台使用。</p><p>Microsoft SQL Server 是一个全面的数据库平台，使用集成的商业智能 (BI)工具提供了企业级的数据管理。Microsoft SQL Server 数据库引擎为关系型数据和结构化数据提供了更安全可靠的存储功能，使您可以构建和管理用于业务的高可用和高性能的数据应用程序。</p><p>4、Microsoft Access</p><p>Access是由微软发布的关系数据库管理系统。它结合了 MicrosoftJet Database Engine 和 图形用户界面两项特点，是 Microsoft Office 的系统程序之一。</p><p>Access是微软把数据库引擎的图形用户界面和软件开发工具结合在一起的一个数据库管理系统。它是微软OFFICE的一个成员, 在包括专业版和更高版本的office版本里面被单独出售。2018年9月25日,最新的微软Office Access 2019在微软Office 2019里发布。</p><p>MS ACCESS以它自己的格式将数据存储在基于Access Jet的数据库引擎里。它还可以直接导入或者链接数据(这些数据存储在其他应用程序和数据库)。</p><p>5、MySQL</p><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><p>MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><h1 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h1><p>非关系型数据库提出另一种理念，例如，以键值对存储，且结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。使用这种方式，用户可以根据需要去添加自己需要的字段，这样，为了获取用户的不同信息，不需要像关系型数据库中，要对多表进行关联查询。仅需要根据id取出相应的value就可以完成查询。但非关系型数据库由于很少的约束，他也不能够提供像SQL所提供的where这种对于字段属性值情况的查询。并且难以体现设计的完整性。他只适合存储一些较为简单的数据，对于需要进行较复杂查询的数据，SQL数据库显的更为合适。</p><h2 id="非关系型数据库分类"><a href="#非关系型数据库分类" class="headerlink" title="非关系型数据库分类"></a>非关系型数据库分类</h2><p>​    由于非关系型数据库本身天然的多样性，以及出现的时间较短，因此，不想关系型数据库，有几种数据库能够一统江山，非关系型数据库非常多，并且大部分都是开源的。<br>​    这些数据库中，其实实现大部分都比较简单，除了一些共性外，很大一部分都是针对某些特定的应用需求出现的，因此，对于该类应用，具有极高的性能。依据结构化方法以及应用场合的不同，主要分为以下几类：<br>​    1、面向高性能并发读写的key-value数据库：key-value数据库的主要特点即使具有极高的并发读写性能，Redis,Tokyo Cabinet,Flare就是这类的代表<br>​    2、面向海量数据访问的面向文档数据库：这类数据库的特点是，可以在海量的数据中快速的查询数据，典型代表为MongoDB以及CouchDB<br>​    3、面向可扩展性的分布式数据库：这类数据库想解决的问题就是传统数据库存在可扩展性上的缺陷，这类数据库可以适应数据量的增加以及数据结构的变化</p><h1 id="分布式关系型数据库"><a href="#分布式关系型数据库" class="headerlink" title="分布式关系型数据库"></a>分布式关系型数据库</h1><p>目前只对主流的2个分布式关系型数据库进行调研</p><p><a href="https://juejin.cn/post/6844903863170891790">存储上云TiDB和Polardb</a></p><h2 id="Aliyun-PolarDB"><a href="#Aliyun-PolarDB" class="headerlink" title="Aliyun PolarDB"></a>Aliyun PolarDB</h2><p><a href="https://help.aliyun.com/product/58609.html?spm=a2c4g.11186623.6.540.602f1b417HgAbJ">PolarDB MySQL 云原生数据库</a></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h4><ul><li>PolarDB兼容多款流行的关系型数据库引擎，完全兼容MySQL和PostgreSQL，高度兼容Oracle语法，代码/应用无需修改或只需少量修改。</li></ul><h4 id="降低成本"><a href="#降低成本" class="headerlink" title="降低成本"></a>降低成本</h4><ul><li>计算节点和存储分离：多个计算节点共享存储，新增只读节点时只需支付计算节点费用，大大降低扩容成本。</li><li>Serverless存储：存储空间无需手动配置，根据数据量自动伸缩，您只需为实际使用的数据库容量付费。</li></ul><h4 id="极致性能"><a href="#极致性能" class="headerlink" title="极致性能"></a>极致性能</h4><ul><li>深度优化数据库内核，同时采用物理复制、RDMA高速网络和分布式共享存储，大幅提高性能。</li><li>集群包含一个主节点和最多15个只读节点，满足高并发场景对性能的要求，尤其适用于读多写少的场景。</li><li>基于共享存储的一写多读集群，数据只需要一次修改，所有节点立即生效。</li></ul><p>增加：</p><ul><li>在性能上 POLARDB 远超 MySQL ，在特殊场景下最高可以实现6倍于 MySQL。</li></ul><h4 id="海量存储，支持上百TB级别数据"><a href="#海量存储，支持上百TB级别数据" class="headerlink" title="海量存储，支持上百TB级别数据"></a>海量存储，支持上百TB级别数据</h4><ul><li>采用分布式块存储设计和文件系统，使得存储容量不限制于单节点的规格，能够轻松扩展，应对上百TB级别的数据规模。</li></ul><h4 id="高可用和高可靠保障，数据安全可靠"><a href="#高可用和高可靠保障，数据安全可靠" class="headerlink" title="高可用和高可靠保障，数据安全可靠"></a>高可用和高可靠保障，数据安全可靠</h4><ul><li>共享分布式存储的设计，彻底解决了主从（Master-Slave）异步复制所带来的备库数据非强一致的缺陷，使得整个数据库集群在应对任何单点故障时，可以保证数据零丢失。</li><li>多可用区架构，在多个可用区内都有数据备份，为数据库提供容灾和备份。</li><li>采用白名单、VPC网络、数据多副本存储等全方位的手段，对数据库数据访问、存储、管理等各个环节提供安全保障。</li></ul><h4 id="快速弹性，应对不确定的业务增长"><a href="#快速弹性，应对不确定的业务增长" class="headerlink" title="快速弹性，应对不确定的业务增长"></a>快速弹性，应对不确定的业务增长</h4><ul><li><p>配置升降级，5分钟生效。</p><p>采用容器虚拟化技术和共享的分布式块存储技术，使得数据库服务器的CPU、内存能够快速扩容。</p></li><li><p>增减节点，5分钟生效。</p><p>通过动态增减节点提升性能或节省成本。通过使用集群地址，可屏蔽底层的变化，应用对于增减节点无感知。</p></li></ul><h4 id="无锁备份"><a href="#无锁备份" class="headerlink" title="无锁备份"></a>无锁备份</h4><ul><li>利用底层分布式存储的快照技术，只需分钟级别即可完成对上TB数据量大小的数据库的备份，且整个备份过程不需要加锁，效率更高，影响更小。</li></ul><h2 id="TiDB"><a href="#TiDB" class="headerlink" title="TiDB"></a>TiDB</h2><p><a href="https://docs.pingcap.com/zh/tidb/stable">TiDB官网</a></p><p><a href="https://pingcap.com/blog-cn/schema-application-scenario-for-tidb/">TiDB 常⻅架构应⽤场景</a></p><p><a href="https://book.tidb.io/session4/chapter1/scenarios.html">TIDB gitbook</a></p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><h4 id="一键水平扩容或者缩容"><a href="#一键水平扩容或者缩容" class="headerlink" title="一键水平扩容或者缩容"></a>一键水平扩容或者缩容</h4><ul><li>得益于 TiDB 存储计算分离的架构的设计，可按需对计算、存储分别进行在线扩容或者缩容，扩容或者缩容过程中对应用运维人员透明。</li></ul><h4 id="金融级高可用"><a href="#金融级高可用" class="headerlink" title="金融级高可用"></a>金融级高可用</h4><ul><li>数据采用多副本存储，数据副本通过 Multi-Raft 协议同步事务日志，多数派写入成功事务才能提交，确保数据强一致性且少数副本发生故障时不影响数据的可用性。可按需配置副本地理位置、副本数量等策略满足不同容灾级别的要求。</li></ul><h4 id="实时-HTAP"><a href="#实时-HTAP" class="headerlink" title="实时 HTAP"></a>实时 HTAP</h4><ul><li>提供行存储引擎 TiKV、列存储引擎 TiFlash 两款存储引擎，TiFlash 通过 Multi-Raft Learner 协议实时从 TiKV 复制数据，确保行存储引擎 TiKV 和列存储引擎 TiFlash 之间的数据强一致。TiKV、TiFlash 可按需部署在不同的机器，解决 HTAP 资源隔离的问题。</li></ul><h4 id="云原生的分布式数据库"><a href="#云原生的分布式数据库" class="headerlink" title="云原生的分布式数据库"></a>云原生的分布式数据库</h4><ul><li>专为云而设计的分布式数据库，通过 <a href="https://docs.pingcap.com/zh/tidb-in-kubernetes/v1.1/tidb-operator-overview">TiDB Operator</a> 可在公有云、私有云、混合云中实现部署工具化、自动化。</li></ul><h4 id="兼容-MySQL-5-7-协议和-MySQL-生态"><a href="#兼容-MySQL-5-7-协议和-MySQL-生态" class="headerlink" title="兼容 MySQL 5.7 协议和 MySQL 生态"></a>兼容 MySQL 5.7 协议和 MySQL 生态</h4><ul><li>兼容 MySQL 5.7 协议、MySQL 常用的功能、MySQL 生态，应用无需或者修改少量代码即可从 MySQL 迁移到 TiDB。提供丰富的数据迁移工具帮助应用便捷完成数据迁移。</li></ul><h1 id="数据库之间的对比"><a href="#数据库之间的对比" class="headerlink" title="数据库之间的对比"></a>数据库之间的对比</h1><p><a href="https://book.tidb.io/session1/chapter5/mysql-compatibility.html">第5章 TiDB 和 MySQL 的区别</a></p><p><a href="https://help.aliyun.com/document_detail/146102.html">PolarDB MySQL与RDS MySQL的对比</a></p><p><a href="https://www.mf8.biz/polardb-for-mysql/">POLARDB for MySQL 版评测及同类横向对比【重要】</a></p><h1 id="为什么要做对比？"><a href="#为什么要做对比？" class="headerlink" title="为什么要做对比？"></a>为什么要做对比？</h1><p>数据库大表2700w，需要做处理，技术选型，看什么合适</p><h1 id="分库分表方案讨论"><a href="#分库分表方案讨论" class="headerlink" title="分库分表方案讨论"></a>分库分表方案讨论</h1><p><a href="https://mp.weixin.qq.com/s/U_pEF9sfnXeZ7RnhGFnqyg">“分库分表” ？选型和流程要慎重，否则会失控</a></p><h1 id="阿里云数据库上云指导图"><a href="#阿里云数据库上云指导图" class="headerlink" title="阿里云数据库上云指导图"></a>阿里云数据库上云指导图</h1><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210301161812.jpg" alt="img"></p><p><strong>OLTP</strong> 系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；（在线事务处理（简称OLTP）在3层体系结构中支持面向事务的应用程序。OLTP管理组织的日常事务。）</p><p><strong>OLAP</strong> 系统则强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等。 （联机分析处理，一类软件工具，可为业务决策提供数据分析。OLAP系统允许用户一次分析来自多个数据库系统的数据库信息。）</p><p><a href="https://www.guru99.com/oltp-vs-olap.html">OLTP和OLAP之间的区别</a></p><p><a href="https://help.aliyun.com/document_detail/184047.html">HATP - 混合事务分析处理（Hybrid Transactional/Analytical Processing，简称HTAP）</a></p><h1 id="MySQL迁移PolarDB"><a href="#MySQL迁移PolarDB" class="headerlink" title="MySQL迁移PolarDB"></a>MySQL迁移PolarDB</h1><p><a href="https://help.aliyun.com/document_detail/188525.html?spm=a2c4g.11186623.6.567.796b40aaRNOj5Q">购买方式-简介和对比</a></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210302152822.png" alt="image-20210302152822140"></p><p>目前业务量不大，先选择购买 <code>云数据库 PolarDB-按量付费</code></p><p><a href="https://help.aliyun.com/document_detail/123903.html?spm=5176.smartservice_service_chat.0.dexternal.6d053f1bwtLTvp">一键升级RDS MySQL至PolarDB MySQL</a></p><p>在购买并执行迁移的时候报错了</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210302151529.png" alt="image-20210302151529500"></p><p>咨询了阿里云客服，针对RDS MySQL 5.7，内核小版本需为20200331或以上版本。需要抽时间换内核小版本，再进行购买。<code>20210302</code>晚上升级内核后再进购买测试。</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210302151351.png" alt="image-20210302151351929"></p><h1 id="其他参考链接"><a href="#其他参考链接" class="headerlink" title="其他参考链接"></a>其他参考链接</h1><p><a href="https://blog.csdn.net/oChangWen/article/details/53423301">关系型数据库和非关系型数据库区别、oracle与mysql的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小马哥训练营-汇总记录</title>
      <link href="2021/02/25/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E5%B0%8F%E9%A9%AC%E5%93%A5%E8%AE%AD%E7%BB%83%E8%90%A5-%E6%B1%87%E6%80%BB%E8%AE%B0%E5%BD%95/"/>
      <url>2021/02/25/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E5%B0%8F%E9%A9%AC%E5%93%A5%E8%AE%AD%E7%BB%83%E8%90%A5-%E6%B1%87%E6%80%BB%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>第一周 第一节第二节</p><p>ORM框架是怎么实现的，实现一个ORM框架</p><p>Servlet，Filter是怎么实现Controller，即如何实现自己的mvc框架</p><p>JNDI-依赖查找注入</p><p>第二周 第三节第四节</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 项目实战营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一节：Java EE 单体架构</title>
      <link href="2021/02/25/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9AJava-EE-%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>2021/02/25/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%9AJava-EE-%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="小马哥的-Java-项目实战营-Java-EE-项目-第一节：Java-EE-单体架构"><a href="#小马哥的-Java-项目实战营-Java-EE-项目-第一节：Java-EE-单体架构" class="headerlink" title="小马哥的 Java 项目实战营  Java EE 项目 - 第一节：Java EE 单体架构"></a>小马哥的 Java 项目实战营  Java EE 项目 - 第一节：Java EE 单体架构</h1><p>小马哥（mercyblitz）</p><h2 id="我是谁？"><a href="#我是谁？" class="headerlink" title="我是谁？"></a><strong>我是谁？</strong></h2><p>小马哥（mercyblitz） </p><p>•父亲 </p><p>• Java 劝退师 </p><p>•Apache Dubbo PMC </p><p>•Spring Cloud Alibaba 架构师 </p><p>•《Spring Boot 编程思想》作者</p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a><strong>主要内容</strong></h2><ol><li><p>总体目标 </p></li><li><p>项目需求说明 </p></li><li><p>迭代 v1：需要实现 </p></li><li><p>迭代 v2：日志管理 </p></li><li><p>问答互动</p></li></ol><h2 id="总体目标"><a href="#总体目标" class="headerlink" title="总体目标"></a><strong>总体目标</strong></h2><p>• 理解需求描述，并深度探讨潜在需求 </p><p>• 掌握 Java 生态系统、企业级架构和技术规范 </p><p>• 学会使用 Java 标准技术栈实现互联网平台项目</p><p>Cyy：项目分为技术性的和工程性的，工程性的网上有很多项目，主要还是要了解运行背后的逻辑</p><p>• 功能需求 </p><p>• 用户注册 </p><p>• 用户名注册 </p><p>• 邮箱注册 </p><p>• 手机注册 </p><p>• 用户登录 </p><p>• 用户名登录 </p><p>• 邮箱登录 </p><p>• 手机登录 </p><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a><strong>项目需求</strong></h2><p>• 非功能需求 </p><p>• 系统架构 </p><p>• 单体架构 </p><h2 id="迭代-v1：需要实现"><a href="#迭代-v1：需要实现" class="headerlink" title="迭代 v1：需要实现"></a><strong>迭代</strong> <strong>v1</strong>：需要实现</h2><p>• 技术栈 </p><p>• 应用容器 </p><p>• Servlet Engine - Apache Tomcat 8+ </p><p>• Web 服务 </p><p>• 基于 Servlet 实现的自研 MVC 框架，支持 JAX-RS 注解 </p><p>• 数据存储 </p><p>• 基于 JDBC 实现 </p><h2 id="Servlet-概念"><a href="#Servlet-概念" class="headerlink" title="Servlet 概念"></a>Servlet 概念</h2><p>Servlet 是一种基于 Java 技术的 Web 组件，用于生成动态内容，由容器管理。类似于其 </p><p>他 Java 技术组件，Servlet 是平台无关的 Java 类组成，并且由 Java Web 服务器加载 </p><p>执行。通常情况，由 Servlet 容器提供运行时环境。Servlet 容器，有时候也称作为 </p><p>Servlet 引擎，作为Web服务器或应用服务器的一部分。通过请求和响应对话，提供Web </p><p>客户端与 Servlets 交互的能力。容器管理Servlets实例以及它们的生命周期。</p><h2 id="Servlet-主要版本"><a href="#Servlet-主要版本" class="headerlink" title="Servlet 主要版本"></a>Servlet 主要版本</h2><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210225190513.png" alt="image-20210225190512938"></p><h2 id="Servlet-核心-API"><a href="#Servlet-核心-API" class="headerlink" title="Servlet 核心 API"></a>Servlet 核心 API</h2><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210225190524.png" alt="image-20210225190524058"></p><p>这里的类都看了一遍。。</p><h2 id="Servlet-组件注册方式"><a href="#Servlet-组件注册方式" class="headerlink" title="Servlet 组件注册方式"></a>Servlet 组件注册方式</h2><p>• 传统 web.xml 注册方式 </p><p>• 注解注册方式（Servlet 3.0+） </p><p>• 编码注册方式（Servlet 3.0+）</p><h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><p>• 声明（应用行为） </p><p>• 注册（容器行为） </p><p>• 初始化：Servlet#init(ServletConfig) </p><p>• 服务：Servlet#service(ServletRequest, ServletResponse) </p><p>• 销毁：Servlet#destroy()</p><h2 id="Filter-生命周期"><a href="#Filter-生命周期" class="headerlink" title="Filter 生命周期"></a>Filter 生命周期</h2><p>• 声明（应用行为） </p><p>• 注册（容器行为） </p><p>• 初始化：Filter#init(FilterConfig) </p><p>• 过滤: Filter#doFilter(ServletRequest,ServletResponse,FilterChain) </p><p>• 毁：Filter#destroy()</p><h2 id="ServletContext-生命周期"><a href="#ServletContext-生命周期" class="headerlink" title="ServletContext 生命周期"></a>ServletContext 生命周期</h2><p>• 声明（应用行为） </p><p>• 注册（容器行为） </p><p>• 初始化：ServletContextListener#contextInitialized </p><p>• 销毁：ServletContextListener#contextDestroyed</p><h2 id="Servlet-3-1-规范重点章节"><a href="#Servlet-3-1-规范重点章节" class="headerlink" title="Servlet 3.1 规范重点章节"></a>Servlet 3.1 规范重点章节</h2><p>• CHAPTER 2 The Servlet Interface </p><p>• CHAPTER 3 The Request </p><p>• CHAPTER 4 Servlet Context </p><p>• CHAPTER 5 The Response </p><p>• CHAPTER 9 Dispatching Requests </p><p>• CHAPTER 11Application Lifecycle Events </p><p>• CHAPTER 12 Mapping Requests to Servlets</p><p>nio</p><p>buffer</p><h2 id="EL-概念"><a href="#EL-概念" class="headerlink" title="EL 概念"></a>EL 概念</h2><p>EL是Expression Language的英文缩写（表达式语言）,原来是为了方便存储数据所自定义的语言。当时呢，只能在JSTL1.0的标签中使用，现在已经成为了JSP2.0的规范之一，已经成为了一项成熟的、标准的技术。 </p><p>EL表达式规定为：eval-expression 和 literal-expression,同时EL表达式支持Composite expressions</p><h2 id="EL-语法支持"><a href="#EL-语法支持" class="headerlink" title="EL 语法支持"></a>EL 语法支持</h2><p>• 表达式：取值表达式、字面值表达式、组合表达式 </p><p>• 操作符号[]和. </p><p>• 操作符：算术操作符、关系操作符(ralational operator)、逻辑操作符(logic operator)、空值操作符(empty operator)、条件操作符(conditonal operator) </p><p>• 隐藏对象(hidden object) </p><p>• EL函数(EL function)</p><h2 id="JSTL-概念"><a href="#JSTL-概念" class="headerlink" title="JSTL 概念"></a>JSTL 概念</h2><p>JSTL全名为JSP Standard Tag Libaray(JSP标准标签函数库),目前主流的版本为1.2,它是 </p><p>由JCP(Java Commnunity Process)制定的标准规范,提供给我们一个标准通用的标签函数 </p><p>库，主要分为5大类： </p><p>• 核心标签库（Core) </p><p>• I18N格式标签库(I18N-capable format tab libaray) </p><p>• SQL标签库(SQL tag libaray) </p><p>• XML标签库(XML tag libaray) </p><p>• 函数标签库(Functions tag libaray)</p><h2 id="自研-Web-MVC-框架-模型"><a href="#自研-Web-MVC-框架-模型" class="headerlink" title="自研 Web MVC 框架 - 模型"></a>自研 Web MVC 框架 - 模型</h2><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210225190555.png" alt="image-20210225190555773"></p><p>• 技术栈 </p><p>• Servlet Logging API </p><p>• ServletContext#log 方法 </p><p>• Java Logging API </p><p>• java.util.logging.Logger </p><p><strong>迭代</strong> <strong>v2**</strong>：日志管理**</p><h1 id="课堂记录"><a href="#课堂记录" class="headerlink" title="课堂记录"></a>课堂记录</h1><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul><li>SQuirreL SQL Client</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>代码地址：<a href="https://github.com/mercyblitz/geekbang-lessons">https://github.com/mercyblitz/geekbang-lessons</a></p><p>编译命令：<code>mvn clean package -U</code></p><p>启动命令：<code>java -jar user-web/target/user-web-v1-SNAPSHOT-war-exec.jar</code></p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ul><li>API使用</li><li>整体架构设计</li></ul><h4 id="Servlet-Forward技术"><a href="#Servlet-Forward技术" class="headerlink" title="Servlet Forward技术"></a>Servlet Forward技术</h4><ul><li>实例1 Spring Framework Web DefaultServletHttpRequestHandler forward到容器文件Servlet实例</li><li>实例2 自研发 Web MVC</li><li>实例3 Spring Web MVC 模板渲染</li></ul><p>Servlet forward 它是转发请求到下一个Servlet</p><p>Servlet forward 是否会转发到Filter上去。会</p><h3 id="自研Web-MVC框架"><a href="#自研Web-MVC框架" class="headerlink" title="自研Web MVC框架"></a>自研Web MVC框架</h3><p>控制器接口：Conntoller</p><ul><li>页面渲染Controller：PageController（集成controller）</li><li>REST Body Controller：RestController（集成controller）</li></ul><h4 id="Servlet-处理静态内容"><a href="#Servlet-处理静态内容" class="headerlink" title="Servlet 处理静态内容"></a>Servlet 处理静态内容</h4><ul><li>Tomcat ： org.apache.catalina.servlets.DefaultServlet</li><li>Jetty</li><li>Weblogic</li><li>WebSphere </li></ul><blockquote><p>关联一个问题：springboot 为什么把css或者js放在static目录下，可以进行读取</p><p>org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler</p><ul><li>Tomcat（JBoss）</li><li>Jetty</li><li>Resin</li><li>WebLogic</li><li>WebSphere</li></ul></blockquote><h3 id="服务端页面渲染"><a href="#服务端页面渲染" class="headerlink" title="服务端页面渲染"></a>服务端页面渲染</h3><h4 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h4><p>jsp就是Servlet的拓展</p><p>通过模板代码-&gt;Servlet字节码</p><h4 id="流行前端框架"><a href="#流行前端框架" class="headerlink" title="流行前端框架"></a>流行前端框架</h4><ul><li>vue.js</li><li>reactjs</li></ul><p>都需要编译</p><ul><li>nodejs</li><li>源代码-&gt;js代码</li></ul><h2 id="相关基础"><a href="#相关基础" class="headerlink" title="相关基础"></a>相关基础</h2><h3 id="java归档文件"><a href="#java归档文件" class="headerlink" title="java归档文件"></a>java归档文件</h3><ul><li>zip<ul><li>Jar:Java Archiever</li><li>War:Web Archiever</li><li>Ear:Enterprise Archiever</li></ul></li></ul><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><p>多值参数  <a href="http://www.abc.com/def?a=1&amp;a=2&amp;a=3">http://www.abc.com/def?a=1&amp;a=2&amp;a=3</a></p><h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><p>GUI 基于进程，php，aapche Httpd</p><p>Servlet - 基于线程</p><ul><li>Struts1&amp;2</li><li>Spring Web MVC</li><li>JSF    </li></ul><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>Tomcat NIO 模型：</p><p>请求头（Head）</p><p>请求体（Body）</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210226095831.png" alt="image-20210226095831635"></p><p><a href="http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#Connector_Comparison">http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#Connector_Comparison</a></p><p>GoF23 Patterns</p><p>2003 - J2EE Core Patterns</p><p>JSR : <a href="https://github.com/mercyblitz/jsr">https://github.com/mercyblitz/jsr</a></p><p>Apache Digester：<a href="http://commons.apache.org/proper/commons-digester/">http://commons.apache.org/proper/commons-digester/</a></p><p>微信：</p><p>老：mercyblitz</p><p>新：mercyblitz-1985</p><p>训练营项目工程代码地址：<br>GitHub：<a href="https://github.com/mercyblitz/geekbang-lessons">https://github.com/mercyblitz/geekbang-lessons</a><br>Gitee：<a href="https://gitee.com/geektime-geekbang/mercyblitz-projects">https://gitee.com/geektime-geekbang/mercyblitz-projects</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 项目实战营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三节 数据存储之 JPA</title>
      <link href="2021/02/25/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E8%8A%82%20%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8B%20JPA/"/>
      <url>2021/02/25/java%E9%A1%B9%E7%9B%AE%E8%AE%AD%E7%BB%83%E8%90%A5/%E7%AC%AC%E4%B8%89%E8%8A%82%20%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E4%B9%8B%20JPA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://weread.qq.com/web/reader/328329c07198d703328ecb3">https://weread.qq.com/web/reader/328329c07198d703328ecb3</a></p><h1 id="小马哥的-Java-项目实战营-Java-EE-项目-第三节-数据存储之-JPA"><a href="#小马哥的-Java-项目实战营-Java-EE-项目-第三节-数据存储之-JPA" class="headerlink" title="小马哥的 Java 项目实战营 Java EE 项目 - 第三节 数据存储之 JPA"></a>小马哥的 Java 项目实战营 Java EE 项目 - 第三节 数据存储之 JPA</h1><p>小马哥（mercyblitz）<strong>我是谁？</strong> </p><p>小马哥（mercyblitz） </p><p>•父亲 </p><p>•Java 劝退师 </p><p>• Apache Dubbo PMC </p><p>• Spring Cloud Alibaba 架构师 </p><p>•《Spring Boot 编程思想》作者</p><h1 id="Java-Persistence-API-（JPA）"><a href="#Java-Persistence-API-（JPA）" class="headerlink" title="Java Persistence API**（JPA）**"></a><strong>Java Persistence API**</strong>（JPA）**</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JPA 1.0 整合查询语言（Query）和对象关系映射（ORM）元数据定义。 </p><p>JPA 2.0 在 1.0 的基础上，增加 Criteria 查询、元数据API以及校验支持。 </p><p>2009 年 JPA 2.0 最终规范发布（JSR-317） </p><p>2006 年 JPA 1.0 最终规范发布（JSR-220） </p><p>EJB 3.0 的子规范</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体（Entities） </p><p>轻量级持久化域（Domain）对象。实体类可能利用辅助类或者用于表示状态。 </p><p>• 约束 </p><p>• 实体类必须使用@Entity标注或者XML描述 </p><p>• 实体类至少包含一个默认构造器，并且构造器必须是public 或者 protected </p><p>• 实体类必须是顶级类，不能是枚举或者接口 </p><p>• 实体类禁止是final类 </p><p>• 实体支持继承、多态关联以及多态查询</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体持久字段和属性 </p><p>实体持久状态由字段（Fields）或者属性（Properties），字段即实例的属性或变量， </p><p>属性则是JavaBeans实例的setter或getter方法。 </p><p>实例属性的访问性必须是private、protected或者包可见，属性的可见性必须是 </p><p>public或者protected。 </p><p>字段和属性可能是单一类型值或集合类型值。</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 持久字段和属性类型 </p><p>• 原生类型 </p><p>• Java Serializable类型 </p><p>• 自定义类型（实现Serializable接口） </p><p>• 枚举 </p><p>• 实体类型（包括集合实体类型） </p><p>• 嵌入类型</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 字段和属性访问类型（Access Type） </p><p>• 默认访问类型 </p><p>• 非 transient 或者@Transient字段 </p><p>• 非@Transient 属性 </p><p>• 显示访问类型 </p><p>• 注解类型 </p><p>• 实体类 </p><p>• 映射超类 </p><p>• 嵌套类 </p><p>• 注解 </p><p>• @Access(AccessType.FIELD) 字段 </p><p>• @Access(AccessType.PROPERTY) 属性</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体主键（Primary Key）默认访问类型 </p><p>• 每个实体必须存在主键，主键必须定义在实体类。 </p><p>• 简单主键 </p><p>• @Id </p><p>• 复合主键 </p><p>• @EmbeddedId </p><p>• @IdClass</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体关系 </p><p>实体关系可能一对一、一对多、多对一或多对多，这些关系是多态性的，可以是 </p><p>单向或者双向。 </p><p>• 注解表述方式 </p><p>• @OneToOne </p><p>• @OneToMany </p><p>• @ManyToOne </p><p>• @ManyToMany</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体双向关系 </p><p>实体双向关系是指两实体之间不仅存在拥有方（owning），也存在倒转方 </p><p>（inverse）。主方决定了更新级联关系到数据库。 </p><p>• 规则 </p><p>• 倒转必须通过@OneToOne、@OneToMany或者@ManyToMany中的mappedBy属性方 </p><p>法关联到拥有方的字段或者属性。 </p><p>• 一对多、多对一双向关系中的多方必须是主方，因此@ManyToOne 注解不能指定 </p><p>mappedBy属性方法。 </p><p>• 双向一对一关系中，主方相当于包含外键的一方。 </p><p>• 双向多对多关系中，任何一方可能是拥有方。</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体双向关系：一对一（OneToOne） </p><p>假设： </p><p>l 实体A引用单个实体B的实例 </p><p>l 实体B引用单个实体A的实例 </p><p>l 实体A在关系中处于拥有方 </p><p>默认映射 </p><p>• 实体A被映射到数据表A </p><p>• 实体B被映射到数据表B </p><p>• 表A包含一个外键关联B </p><p>举例：客户（Customer）与信用卡（Credit Card）的关系</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体双向关系：多对一（ManyToOne）/一对多（OneToMany） </p><p>假设： </p><p>l 实体A引用单个实体B的实例 </p><p>l 实体B引用多个实体A的实例 </p><p>l 实体A在关系中处于拥有方 </p><p>默认映射 </p><p>• 实体A被映射到数据表A </p><p>• 实体B被映射到数据表B </p><p>• 表A包含一个外键关联B </p><p>举例：店铺（Store）与客户（Customer）的关系</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体双向关系：多对多（ManyToMany） </p><p>假设： </p><p>l 实体A引用多个实体B的实例 </p><p>l 实体B引用多个实体A的实例 </p><p>l 实体A在关系中处于拥有方 </p><p>默认映射 </p><p>• 实体A被映射到数据表A </p><p>• 实体B被映射到数据表B </p><p>• 存在一个名为A_B的关联表（拥有方表名为前缀），其中包含两个外键列，一列关联表A的主键， </p><p>另外一列关联表B的主键</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体单向关系：一对一（OneToOne） </p><p>假设： </p><p>l 实体A引用单个实体B的实例 </p><p>l 实体B没有引用单个实体A的实例 </p><p>l 实体A在关系中处于拥有方 </p><p>默认映射 </p><p>• 实体A被映射到数据表A </p><p>• 实体B被映射到数据表B </p><p>• 表A包含一个外键关联B</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体单向关系：一对多（OneToMany） </p><p>假设： </p><p>l 实体A引用多个实体B的实例 </p><p>l 实体B没有引用单个实体A的实例 </p><p>l 实体A在关系中处于拥有方 </p><p>默认映射 </p><p>• 实体A被映射到数据表A </p><p>• 实体B被映射到数据表B </p><p>• 存在一个名为A_B的关联表（拥有方表名为前缀），其中包含两个外键列，一列关联表A的主键， </p><p>另外一列关联表B的主键</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体单向关系：多对多（ManyToMany） </p><p>假设： </p><p>l 实体A引用多个实体B的实例 </p><p>l 实体B没有引用单个实体A的实例 </p><p>l 实体A在关系中处于拥有方 </p><p>默认映射 </p><p>• 实体A被映射到数据表A </p><p>• 实体B被映射到数据表B </p><p>• 存在一个名为A_B的关联表（拥有方表名为前缀），其中包含两个外键列，一列关联表A的主键， </p><p>另外一列关联表B的主键</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体继承（Inheritance） </p><p>实体可继承其他实体。实体之间支持继承、多态关联、多态查询 </p><p>继承方式 </p><p>• 继承抽象实体类 </p><p>• @Inheritance </p><p>• 继承已映射父类型 </p><p>• @MappedSuperclass </p><p>• @AssociationOverride </p><p>• 继承非实体类型</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体操作（Operations） </p><p>实体管理器 - EntityManager</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210305124422.png" alt="image-20210305124422838"></p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体实例生命周期（Life Cycle） </p><p>• 创建 </p><p>• 持久化 </p><p>• 移除 </p><p>• 同步到数据库 </p><p>• 刷新实例 </p><p>• 淘汰</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 持久化上下文使用期限（Persistence Context Lifetime） </p><p>• 类型 </p><p>• 事务类型（默认） </p><p>• 扩展类型 </p><p>• 阶段 </p><p>• 事务提交阶段 </p><p>• 事务类型：实体状态-&gt;脱管 </p><p>• 扩展类型：实体状态-&gt;继续维持 </p><p>• 事务回滚阶段 </p><p>• 实体状态-&gt;脱管</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体监听器和回调方法 </p><p>• 实体监听器 - @EntityListeners </p><p>• 回调方法 </p><p>• @PrePersist </p><p>• @PostPersist </p><p>• @PreRemove </p><p>• @PostRemove </p><p>• @PreUpdate </p><p>• @PostUpdate </p><p>• @PostLoad</p><p><strong>Java Persistence API**</strong>（JPA）** </p><p>• 实体监听器和回调方法 </p><p>• 实体监听器 - @EntityListeners </p><p>• 回调方法 </p><p>• @PrePersist </p><p>• @PostPersist </p><p>• @PreRemove </p><p>• @PostRemove </p><p>• @PreUpdate </p><p>• @PostUpdate </p><p>• @PostLoad</p><h1 id="课堂笔记"><a href="#课堂笔记" class="headerlink" title="课堂笔记"></a>课堂笔记</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>users表（主）</p><table><thead><tr><th>id</th><th>name</th><th>Password</th></tr></thead><tbody><tr><td>1</td><td>mercyblitz</td><td><code>******</code></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>user_address_rel</p><table><thead><tr><th>id</th><th>User_id</th><th>Address_id</th></tr></thead><tbody><tr><td>100</td><td>1</td><td>10000</td></tr><tr><td>101</td><td>1</td><td>10001</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>user_addresses（副）</p><table><thead><tr><th>id</th><th>address</th></tr></thead><tbody><tr><td>10000</td><td>Shanghai</td></tr><tr><td>10001</td><td>Beijing</td></tr><tr><td></td><td></td></tr></tbody></table><p>User(id,name password)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class"coom.acme.User"</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token string">"com.acme.User"</span><span class="token punctuation">;</span><span class="token class-name">Class</span> klass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>klass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>组合和关联</p><h3 id="复合主键"><a href="#复合主键" class="headerlink" title="复合主键"></a>复合主键</h3><p>primary key (id, name)</p><p>@IdClass</p><p>public class PrimaryKey{</p><p>​    Long id;</p><p>​    String name;</p><p>}</p><h3 id="JAP-组合和关联"><a href="#JAP-组合和关联" class="headerlink" title="JAP 组合和关联"></a>JAP 组合和关联</h3><h3 id="JAP-实体管理器"><a href="#JAP-实体管理器" class="headerlink" title="JAP 实体管理器"></a>JAP 实体管理器</h3><p>EntityManager == Hibernamte Session = MyBatis Session &gt;= JDBC Connection</p><ul><li>缓存（一级，二级）</li><li>延迟加载（特有功能）</li></ul><h2 id="关联技术"><a href="#关联技术" class="headerlink" title="关联技术"></a>关联技术</h2><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><h4 id="假设有一个Entity-Class关联其他Class"><a href="#假设有一个Entity-Class关联其他Class" class="headerlink" title="假设有一个Entity Class关联其他Class"></a>假设有一个Entity Class关联其他Class</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> addresses<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAddresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// lazy load（加载）</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>延迟加载是通过类的字节码提升来做的，因此，从Session获取到的Entity Object的类型是一个字节码提升的类，那么原始的类型Entity是它的子类。所以原始Entity类型不能修饰为final</p><h3 id="Session-load-和-get方法的区别？"><a href="#Session-load-和-get方法的区别？" class="headerlink" title="Session load 和 get方法的区别？"></a>Session load 和 get方法的区别？</h3><p>get有缓存</p><p>load重新加载（无缓存）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 项目实战营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8-stream</title>
      <link href="2021/02/23/java/java8/java8-stream/"/>
      <url>2021/02/23/java/java8/java8-stream/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.logicbig.com/tutorials/core-java-tutorial/java-util-stream.html">java-8 stream</a></p>]]></content>
      
      
      <categories>
          
          <category> java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream </tag>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2021/02/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/02/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>维基百科上的介绍，很全面：<a href="https://en.wikipedia.org/wiki/Software_design_pattern">Software design pattern</a></p><p>设计模式区分为创建型模式，结构型模式，行为型模式。</p>]]></content>
      
      
      <categories>
          
          <category> 编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-多容器间交互</title>
      <link href="2021/02/21/docker/docker-%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%97%B4%E4%BA%A4%E4%BA%92/"/>
      <url>2021/02/21/docker/docker-%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%97%B4%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.docker.com/get-started/07_multi_container/">docker-多容器应用官网示例</a></p><p>到目前为止，我们一直在使用单个容器应用程序。但是，我们现在想将MySQL添加到应用程序堆栈中。通常会出现以下问题-“ MySQL将在哪里运行？将它安装在同一个容器中还是单独运行？” 通常，<strong>每个容器都应该做一件事情并做好。</strong>原因如下：</p><ul><li>您很有可能需要以与数据库不同的方式扩展API和前端</li><li>单独的容器可让您隔离版本和更新版本</li><li>虽然您可以在本地使用数据库的容器，但可能要在生产环境中使用数据库的托管服务。然后，您不想随应用程序一起提供数据库引擎。</li><li>运行多个进程将需要一个进程管理器（容器仅启动一个进程），这增加了容器启动/关闭的复杂性</li></ul><p>还有更多原因。因此，我们将更新我们的应用程序使其工作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221170100.png" alt="Todo App已连接到MySQL容器"></p><h2 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h2><p>请记住，默认情况下，容器是独立运行的，并且对同一台计算机上的其他进程或容器一无所知。那么，我们如何允许一个容器与另一个容器对话？答案是 <strong>网络</strong>。现在，您不必是网络工程师（万岁！）。只要记住这个规则…</p><blockquote><p><strong>笔记</strong></p><p>如果两个容器在同一网络上，它们可以相互通信。如果不是，他们就不会。</p></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>有两种将容器放置在网络上的方法：1）在开始时分配它，或2）连接现有容器。现在，我们将首先创建网络并在启动时附加MySQL容器。</p><ol><li><p>创建网络。</p><pre class="line-numbers language-none"><code class="language-none">docker network create todo-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动一个MySQL容器并将其附加到网络。我们还将定义一些环境变量，数据库将使用这些变量来初始化数据库（请参见<a href="https://hub.docker.com/_/mysql/">MySQL Docker Hub列表中</a>的“环境变量”部分）。 <code>docker pull mysql</code></p><pre class="line-numbers language-none"><code class="language-none">docker run -d \    --network todo-app --network-alias mysql \    -v todo-mysql-data:/var/lib/mysql \    -e MYSQL_ROOT_PASSWORD=secret \    -e MYSQL_DATABASE=todos \    mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用的是PowerShell，则使用此命令。</p><pre class="line-numbers language-none"><code class="language-none">docker run -d `    --network todo-app --network-alias mysql `    -v todo-mysql-data:/var/lib/mysql `    -e MYSQL_ROOT_PASSWORD=secret `    -e MYSQL_DATABASE=todos `    mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您还将看到我们指定了<code>--network-alias</code>标志。我们稍后再讲。</p><blockquote><p><strong>小费</strong></p><p>您会注意到我们使用的是<code>todo-mysql-data</code>这里命名的卷，并将其挂载<code>/var/lib/mysql</code>在MySQL存储数据的位置。但是，我们从未运行过<code>docker volume create</code>命令。Docker认识到我们要使用命名卷，并自动为我们创建一个。</p></blockquote></li><li><p>为了确认我们已启动并运行数据库，请连接到数据库并验证其是否连接。</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it &lt;mysql-container-id&gt; mysql -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当出现密码提示时，输入<strong>secret</strong>。在MySQL Shell中，列出数据库并确认您看到该<code>todos</code>数据库。</p><pre class="line-numbers language-cli" data-language="cli"><code class="language-cli">mysql&gt; SHOW DATABASES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该看到如下所示的输出：</p><pre class="line-numbers language-none"><code class="language-none">+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || todos              |+--------------------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>万岁！我们有我们的<code>todos</code>数据库，可以随时使用！</p></li></ol><h2 id="连接到"><a href="#连接到" class="headerlink" title="连接到"></a>连接到</h2><p>现在我们知道MySQL已启动并正在运行，让我们使用它吧！但是，问题是…如何？如果我们在同一网络上运行另一个容器，我们如何找到该容器（记住每个容器都有自己的IP地址）？</p><p>为了弄清楚这一点，我们将使用<a href="https://github.com/nicolaka/netshoot">nicolaka / netshoot</a>容器，该容器附带了<em>许多</em>工具，可用于对网络问题进行故障排除或调试。</p><ol><li><p>使用nicolaka / netshoot映像启动一个新容器。确保将其连接到同一网络。</p><pre class="line-numbers language-none"><code class="language-none">docker run -it --network todo-app nicolaka/netshoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在容器内部，我们将使用<code>dig</code>命令，这是一个有用的DNS工具。我们将查找主机名的IP地址<code>mysql</code>。</p><pre class="line-numbers language-none"><code class="language-none">dig mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样您将得到一个输出…</p><pre class="line-numbers language-none"><code class="language-none">; &lt;&lt;&gt;&gt; DiG 9.14.1 &lt;&lt;&gt;&gt; mysql;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 32162;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0   ;; QUESTION SECTION:;mysql.INA   ;; ANSWER SECTION:mysql.600INA172.23.0.2   ;; Query time: 0 msec;; SERVER: 127.0.0.11#53(127.0.0.11);; WHEN: Tue Oct 01 23:47:24 UTC 2019;; MSG SIZE  rcvd: 44<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在“答复部分”中，您将看到解决该问题的<code>A</code>记录 （您的IP地址很可能具有不同的值）。尽管通常不是有效的主机名，但Docker能够将其解析为具有该网络别名的容器的IP地址（还记得我们之前使用的 标志吗？）。<code>mysql``172.23.0.2``mysql``--network-alias</code></p><p>这意味着…我们的应用程序仅需要连接到名为的主机<code>mysql</code>，它将与数据库对话！没有比这更简单的了！</p></li></ol><h2 id="与MySQL运行你的应用程序"><a href="#与MySQL运行你的应用程序" class="headerlink" title="与MySQL运行你的应用程序"></a>与MySQL运行你的应用程序</h2><p>todo应用程序支持一些环境变量的设置，以指定MySQL连接设置。他们是：</p><ul><li><code>MYSQL_HOST</code> -正在运行的MySQL服务器的主机名</li><li><code>MYSQL_USER</code> -用于连接的用户名</li><li><code>MYSQL_PASSWORD</code> -用于连接的密码</li><li><code>MYSQL_DB</code> -连接后要使用的数据库</li></ul><blockquote><p><strong>通过环境变量设置连接设置</strong></p><p>尽管通常可以使用env vars设置连接设置以进行开发，但是 在生产环境中运行应用程序时，<strong>强烈建议不要</strong>使用它。Docker的前安全主管Diogo Monica <a href="https://diogomonica.com/2017/03/27/why-you-shouldnt-use-env-variables-for-secret-data/">写了一篇很棒的博客文章，</a> 解释了为什么。</p><p>一种更安全的机制是使用容器编排框架提供的秘密支持。在大多数情况下，这些机密会作为文件安装在正在运行的容器中。您会看到许多应用程序（包括MySQL映像和todo应用程序）也支持带有<code>_FILE</code>后缀的env var，以指向包含变量的文件。</p><p>例如，设置<code>MYSQL_PASSWORD_FILE</code>var将使应用程序将引用文件的内容用作连接密码。Docker不做任何支持这些环境变量的事情。您的应用将需要知道寻找变量并获取文件内容。</p></blockquote><p>在解释了所有这些内容之后，让我们开始开发就绪容器！</p><ol><li><p>我们将指定上面的每个环境变量，并将容器连接到我们的应用程序网络。</p><pre class="line-numbers language-none"><code class="language-none">docker run -dp 3000:3000 \  -w /app -v "$(pwd):/app" \  --network todo-app \  -e MYSQL_HOST=mysql \  -e MYSQL_USER=root \  -e MYSQL_PASSWORD=secret \  -e MYSQL_DB=todos \  node:12-alpine \  sh -c "yarn install &amp;&amp; yarn run dev"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用的是PowerShell，则使用此命令。</p><pre class="line-numbers language-none"><code class="language-none">docker run -dp 3000:3000 `  -w /app -v "$(pwd):/app" `  --network todo-app `  -e MYSQL_HOST=mysql `  -e MYSQL_USER=root `  -e MYSQL_PASSWORD=secret `  -e MYSQL_DB=todos `  node:12-alpine `  sh -c "yarn install &amp;&amp; yarn run dev"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果我们查看容器（<code>docker logs &lt;container-id&gt;</code>）的日志，则应该看到一条消息，表明它正在使用mysql数据库。</p><pre class="line-numbers language-none"><code class="language-none"># Previous log messages omitted$ nodemon src/index.js[nodemon] 1.19.2[nodemon] to restart at any time, enter `rs`[nodemon] watching dir(s): *.*[nodemon] starting `node src/index.js`Connected to mysql db at host mysqlListening on port 3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在浏览器中打开应用程序，然后向待办事项列表中添加一些项目。</p></li><li><p>连接到mysql数据库并证明项目已被写入数据库。记住，密码是<strong>秘密的</strong>。</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it &lt;mysql-container-id&gt; mysql -p todos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在mysql shell中运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from todo_items;+--------------------------------------+--------------------+-----------+| id                                   | name               | completed |+--------------------------------------+--------------------+-----------+| c906ff08-60e6-44e6-8f49-ed56a0853e85 | Do amazing things! |         0 || 2912a79e-8486-4bc3-a4c5-460793a575ab | Be awesome!        |         0 |+--------------------------------------+--------------------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，您的表看起来会有所不同，因为它包含您的项目。但是，您应该看到它们存储在这里！</p></li></ol><p>如果快速浏览Docker Dashboard，您会看到我们有两个正在运行的应用程序容器。但是，没有真正的迹象表明它们在单个应用程序中组合在一起。我们很快就会看到如何使它变得更好！</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221170125.png" alt="Docker Dashboard显示了两个未分组的应用程序容器"></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>至此，我们有了一个应用程序，该应用程序现在将其数据存储在运行在单独容器中的外部数据库中。我们了解了一些有关容器网络的知识，并了解了如何使用DNS执行服务发现。</p><p>但是，您很有可能开始对启动此应用程序所需做的一切感到有点不知所措。我们必须创建一个网络，启动容器，指定所有环境变量，公开端口等等！这要记住很多，这肯定会使事情很难传递给其他人。</p><p>在下一节中，我们将讨论Docker Compose。借助Docker Compose，我们可以以一种更简单的方式共享我们的应用程序堆栈，并允许其他人使用一个（简单的）命令将它们旋转起来！</p><h2 id="执行流程记录"><a href="#执行流程记录" class="headerlink" title="执行流程记录"></a>执行流程记录</h2><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker network create todo-app289342da8341dc4957bdc9e797242dad9a4e3eb26fbb982d0480a191b6f803bbcutiedeMacBook-Pro:app cutie$ docker run -d \&gt;      --network todo-app --network-alias mysql \&gt;      -v todo-mysql-data:/var/lib/mysql \&gt;      -e MYSQL_ROOT_PASSWORD=secret \&gt;      -e MYSQL_DATABASE=todos \&gt;      mysql:5.7cd2f6e9da40e7658e639f0222de723b4b2444295cb76fbcb2ffa60feac97be7bcutiedeMacBook-Pro:app cutie$ docker exec -it cd2f6e9da40e7658e639f0222de723b4b2444295cb76fbcb2ffa60feac97be7b  mysql -pEnter password:ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)cutiedeMacBook-Pro:app cutie$ docker exec -it cd2f6e9da40e7658e639f0222de723b4b2444295cb76fbcb2ffa60feac97be7b  mysql -pEnter password:ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)cutiedeMacBook-Pro:app cutie$ docker exec -it cd2f6e9da40e7658e639f0222de723b4b2444295cb76fbcb2ffa60feac97be7b  mysql -pEnter password:Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.32 MySQL Community Server (GPL)Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.mysql&gt; SHOW DATABASES;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || todos              |+--------------------+5 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker run -it --network todo-app nicolaka/netshootUnable to find image 'nicolaka/netshoot:latest' locallylatest: Pulling from nicolaka/netshoot4c0d98bf9879: Downloadingdf962687d630: Download completef4b598a64a46: Download completea3f487e8dfcb: Download complete0d084d29b530: Download completec40275cdc1a4: Download complete53d8247f861d: Download completelatest: Pulling from nicolaka/netshoot4c0d98bf9879: Pull completedf962687d630: Pull completef4b598a64a46: Pull completea3f487e8dfcb: Pull complete0d084d29b530: Pull completec40275cdc1a4: Pull complete53d8247f861d: Pull completeDigest: sha256:6ae5a524ab390824a43a29a8a2ec7b9c013736d98a0aed264f1132196098aac2Status: Downloaded newer image for nicolaka/netshoot:latest                    dP            dP                           dP                    88            88                           8888d888b. .d8888b. d8888P .d8888b. 88d888b. .d8888b. .d8888b. d8888P88'  `88 88ooood8   88   Y8ooooo. 88'  `88 88'  `88 88'  `88   8888    88 88.  ...   88         88 88    88 88.  .88 88.  .88   88dP    dP `88888P'   dP   `88888P' dP    dP `88888P' `88888P'   dPWelcome to Netshoot! (github.com/nicolaka/netshoot)root @ / [1] 🐳  → dig mysql; &lt;&lt;&gt;&gt; DiG 9.16.11 &lt;&lt;&gt;&gt; mysql;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 53757;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0;; QUESTION SECTION:;mysql.INA;; ANSWER SECTION:mysql.600INA172.19.0.2;; Query time: 4 msec;; SERVER: 127.0.0.11#53(127.0.0.11);; WHEN: Sun Feb 21 09:48:10 UTC 2021;; MSG SIZE  rcvd: 44<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日记20210221</title>
      <link href="2021/02/21/%E6%97%A5%E8%AE%B0/%E6%97%A5%E8%AE%B0-20210221/"/>
      <url>2021/02/21/%E6%97%A5%E8%AE%B0/%E6%97%A5%E8%AE%B0-20210221/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="33cc73a5f8d2549e6c89dfe333dc5a8460b687d0ee7ac5b199010aefe4063273">675ef3242d144ff249cb5b90ca678376166165578abddbd822aecd43a16808c1e034c13215e1aa5d1915b7f1e9fa7947bede05dfbe49d081f4154959ab3872efb169caf5ade0e9eeaf5d9a758d0e48ed1803dc65d8fc0cceeb76aa9637b66728172d393504be71d92bdb4e0e4887dd97bdc55164377c8a3fcae04a8d23a48ed724d6d6394e498ab93c2a946db359dbb0afcd6c92b3c59840c3ec48935e3b6f1bc603e359a73e1a4c9b8d4e878b1fdb7c8d5b84fe05e59f5621948662e3f34479ca6d6f0698e95bd3955f78072d48f1b1aab8ba57ef27afe498a7b3afb47ee9951127d68bb220856a24622f8a35c3dfe84f1fb44ef1f45602a606a0b1b577c36463b9f7664c86629d66a91aa6702f1504501602420e7b793e5242c7cdc9c1f2ab7d9eeb5d79f29c39b78f28425442af2a5fd6dad331b4cac420bbd7f8806cf4e665db82343160921fe5d936bbec336ed2938b9ee029c747396fa4c60a8f019422286226041fd913af8558fec507cf56232fc39b14a5645ec033e74ccfdb3413dc138d4d2ca5ad884fe456ec423549c003255cddd007eb0545b67645a86a8ec7bf9522b01ace7ae25f0241696fad5fc6d4f66c16f00e460614aacbc4c0c98ebf0fbe15d8d513fa1dcf2ad8910c354669a48bdb5e0581261b6e5661f672793e0bb91b5cabbf26d0558ee44e2616ac12cb502df8a9821ab4782fc3d3660a0f8f7549292ebf79c348a36835b852132d376fa941c7a19f411e894d0f83317b65881d694add538421131e51decb60a75b5314a1268afe9996e4f928609b38ae6a69128f3136c8a0f816e8021453887f6175966575fb71ef431cb2886205887584820e65daf8649ec50743bb45ec136c3f9adccc3b4cbf9d848ef75c168c4844cd6e760bd6139d79a82e736f3d39ec6019baf9571cd92134eec354a61bbda79cd045d5b26aebf0398dedfdfcce4c60425e904ebba816ecbdcabe353dde311e85d8af4ce904aab36622b093ae1645757da8168546580d18fcd349e708984fc99c7e468ba3d2df486b0fc57cf6d1683802016fe4c4a31cefa8a51e31c499fc13673621c61c274510ce6de8bf36bcd4e38aa36e99772be8e4533f5853849a4562296dde59015ee6f7d3902cf233cd7c6546167d78926cb17906bae38e1706bcc0febcde39c373a175829881c68b99838509efdfb0c93d188dc02745ad6f158e8c480e32487c153e4715a74f9753cb747bb55ca5f95a23426e992ec0d7c4d08bffd2638b56ad8168c933ce28455aacd7fddf5af1c98a4286cb7a739441ad5a3308d57f6c76aa17e18bf27561e52b6668eda263bc14c91ea68426ca0592bf922020d1a9915c8c3ff2db071f437b97406b4f960ed944270248d799fdcd74093f6b2f4787acecb3b1d57942594cbafe5428fe6b74782af316fb933e51d2a6c10b373db5e96c11b06fcafe56be2b3afc22528885d18b2dc21d3d12f246236343a7c1b6f21ff642b5e885c55f1aa7aca8c0c0b8c4ccb9eecb6e4002dd459d6e891e81abaaab313b397cce43143125a159ca90e258f498a4d2f993dfc7594daaea4686b91360838f88ec135441768981aaf8c4ce73a0996654de9410dfdfc416f7d7dfeb27e85fe971f71686c674e367745864ee6e2313949663ffe99e8f8042d229928ed6b948c267f3db8b1e705a831ee0859cfbe09731519aa2a5176b5b203ffdfa1154cd89091336d4fa36ae33c5779669af91653b0cb4c57bddc93682ceb2b4a0fbbf676341ae7dbe60e0fa109d6eca8c0f30924dbfa98409bf61cfebb5522e3bc5de6936ab7eb5ce47e1a74cc107bced3ae1c898c5fcaef1d81857c5901787ef5f88f1906075938cf1238a935453bb9b935ffba306fa3fa373d2cc705537421f743912c894b07ba556f2148db9046e4b19061e05b469b44b95a50e386c6469ad01015dd1a497a7c0c770aa2f2a35eada40514cac4592500b10730e550b4666b6a27ad9e247562133d2da825a00642a2d503c995c8c70c3a327218530d05a26f070ab7ce9af2caa7194c74c1326b7c3544fe8809fef85be3cf91402ebecd62838cac2a68c687112574ca7e852d39563f81fcfcdb4646f4fd0390e289dad67575ec0cb62f096009b55c3aa0c2f60367693e2f988f02f2af5290970e0d1e4a09a42d7fbaeca594d40860e60c0548f56a997131d76cac9fb96df55a102cf34759e12ed27802dde363060ccdf8b2ceef00aeddc4f9d2563a078d630960bd928ed2a83dcbdc7aafff4751c32a8b4613a3efed7bc37b3c0d66a65b2e988f6486394e682e7f14cbd0c3b137eb314b83b831c1f84f650d3b838db71034e4af61d4dc3c5438d0cb429c3a513ce894abe2bed8e29f12c4d2ddde6216428b37c40cbaf99c071c77de9e98ee4c7041507b51e147cc08ca0154073a4a844c0d1a2b363dbf97084db672e35ca338a6bf64f2c39bd2d60408f1dcb6aef624a697115b6d2d655a1b290743e3678be628bd8a45f8feb4cc62be4ada76af71d075be178dc9a5bc514df34357ce22e5a2c9163a1302356fa2bd211b3975e5be13ae3e34feb0cd3b23c634a81e10fe5aa8b3de4dc96f1c6427691dfacb45e4620ecdf37e071117ec8b553cfebde032f0a7fe41c2137ea72fce647fadd8e639ed10c46d46597a754ea92d134ce02f260f3ac2a0cb1a0dd752ad4a8c122f8f3a581b4aca76674d0e2498f199744b946caa464b6c89624af4722ab479679e40613a56e8a71ac0a8c2f51e2e834ad151700c2fb501622155fad3dc4b0f767808d5d9a848db8b0520646728ae99280f90ccf3054f9fb657c1eaa8ffbc2c7f1ccb7e3338be3a7e0b0710403f2224095ed101e1ca623e39cafb1de7fcf019852406090e373d62b3c22d146fff35737a0dc4aa5aae97061a3c9b75c318ddc0088927c5ecf6ba4991010ec8c8915a47e00b2c781e3ce2565c852893705db4e7877ad9b960589844bf2aadfe8fdd1dff05c4f5c53cd039b55f033dd2b21abd018b634aeb03e1f57fe2fd7ae8baf944bbdf6ec863857862eed0a069990e2a31b584a3cf21f09bd083f8310660f3c22857b7ba6b86753e78c59f27df6870d680179721b18e41c2c9344ffa7a8b492706584fa0d2db276b117d4385a4b2208e8ab18b9eca2921c63e8ea25e07477ef77ad31c2abf2c98410b1961511fbee15477cd28e60e95f799fb3a1e7133fc69ac8f18c04764349058bed699f5262098ac13d6252b4aa317ed71baa87916b344d07c4e2a0aff74cdbffbf319c503642062ea68713765ec6b87c5952ba636d61afcf03d5be6a68bcc92cf1eb0e18b7da034fa54297eba6d3b5a7eecb1753fdd2857aa765fd8a32f010df5a202060c6455e49ef271bf6958e056384ef77d71f1008cf628a24920711b91c330079f50adb71be85aebc69782a2fb61a9af267b2d10813da6ae7dea5fef3f0bf59b76c971e9034e230ead1a0729e5f405ab6d636d75112eb0de165b772d696e85e1550e79123469cc06231737f8ea0fd992799ab44815c859d9cb3ec0ff9f54ff8e3eae8cf99fdceccf70c9fa113fb95fa25bfbe29755c6138f3c4449b311c83c3c1f3c2eb32d22344d3e8c184a3dbad05d12670bf895e55fac7769e522fd2a8a67cd639daacc767dd9cd934f6d37fb071c14be36bdddd971ad2caa871c3a37774dd6c1b94536e3587ae986878946456b03fcb5ded9034003a3ab17dfdfa923fc16e0f5b67a3e6912a50aef130fcbaa000b1a766c6fe7ead05b4c7db599c515bfd4f5bf7c510eef453405ad9edd4c71a97a5cc730f6c0d957ad2ab493e479ef9934ad8858ad6e46e40d4c97c617268dffaeb5083724e3f1861883cf6e3972f1d64060128845e4ef08494f2a05deeae203dc3dde9df3d4f26df0e633e067da611a6a011342d5ff64d09e2a070d07ac7fd14f87a765a4867afc66834b9ec225e70f5d54ee809da23941eed2034d902637567385fcf520711a44d21ecc296a23bfa6af167e00e965318c53c60664b5b63836320db5f8b97d844ade27dc63da4a2e4249e7020f80b4438de23a7e43291dd74285df339b68fa0f37670b0f9b4c5bfc34179a3981eb7b648df8abc930db656da00d1ea9a5bd62223fe7e8331e0a08aaadc66a82dc694da1bf14bf2f11e4344b260bb460d4b26620a5ea16394d6fb12d1327deff252bbe2b15670ad5ad39e31690b1b35ec0b606cb0ce9bd4f36d47a7db6e94a89ae8a856e84c6c968275460f87e109543b1f942c73f0ec0ee77e380ee67bcf6c9ac2678ed4556ef1791ae6b751ec7740091818fdfe523ff5e19d2229f323dbe1fd59b166d6c6564c84d6e00e28ca25b69d10ba229d5b4373708be0027164d17d3974e42a29d9b3009451be4e303fe43cab80ffd56d29c55bc2daa735d1f42a31b2a0cb803f62d77f3fd668484beb8d783c389744e904870c0d9331d8f09a20823661bb903ad8ec79c2e8329e4473c820061a90f7ff3e644833dd7438f7080b5c93930523a14c75ea0a3448f835e2b2f15caab6ef1b197cacecd529addad90a48547517d7a1a0ccf6dbfb45aa0545482e8cf66f1e57ff7f93b8f586281bbe11cb12d61159cf9eaa3d24d060f0c79ad1fe061b1c607300d29e6f629eacb6e933a2f78a5a6ade89348994c699b71a421ec5f76164e62fe1079843fda68554e5ddac5db3a421c559ca4dfae9cdb825062d2a9365533b4915cd46cac46d4ebc844a9779becfe1b45f5210a663aa</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker入门</title>
      <link href="2021/02/19/docker/docker%E5%85%A5%E9%97%A8/"/>
      <url>2021/02/19/docker/docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="docker入门"><a href="#docker入门" class="headerlink" title="docker入门"></a>docker入门</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://docs.docker.com/">docker官网文档</a></p><p><a href="https://docs.docker.com/get-started/">docker快速入手</a></p><h2 id="docker概述"><a href="#docker概述" class="headerlink" title="docker概述"></a><a href="https://docs.docker.com/get-started/overview/">docker概述</a></h2><p>Docker是一个用于开发，发布和运行应用程序的开放平台。Docker将应用程序与基础架构分开，从而可以快速交付软件。借助Docker可以以与管理应用程序相同的方式来管理基础架构。通过利用Docker的方法来快速交付，测试和部署代码，大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>docker可以用于快速一致交付程序，响应式部署和拓展，在同一软件上运行多个相同或者不同的服务，使资源得到充分利用。</p><p>docker架构如下</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210219114938.svg" alt="Docker架构图"></p><h3 id="docker概念"><a href="#docker概念" class="headerlink" title="docker概念"></a>docker概念</h3><p><a href="http://dockone.io/article/783">10张图带你深入理解Docker容器和镜像</a></p><p><a href="https://juejin.cn/post/6844903938030845966">Docker的三大核心组件：镜像，容器与仓库</a></p><h2 id="下载docker"><a href="#下载docker" class="headerlink" title="下载docker"></a>下载docker</h2><p><a href="https://docs.docker.com/get-docker/">官网下载地址</a></p><p>mac电脑选择mac版本进行下载</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210219114521.png" alt="image-20210219114521282"></p><p>安装好后进行启动，和安装普通软件一样</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210219114554.png" alt="image-20210219114554407"></p><h2 id="docker可以做的事情"><a href="#docker可以做的事情" class="headerlink" title="docker可以做的事情"></a>docker可以做的事情</h2><p>启动容器运行应用</p><p>持久化数据，防止每次启动不一致</p><p>可以使用docker hub共享镜像</p><p>多容器之间交互</p><blockquote><p>如果两个容器在同一网络上，它们可以相互通信。如果不是，他们就不会</p></blockquote><p>使用docker compose</p><h2 id="Hello-World-我的第一个docker容器"><a href="#Hello-World-我的第一个docker容器" class="headerlink" title="Hello World 我的第一个docker容器"></a>Hello World 我的第一个docker容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -d -p 80:80 docker/getting-starteddocker run -dp 80:80 docker/getting-started #也可以写做这个，简写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>-d</code> -以分离模式运行容器（在后台）</li><li><code>-p 80:80</code> -将主机的端口80映射到容器中的端口80</li><li><code>docker/getting-started</code> -要使用的图像</li></ul><p>运行后，可以点击docker中的dashboard查看上面起起来的容器，容器名称是随意创建的</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210220153738.png" alt="image-20210220153738649"></p><h3 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h3><p>简单说，容器就是一个你机器上的一个进程，它与其他进程是相互间隔离的。</p><h3 id="什么是容器镜像？"><a href="#什么是容器镜像？" class="headerlink" title="什么是容器镜像？"></a>什么是容器镜像？</h3><p>容器镜像包含了所有的需要起一个应用的要素，包括依赖，配置，脚本，二进制文件等，但是也包含了其他容器的配置，如环境变量，默认启动方法，以及其他元数据</p><h2 id="镜像创建示例"><a href="#镜像创建示例" class="headerlink" title="镜像创建示例"></a>镜像创建示例</h2><p>以下参照 <a href="https://docs.docker.com/get-started">get-started</a> 测试</p><p><a href="https://github.com/docker/getting-started/tree/master/app">下载docker新手app文件</a></p><p>创建Dockerfile，并粘贴下面的内容</p><pre class="line-numbers language-none"><code class="language-none">FROM node:12-alpine WORKDIR /app COPY . . RUN yarn install --production CMD ["node", "src/index.js"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210220160623.png" alt="image-20210220160623347"></p><p>在app目录下执行以下命令，使用<code>docker build</code>命令构建容器映像。（不要忘记了后面那个点，表示当前目录）</p><pre class="line-numbers language-none"><code class="language-none">docker build -t getting-started .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>他使用了Dockerfile去创建一个新的容器镜像，你会发现好多“layers”被下载下来了，这是因为Dockerfile上以node:12-alpine为基础镜像，但是我们的机器上面没有这些镜像文件。下载完毕后，他们会被复制到我们的应用中，并使用<code>yarn</code>去安装应用的依赖。执行命令行使用的是系统默认的<code>cmd</code>软件。<code>-t</code>后面带的名字即镜像名称，方便我们之后去运行该镜像。</p><p>安装完毕，如下所示</p><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker build -t getting-started .Sending build context to Docker daemon  4.659MBStep 1/5 : FROM node:12-alpine12-alpine: Pulling from library/node0a6724ff3fcd: Pull completeb68849637432: Pull complete7dda491622fb: Pull completece97b0f80161: Pull completeDigest: sha256:77fe10dbc042121e94db7f43b4b912a52514759b847978588eec4d5d0eb5282cStatus: Downloaded newer image for node:12-alpine ---&gt; e136be20a0bdStep 2/5 : WORKDIR /app ---&gt; Running in d9ec4d68327fRemoving intermediate container d9ec4d68327f ---&gt; a7c9152f5afeStep 3/5 : COPY . . ---&gt; fa7eda5fa1a7Step 4/5 : RUN yarn install --production ---&gt; Running in 629ef52d06b6yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@1.2.9: The platform "linux" is incompatible with this module.info "fsevents@1.2.9" is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...Done in 145.83s.Removing intermediate container 629ef52d06b6 ---&gt; 15136bc6d899Step 5/5 : CMD ["node", "src/index.js"] ---&gt; Running in 62ad87066a4eRemoving intermediate container 62ad87066a4e ---&gt; 945f98aa1995Successfully built 945f98aa1995Successfully tagged getting-started:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候，我们在docker中的images中也能看到我们新建的镜像了</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210220165847.png" alt="image-20210220165847096"></p><h2 id="启动容器示例"><a href="#启动容器示例" class="headerlink" title="启动容器示例"></a>启动容器示例</h2><p>现在我们拥有一个镜像了，可以跑一个应用了。执行<code>docker run</code>命令，这时候，用到我们之前创建的镜像文件了</p><pre class="line-numbers language-none"><code class="language-none">docker run -dp 3000:3000 getting-started<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-d</code> detached模式，保持容器后台运行，可以执行后续的<code>exec</code>命令</p><p><code>-p</code> 指定端口</p><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker run -dp 3000:3000 getting-started6891eba76d5d89b534a2a815d4a77ef5d447ca41b8170b64c537f4fb17a2a88e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在container/app中就能看到已经运行起来的容器</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210220172028.png" alt="image-20210220172028423"></p><p>打开 <a href="http://localhost:3000/">http://localhost:3000</a> ，看看运行起来的</p><p>![image-20210220172211298](/Users/cutie/Library/Application Support/typora-user-images/image-20210220172211298.png)</p><h2 id="docker常用命令【后续进行抽离完善】"><a href="#docker常用命令【后续进行抽离完善】" class="headerlink" title="docker常用命令【后续进行抽离完善】"></a>docker常用命令【后续进行抽离完善】</h2><p><code>docker ps</code> 查看正在运行的镜像</p><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker psCONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS          PORTS                    NAMES6891eba76d5d   945f98aa1995             "docker-entrypoint.s…"   23 minutes ago   Up 23 minutes   0.0.0.0:3000-&gt;3000/tcp   amazing_babbage6b825ac83cbb   docker/getting-started   "nginx -g 'daemon of…"   2 hours ago      Up 2 hours      0.0.0.0:80-&gt;80/tcp       nifty_colden<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker stop &lt;the-container-id&gt;</code> 根据容器id暂停正在运行的容器</p><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker stop 6891eba76d5d6891eba76d5d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>docker rm &lt;the-container-id&gt;</code> 根据容器id移除不使用的容器</p><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker rm 6891eba76d5d6891eba76d5d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>docker rm -f &lt;the-container-id&gt;</code> 单行命令终止和删除容器</p><p><code>docker image ls</code> 查看镜像列表</p><p><code>docker logs -f &lt;container-id&gt;</code> 查看日志，看完日志后，请按<code>Ctrtrol</code>+<code>C</code>退出</p><pre class="line-numbers language-none"><code class="language-none">cutiedeMacBook-Pro:app cutie$ docker logs -f 9a5b851f917bUsing sqlite database at /etc/todos/todo.dbListening on port 3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week01-02 JVM 核心技术--工具与 GC 策略</title>
      <link href="2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-02-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%B7%A5%E5%85%B7%E4%B8%8E-GC-%E7%AD%96%E7%95%A5/"/>
      <url>2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-02-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%B7%A5%E5%85%B7%E4%B8%8E-GC-%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-课-JVM-核心技术–工具与-GC-策略"><a href="#第-2-课-JVM-核心技术–工具与-GC-策略" class="headerlink" title="第 2 课 JVM 核心技术–工具与 GC 策略"></a>第 2 课 JVM 核心技术–工具与 GC 策略</h1><p><strong>目录</strong></p><ol><li>JDK 内置命令行工具*</li><li>JDK 内置图形化工具*</li><li>GC 的背景与一般原理</li><li>串行 GC/并行 GC*（Serial GC/Parallel GC）</li><li>CMS GC/G1 GC*</li><li>ZGC/Shenandoah GC</li><li>第 2 节课总结回顾与作业实践</li></ol><h2 id="1-JDK-内置命令行工具"><a href="#1-JDK-内置命令行工具" class="headerlink" title="1.JDK 内置命令行工具"></a>1.JDK 内置命令行工具</h2><h3 id="JVM-命令行工具"><a href="#JVM-命令行工具" class="headerlink" title="JVM 命令行工具"></a><strong>JVM 命令行工具</strong></h3><p>![image-20210221220254377](/Users/cutie/Library/Application Support/typora-user-images/image-20210221220254377.png)</p><h3 id="工具-简介"><a href="#工具-简介" class="headerlink" title="工具 简介"></a><strong>工具 简介</strong></h3><p><strong>java</strong> Java 应用的启动程序</p><p><strong>javac</strong> JDK 内置的编译工具</p><p><strong>javap</strong> 反编译 class 文件的工具</p><p><strong>javadoc</strong> 根据 Java 代码和标准注释,自动生成相关的API说明文档</p><p><strong>javah</strong> JNI 开发时, 根据 java 代码生成需要的 .h文件。</p><p><strong>extcheck</strong> 检查某个 jar 文件和运行时扩展 jar 有没有版本冲突，很少使用</p><p><strong>jdb</strong> Java Debugger ; 可以调试本地和远端程序, 属于 JPDA 中的一个 demo 实现, 供其他调试器参考。开发时很少使用</p><p><strong>jdeps</strong> 探测 class 或 jar 包需要的依赖</p><p><strong>jar</strong> 打包工具，可以将文件和目录打包成为 .jar 文件；.jar 文件本质上就是 zip 文件,只是后缀不同。使用时按顺序对应好选项和参数即可。</p><p><strong>keytool</strong> 安全证书和密钥的管理工具; （支持生成、导入、导出等操作）</p><p><strong>jarsigner</strong> JAR 文件签名和验证工具</p><p><strong>policytool</strong> 实际上这是一款图形界面工具, 管理本机的 Java 安全策略</p><h3 id="JVM-命令行工具-1"><a href="#JVM-命令行工具-1" class="headerlink" title="JVM 命令行工具"></a><strong>JVM 命令行工具</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220324.png" alt="image-20210221220324097"></p><p><strong>工具 简介</strong></p><p><strong>jps/jinfo</strong> 查看 java 进程</p><p><strong>jstat</strong> 查看 JVM 内部 gc 相关信息</p><p><strong>jmap</strong> 查看 heap 或类占用空间统计</p><p><strong>jstack</strong> 查看线程信息</p><p><strong>jcmd</strong> 执行 JVM 相关分析命令（整合命令）</p><p><strong>jrunscript/jjs</strong> 执行 js 命令</p><h3 id="JVM-命令行工具-jps-jinfo"><a href="#JVM-命令行工具-jps-jinfo" class="headerlink" title="JVM 命令行工具-jps/jinfo"></a><strong>JVM 命令行工具-jps/jinfo</strong></h3><p> D:&gt;jps</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220346.png" alt="image-20210221220346145"></p><p>32432</p><p>1716 Jps</p><p>23784 QuorumPeerMain</p><p>4264 Bootstrap</p><p>2460 Launcher</p><p>D:&gt;jps -help</p><p>usage: jps [-help]</p><p>jps [-q] [-mlvV] [<hostid>]</hostid></p><p>Definitions:</p><p><hostid>: <hostname>[:<port>]</port></hostname></hostid></p><h3 id="JVM-命令行工具-jstat"><a href="#JVM-命令行工具-jstat" class="headerlink" title="*JVM 命令行工具-jstat**"></a>*<em>JVM 命令行工具-jstat**</em></h3><blockquote><p>jstat -options</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220358.png" alt="image-20210221220358285"></p><p>class 类加载(Class loader)信息统计.</p><p>compiler JIT 即时编译器相关的统计信息。</p><p>gc GC 相关的堆内存信息. 用法: jstat -gc -h 10 -t 864 1s 20</p><p>gccapacity 各个内存池分代空间的容量。</p><p>gccause 看上次 GC, 本次 GC（如果正在 GC中）的原因, 其他输出和 -gcutil 选项一致。</p><p>gcnew 年轻代的统计信息. （New = Young = Eden + S0 + S1）</p><p>gcnewcapacity 年轻代空间大小统计.</p><p>gcold 老年代和元数据区的行为统计。</p><p>gcoldcapacity old 空间大小统计.</p><p>gcmetacapacity meta 区大小统计.</p><p>gcutil GC 相关区域的使用率（utilization）统计。</p><p>printcompilation 打印 JVM 编译统计信息。</p><h3 id="JVM-命令行工具-jstat-1"><a href="#JVM-命令行工具-jstat-1" class="headerlink" title="JVM 命令行工具-jstat"></a><strong>JVM 命令行工具-jstat</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220417.png" alt="image-20210221220417325"></p><p>演示：</p><p>jstat -gcutil pid 1000 1000</p><p><strong>JVM 命令行工具-jstat</strong> 演示</p><p>![image-20210221220441062](/Users/cutie/Library/Application Support/typora-user-images/image-20210221220441062.png)</p><p>jstat -gc pid 1000 1000</p><h3 id="JVM-命令行工具-jmap"><a href="#JVM-命令行工具-jmap" class="headerlink" title="JVM 命令行工具-jmap"></a><strong>JVM 命令行工具-jmap</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220503.png" alt="image-20210221220503764"></p><p>常用选项就 3 个：</p><p>heap 打印堆内存（/内存池）的配置和</p><p>使用信息。</p><p>histo 看哪些类占用的空间最多, 直方图</p><p>dump:format=b,file=xxxx.hprof</p><p>Dump 堆内存。</p><p>演示:</p><p>jmap -heap pid</p><p>jmap -histo pid</p><p>jmap -dump:format=b,file=3826.hprof</p><p>3826</p><h3 id="JVM-命令行工具-jstack"><a href="#JVM-命令行工具-jstack" class="headerlink" title="JVM 命令行工具-jstack"></a><strong>JVM 命令行工具-jstack</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220514.png" alt="image-20210221220514919"></p><p>F 强制执行 thread dump. 可在 Java 进程卡死</p><p>（hung 住）时使用, 此选项可能需要系统权限。</p><p>m 混合模式(mixed mode),将 Java 帧和 native</p><p>帧一起输出, 此选项可能需要系统权限。</p><p>l 长列表模式. 将线程相关的 locks 信息一起输出，</p><p>比如持有的锁，等待的锁。</p><p>演示：</p><p>jstack pid -l</p><h3 id="JVM-命令行工具-jcmd"><a href="#JVM-命令行工具-jcmd" class="headerlink" title="*JVM 命令行工具-jcmd**"></a>*<em>JVM 命令行工具-jcmd**</em></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220529.png"></p><p>Jcmd 综合了前面的几个命令</p><p>示例：</p><p>jcmd pid VM.version</p><p>jcmd pid VM.flags</p><p>jcmd pid VM.command_line</p><p>jcmd pid VM.system_properties</p><p>jcmd pid Thread.print</p><p>jcmd pid GC.class_histogram</p><p>jcmd pid GC.heap_info</p><h3 id="JVM-命令行工具-jrunscript-jjs"><a href="#JVM-命令行工具-jrunscript-jjs" class="headerlink" title="JVM 命令行工具-jrunscript/jjs"></a><strong>JVM 命令行工具-jrunscript/jjs</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220548.png" alt="image-20210221220548729"></p><p>当curl命令用：</p><p>jrunscript -e “cat(‘<a href="http://www.baidu.com&amp;/#39;)&quot;">http://www.baidu.com')"</a></p><p>执行js脚本片段</p><p>jrunscript -e “print(‘hello,kk.jvm’+1)”</p><p>执行js文件</p><p>jrunscript -l js -f /XXX/XXX/test.js</p><h2 id="2-JDK-内置图形化工具"><a href="#2-JDK-内置图形化工具" class="headerlink" title="2.JDK 内置图形化工具"></a>2.JDK 内置图形化工具</h2><h3 id="JVM-图形化工具-jconsole"><a href="#JVM-图形化工具-jconsole" class="headerlink" title="JVM 图形化工具-jconsole"></a><strong>JVM 图形化工具-jconsole</strong></h3><p>![image-20210221220611310](/Users/cutie/Library/Application Support/typora-user-images/image-20210221220611310.png)</p><p>在命令行输入 jconsole 即可打开</p><p>本地 JVM 可以直接选择</p><p>远程 JVM 可以通过 JMX 方式连接</p><h3 id="JVM-图形化工具-jconsole-1"><a href="#JVM-图形化工具-jconsole-1" class="headerlink" title="JVM 图形化工具-jconsole"></a><strong>JVM 图形化工具-jconsole</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220625.png" alt="image-20210221220625562"></p><p>共有 6 个面板</p><p>第一个为概览，四项指标具体为：</p><p>堆内存使用量：此处展示的就是前面 Java 内存模型课程中提到的堆内存使用情况，从图上可以看到，堆内存使用了 94MB 左右，并且一直在增长。</p><p>线程：展示了 JVM 中活动线程的数量，当前时刻共有 17 个活动线程。</p><p>类：JVM 一共加载了 5563 个类，没有卸载类。</p><p>CPU 占用率：目前 CPU 使用率为 0.2%，这个数值非常低，且最高的时候也不到 3%，初步判断系统当前并没有什么负载和压力。</p><p>有如下几个时间维度可供选择：</p><p>1分钟、5分钟、10分钟、30分钟、1小时、2小时、3小时、6小时、</p><p>12小时、1天、7天、1个月、3个月、6个月、1年、全部，一共是16 档。</p><p>当我们想关注最近1小时或者1分钟的数据，就可以选择对应的档。旁</p><p>边的3个标签页(内存、线程、类)，也都支持选择时间范围。</p><h3 id="JVM-图形化工具-jconsole-2"><a href="#JVM-图形化工具-jconsole-2" class="headerlink" title="JVM 图形化工具-jconsole"></a><strong>JVM 图形化工具-jconsole</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220639.png" alt="image-20210221220639192"></p><p>内存图表包括：</p><p>堆内存使用量，主要包括老年代（内存池 “PS Old</p><p>Gen”）、新生代（“PS Eden Space”）、存活区</p><p>（“PS Survivor Space”）；</p><p>非堆内存使用量，主要包括内存池“Metaspace”、</p><p>“Code Cache”、“Compressed Class Space”等；</p><p>可以分别选择对应的 6 个内存池。</p><p>通过内存面板，我们可以看到各个区域的内存使用和</p><p>变化情况，并且可以：</p><p>1.手动执行 gc，见图上的标号1，点击按钮即可执行JDK 中的 System.gc()</p><p>2.通过图中右下角标号 2 的界面，可以看到各个内存池的百分比使用率，以及堆/非堆空间的汇总使用情况</p><p>3.从左下角标号 3 的界面，可以看到 JVM 使用的垃圾收集器，以及执行垃圾收集的次数，以及相应的时间消耗。</p><h3 id="JVM-图形化工具-jconsole-3"><a href="#JVM-图形化工具-jconsole-3" class="headerlink" title="JVM 图形化工具-jconsole"></a><strong>JVM 图形化工具-jconsole</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220653.png" alt="image-20210221220653140"></p><p>线程面板展示了线程数变化信息，以及监测到</p><p>的线程列表。</p><p>我们可以常根据名称直接查看线程的状态（运</p><p>行还是等待中）和调用栈（正在执行什么操</p><p>作）。</p><p>特别地，我们还可以直接点击“检测死锁”按钮</p><p>来检测死锁，如果没有死锁则会提示“未检测</p><p>到死锁”。</p><h3 id="JVM-图形化工具-jconsole-4"><a href="#JVM-图形化工具-jconsole-4" class="headerlink" title="JVM 图形化工具-jconsole"></a><strong>JVM 图形化工具-jconsole</strong></h3><p>![image-20210221220706391](/Users/cutie/Library/Application Support/typora-user-images/image-20210221220706391.png)</p><p>类监控面板，可以直接看到 JVM 加载和卸载的</p><p>类数量汇总信息，以及随着时间的动态变化。</p><h3 id="JVM-图形化工具-jconsole-5"><a href="#JVM-图形化工具-jconsole-5" class="headerlink" title="JVM 图形化工具-jconsole"></a><strong>JVM 图形化工具-jconsole</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220723.png" alt="image-20210221220723902"></p><p>VM 概要的数据有五个部分：</p><p>第一部分是虚拟机的信息；</p><p>第二部分是线程数量，以及类加载的</p><p>汇总信息；</p><p>第三部分是堆内存和 GC 统计。</p><p>第四部分是操作系统和宿主机的设备</p><p>信息，比如 CPU 数量、物理内存、虚</p><p>拟内存等等。</p><p>第五部分是 JVM 启动参数和几个关键</p><p>路径，这些信息其实跟 jinfo 命令看到</p><p>的差不多。</p><h3 id="JVM-图形化工具-jvisualvm"><a href="#JVM-图形化工具-jvisualvm" class="headerlink" title="JVM 图形化工具-jvisualvm"></a><strong>JVM 图形化工具-jvisualvm</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220854.png" alt="image-20210221220854205"></p><h3 id="JVM-图形化工具-jvisualvm-1"><a href="#JVM-图形化工具-jvisualvm-1" class="headerlink" title="JVM 图形化工具-jvisualvm"></a><strong>JVM 图形化工具-jvisualvm</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220905.png" alt="image-20210221220905018"></p><h3 id="JVM-图形化工具-jvisualvm-2"><a href="#JVM-图形化工具-jvisualvm-2" class="headerlink" title="JVM 图形化工具-jvisualvm"></a><strong>JVM 图形化工具-jvisualvm</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220919.png" alt="image-20210221220919070"></p><h3 id="JVM-图形化工具-jvisualvm-3"><a href="#JVM-图形化工具-jvisualvm-3" class="headerlink" title="JVM 图形化工具-jvisualvm"></a><strong>JVM 图形化工具-jvisualvm</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221220930.png" alt="image-20210221220930575"></p><h3 id="JVM-图形化工具-VisualGCJVM"><a href="#JVM-图形化工具-VisualGCJVM" class="headerlink" title="JVM 图形化工具-VisualGCJVM"></a><strong>JVM 图形化工具-VisualGCJVM</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221221250.png" alt="image-20210221221250412"></p><h3 id="图形化工具-jmc"><a href="#图形化工具-jmc" class="headerlink" title="图形化工具-jmc"></a><strong>图形化工具-jmc</strong></h3><p>![image-20210221221318177](/Users/cutie/Library/Application Support/typora-user-images/image-20210221221318177.png)</p><h3 id="JVM-图形化工具-jmc"><a href="#JVM-图形化工具-jmc" class="headerlink" title="JVM 图形化工具-jmc"></a><strong>JVM 图形化工具-jmc</strong></h3><p>![image-20210221221336485](/Users/cutie/Library/Application Support/typora-user-images/image-20210221221336485.png)</p><h3 id="JVM-图形化工具-jmc-1"><a href="#JVM-图形化工具-jmc-1" class="headerlink" title="JVM 图形化工具-jmc"></a><strong>JVM 图形化工具-jmc</strong></h3><p>![image-20210221221351996](/Users/cutie/Library/Application Support/typora-user-images/image-20210221221351996.png)</p><h3 id="JVM-图形化工具-jmc-2"><a href="#JVM-图形化工具-jmc-2" class="headerlink" title="JVM 图形化工具-jmc"></a><strong>JVM 图形化工具-jmc</strong></h3><p>![image-20210221221404197](/Users/cutie/Library/Application Support/typora-user-images/image-20210221221404197.png)</p><h3 id="JVM-图形化工具-jmc-3"><a href="#JVM-图形化工具-jmc-3" class="headerlink" title="JVM 图形化工具-jmc"></a><strong>JVM 图形化工具-jmc</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221221419.png" alt="image-20210221221419506"></p><h3 id="JVM-图形化工具-jmc-4"><a href="#JVM-图形化工具-jmc-4" class="headerlink" title="JVM 图形化工具-jmc"></a><strong>JVM 图形化工具-jmc</strong></h3><p>![image-20210221221517013](/Users/cutie/Library/Application Support/typora-user-images/image-20210221221517013.png)</p><h3 id="JVM-图形化工具-jmc-5"><a href="#JVM-图形化工具-jmc-5" class="headerlink" title="JVM 图形化工具-jmc"></a><strong>JVM 图形化工具-jmc</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221221536.png" alt="image-20210221221535991"></p><h3 id="JVM-工具总结"><a href="#JVM-工具总结" class="headerlink" title="JVM 工具总结"></a><strong>JVM 工具总结</strong></h3><p>jsonsole</p><p>jvisualvm</p><p>visualGC</p><p>jmc</p><p>jps/jinfo</p><p>jstat</p><p>jmap</p><p>jstack</p><p>jcmd</p><p>jrunscript/jjs</p><h2 id="3-GC-的背景与一般原理"><a href="#3-GC-的背景与一般原理" class="headerlink" title="3.GC 的背景与一般原理"></a>3.GC 的背景与一般原理</h2><h3 id="GC-的背景与一般原理"><a href="#GC-的背景与一般原理" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p>为什么会有 GC</p><p>本质上是内存资源的有限性</p><p>因此需要大家共享使用，手工申请，手动释放。</p><p>下面我们举个例子</p><h3 id="GC-的背景与一般原理-1"><a href="#GC-的背景与一般原理-1" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p>![image-20210221222138290](/Users/cutie/Library/Application Support/typora-user-images/image-20210221222138290.png)</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221222153.png" alt="image-20210221222153440"></p><p>仓库与引用计数：计数为 0</p><p>简单粗暴，一般有效</p><p>实际情况复杂一点</p><p>仓库与仓库之间也有关系</p><p>导致形成一个环，大家的计数永远不为 0（跟线程、事务死锁一个原理）</p><p>这些仓库都没法再用：内存泄漏-&gt;内存溢出</p><p>怎么改进呢？引用计数-&gt;引用跟踪</p><h3 id="GC-的背景与一般原理-2"><a href="#GC-的背景与一般原理-2" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221222210.png" alt="image-20210221222210636"></p><p>标记清除算法（Mark and Sweep）</p><p>Marking（标记）: 遍历所有的可达对象，并在本地内存(native)中分门别类记下。</p><p>Sweeping（清除）: 这一步保证了，不可达对象所占用的内存，在之后进行内存分配时可以重用。</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221222224.png" alt="image-20210221222224887"></p><p>并行 GC 和 CMS 的基本原理。</p><p>优势：可以处理循环依赖，只扫描部分对象</p><p>除了清除，还要做压缩。</p><p>怎么才能标记和清除清楚上百万对象呢？</p><p>答案就是 STW，让全世界停止下来。</p><h3 id="GC-的背景与一般原理-3"><a href="#GC-的背景与一般原理-3" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221223219.png" alt="image-20210221223219675"></p><p>分代假设：大部分新生对象很快无用；</p><p>存活较长时间的对象，可能存活更长时间。</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221223239.png" alt="image-20210221223239475"></p><p>内存池划分</p><p>不同类型对象不同区域，不同策略处理。</p><h3 id="GC-的背景与一般原理-4"><a href="#GC-的背景与一般原理-4" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221223307.png" alt="image-20210221223307061"></p><p>对象分配在新生代的 Eden 区，标记阶段 Eden 区存活的对象就会复制到存活区；</p><p>注意：为什么是复制，不是移动？？？大家想想</p><p>两个存活区 from 和 to，互换角色。对象存活到一定周期会提升到老年代。</p><p>由如下参数控制提升阈值</p><p>XX：+MaxTenuringThreshold=15</p><p>老年代默认都是存活对象，采用移动方式：</p><ol><li>标记所有通过 GC roots 可达的对象；</li><li>删除所有不可达对象；</li><li>整理老年代空间中的内容，方法是将所有的存活对象复制，从老年代空间开始的地方依次存放。</li></ol><p>持久代/元数据区</p><p>1.8 之前 -XX:MaxPermSize=256m</p><p>1.8 之后 -XX:MaxMetaspaceSize=256m</p><h3 id="GC-的背景与一般原理-5"><a href="#GC-的背景与一般原理-5" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221223341.png" alt="image-20210221223340955"></p><p>可以作为 GC Roots 的对象</p><ol><li>当前正在执行的方法里的局部变量和输入参数</li><li>活动线程（Active threads）</li><li>所有类的静态字段（static field）</li><li>JNI 引用</li></ol><p>此阶段暂停的时间，与堆内存大小,对象</p><p>的总数没有直接关系，而是由存活对象</p><p>（alive objects）的数量来决定。所以增</p><p>加堆内存的大小并不会直接影响标记阶段</p><p>占用的时间。</p><h3 id="GC-的背景与一般原理-6"><a href="#GC-的背景与一般原理-6" class="headerlink" title="GC 的背景与一般原理"></a><strong>GC 的背景与一般原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221223412.png" alt="image-20210221223412335"></p><p><strong>标记复制算法(Mark-Copy)</strong></p><p><strong>标记清除(Mark-Sweep)</strong></p><p><strong>标记清除整理算法(Mark-Sweep-Compact)</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/659cc6c9-9244-4bce-ad2b-c448ab9fa33b/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/659cc6c9-9244-4bce-ad2b-c448ab9fa33b/Untitled.png"></p><p><strong>总结一下，三者有什么优缺点</strong></p><h2 id="4-串行-GC-并行-GC（Serial-GC-Parallel-GC）"><a href="#4-串行-GC-并行-GC（Serial-GC-Parallel-GC）" class="headerlink" title="4.串行 GC/并行 GC（Serial GC/Parallel GC）"></a>4.串行 GC/并行 GC（Serial GC/Parallel GC）</h2><h3 id="串行-GC（Serial-GC）-ParNewGC"><a href="#串行-GC（Serial-GC）-ParNewGC" class="headerlink" title="串行 GC（Serial GC）/ParNewGC"></a><strong>串行 GC（Serial GC）/ParNewGC</strong></h3><p>XX：+UseSerialGC 配置串行 GC</p><p>串行 GC 对年轻代使用 mark-copy（标记-复制） 算法，对老年代使用 mark-sweep-compact（标记-清除-整理）算法。</p><p>两者都是单线程的垃圾收集器，不能进行并行处理，所以都会触发全线暂停（STW），停止所有的应用线程。</p><p>因此这种 GC 算法不能充分利用多核 CPU。不管有多少 CPU 内核，JVM 在垃圾收集时都只能使用单个核心。</p><p>CPU 利用率高，暂停时间长。简单粗暴，就像老式的电脑，动不动就卡死。该选项只适合几百 MB 堆内存的 JVM，而且是单核 CPU 时比较有用。</p><p>想想 why？</p><p>XX：+USeParNewGC 改进版本的 Serial GC，可以配合 CMS 使用。</p><h3 id="并行-GC（Parallel-GC）"><a href="#并行-GC（Parallel-GC）" class="headerlink" title="并行 GC（Parallel GC）"></a><strong>并行 GC（Parallel GC）</strong></h3><p>XX：+UseParallelGC</p><p>XX：+UseParallelOldGC</p><p>XX：+UseParallelGC -XX:+UseParallelOldGC</p><p>年轻代和老年代的垃圾回收都会触发 STW 事件。</p><p>在年轻代使用 标记-复制（mark-copy）算法，在老年代使用 标记-清除-整理（mark-sweepcompact）算法。</p><p>XX：ParallelGCThreads=N 来指定 GC 线程数， 其默认值为 CPU 核心数。并行垃圾收集器适用于多核服务器，主要目标是增加吞吐量。因为对系统资源的有效使用，能达到更高的吞吐量:</p><p>在 GC 期间，所有 CPU 内核都在并行清理垃圾，所以总暂停时间更短；</p><p>在两次 GC 周期的间隔期，没有 GC 线程在运行，不会消耗任何系统资源。</p><h3 id="演示：并行-GC，常用参数以及其内存分配"><a href="#演示：并行-GC，常用参数以及其内存分配" class="headerlink" title="演示：并行 GC，常用参数以及其内存分配"></a><strong>演示：并行 GC，常用参数以及其内存分配</strong></h3><h2 id="5-CMS-GC-G1-GC"><a href="#5-CMS-GC-G1-GC" class="headerlink" title="5.CMS GC/G1 GC"></a>5.CMS GC/G1 GC</h2><h3 id="CMS-GC（Mostly-Concurrent-Mark-and-Sweep-Garbage-Collector）"><a href="#CMS-GC（Mostly-Concurrent-Mark-and-Sweep-Garbage-Collector）" class="headerlink" title="CMS GC（Mostly Concurrent Mark and Sweep Garbage Collector）"></a><strong>CMS GC（Mostly Concurrent Mark and Sweep Garbage Collector）</strong></h3><p>XX：+UseConcMarkSweepGC</p><p>其对年轻代采用并行 STW 方式的 mark-copy (标记-复制)算法，对老年代主要使用并发 marksweep (标记-清除)算法。</p><p>CMS GC 的设计目标是避免在老年代垃圾收集时出现长时间的卡顿，主要通过两种手段来达成此</p><p>目标：</p><ol><li>不对老年代进行整理，而是使用空闲列表（free-lists）来管理内存空间的回收。</li><li>在 mark-and-sweep （标记-清除） 阶段的大部分工作和应用线程一起并发执行。也就是说，在这些阶段并没有明显的应用线程暂停。但值得注意的是，它仍然和应用线程争抢CPU 时间。默认情况下，CMS 使用的并发线程数等于 CPU 核心数的 1/4。如果服务器是多核 CPU，并且主要调优目标是降低 GC 停顿导致的系统延迟，那么使用 CMS 是个很明智的选择。进行老年代的并发回收时，可能会伴随着多次年轻代的 minor GC。思考：并行 Parallel 与并发 Concurrent 的区别？</li></ol><h3 id="CMS-GC–六个阶段-1（STW）"><a href="#CMS-GC–六个阶段-1（STW）" class="headerlink" title="CMS GC–六个阶段 1（STW）"></a><strong>CMS GC–六个阶段 1（STW）</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221224228.png" alt="image-20210221224228081"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>这个阶段伴随着 STW 暂停。初始标记的目标是标记所有</strong></p><p><strong>的根对象，包括根对象直接引用的对象，以及被年轻代中</strong></p><p><strong>所有存活对象所引用的对象（老年代单独回收）。</strong></p><h3 id="CMS-GC–六个阶段-2"><a href="#CMS-GC–六个阶段-2" class="headerlink" title="CMS GC–六个阶段 2"></a><strong>CMS GC–六个阶段 2</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221224247.png" alt="image-20210221224247086"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>在此阶段，CMS GC 遍历老年代，标记所有的存活对象，从前一阶段 “Initial Mark” 找到的根对象开始算起。 “并发标记”阶段，就是与应用程序同时运行，不用暂停的阶段。</strong></p><h3 id="CMS-GC–六个阶段-3"><a href="#CMS-GC–六个阶段-3" class="headerlink" title="CMS GC–六个阶段 3"></a><strong>CMS GC–六个阶段 3</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221224305.png" alt="image-20210221224305487"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>此阶段同样是与应用线程并发执行的，不需要停止应用线程。 因为前一阶段【并发标记】与程序并发运行，可能有一些引用关系已经发生了改变。如果在并发标记过程中引用关系发生了变化，JVM 会通过“Card（卡片）”的方式将发生了改变的区域标记为“脏”区，这就是所谓的 卡片标记（Card Marking）。</strong></p><h3 id="CMS-GC–六个阶段-4（STW）"><a href="#CMS-GC–六个阶段-4（STW）" class="headerlink" title="CMS GC–六个阶段 4（STW）"></a><strong>CMS GC–六个阶段 4（STW）</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221224359.png" alt="image-20210221224359868"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>最终标记阶段是此次 GC 事件中的第二次（也是最后一次）STW 停顿。本阶段的目标是完成老年代中所有存活对象的标记. 因为之前的预清理阶段是并发执行的，有可能 GC 线程跟不上应用程序的修改速度。所以需要一次STW 暂停来处理各种复杂的情况。通常 CMS 会尝试在年轻代尽可能空的情况下执行 FinalRemark 阶段，以免连续触发多次 STW 事件。</strong>最终标记</p><h3 id="CMS-GC–六个阶段-5"><a href="#CMS-GC–六个阶段-5" class="headerlink" title="CMS GC–六个阶段 5"></a><strong>CMS GC–六个阶段 5</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221224416.png" alt="image-20210221224416548"></p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>此阶段与应用程序并发执行，不需要 STW 停顿。JVM 在此阶段删除不再使用的对象，并回收他们占用的内存空间。</strong></p><h3 id="CMS-GC–六个阶段-6"><a href="#CMS-GC–六个阶段-6" class="headerlink" title="CMS GC–六个阶段 6"></a><strong>CMS GC–六个阶段 6</strong></h3><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Concurrent Mark（并发标记）</p><p>阶段 3: Concurrent Preclean（并发预清理）</p><p>阶段 4: Final Remark（最终标记）</p><p>阶段 5: Concurrent Sweep（并发清除）</p><p>阶段 6: Concurrent Reset（并发重置）</p><p><strong>此阶段与应用程序并发执行，重置 CMS 算法相关的内部数据，为下一次 GC 循环做准备。</strong></p><p><strong>CMS 垃圾收集器在减少停顿时间上做了很多复杂而有用的工作，用于垃圾回收的并发线程执行的同时，并不需要暂停应用线程。 当然，CMS 也有一些缺点，其中最大的问题就是老年代内存碎片问题（因为不压缩），在某些情况下 GC 会造成不可预测的暂停时间，特别是堆</strong></p><p><strong>内存较大的情况下。</strong></p><p><strong>演示：CMS GC，常用参数以及其内存分配（注意跟 ParallelGC 有什么差异）</strong></p><h3 id="G1-GC"><a href="#G1-GC" class="headerlink" title="G1 GC"></a><strong>G1 GC</strong></h3><p>![image-20210221224900621](/Users/cutie/Library/Application Support/typora-user-images/image-20210221224900621.png)</p><p>G1 的全称是 Garbage-First，意为垃圾优先，哪一块的垃圾最多就优先清理它。</p><p>G1 GC 最主要的设计目标是：将 STW 停顿的时间和分布，变成可预期且可配置的。</p><p>事实上，G1 GC 是一款软实时垃圾收集器，可以为其设置某项特定的性能指标。为了达成可预期停顿时间的指标，G1 GC 有一些独特的实现。首先，堆不再分成年轻代和老年代，而是划分为多个（通常是 2048 个）可以存放对象的 小块堆区域(smaller heap regions)。每个小块，可能一会被定义成 Eden 区，一会被指定为 Survivor区或者Old 区。在逻辑上，所有的 Eden 区和 Survivor区合起来就是年轻代，所有的 Old 区拼在一起那就是老年代</p><p>XX：+UseG1GC -XX:MaxGCPauseMillis=50</p><h3 id="G1-GC-1"><a href="#G1-GC-1" class="headerlink" title="G1 GC"></a><strong>G1 GC</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221224930.png" alt="image-20210221224929948"></p><p>这样划分之后，使得 G1 不必每次都去收集整</p><p>个堆空间，而是以增量的方式来进行处理: 每</p><p>次只处理一部分内存块，称为此次 GC 的回收</p><p>集(collection set)。每次 GC 暂停都会收集所</p><p>有年轻代的内存块，但一般只包含部分老年代</p><p>的内存块。</p><p>G1 的另一项创新是，在并发阶段估算每个小</p><p>堆块存活对象的总数。构建回收集的原则是：</p><p>垃圾最多的小块会被优先收集。这也是 G1 名</p><p>称的由来。</p><h3 id="G1-GC–配置参数"><a href="#G1-GC–配置参数" class="headerlink" title="G1 GC–配置参数"></a><strong>G1 GC–配置参数</strong></h3><p>XX：+UseG1GC：启用 G1 GC；</p><p>XX：G1NewSizePercent：初始年轻代占整个 Java Heap 的大小，默认值为 5%；</p><p>XX：G1MaxNewSizePercent：最大年轻代占整个 Java Heap 的大小，默认值为 60%；</p><p>XX：G1HeapRegionSize：设置每个 Region 的大小，单位 MB，需要为 1，2，4，8，16，32 中的某个值，默认是堆内存的 1/2000。如果这个值设置比较大，那么大对象就可以进入 Region 了。</p><p>XX：ConcGCThreads：与 Java 应用一起执行的 GC 线程数量，默认是 Java 线程的 1/4，减少这个参数的数值可能会提升并行回收的效率，提高系统内部吞吐量。如果这个数值过低，参与回收垃圾的线程不足，也会导致并行回收机制耗时加长。</p><p>XX：+InitiatingHeapOccupancyPercent（简称 IHOP）：G1 内部并行回收循环启动的阈值，默认为 Java Heap 的 45%。这个可以理解为老年代使用大于等于 45% 的时候，JVM 会启动垃圾回收。这个值非常重要，它决定了在什么时间启动老年代的并行回收。</p><p>XX：G1HeapWastePercent：G1停止回收的最小内存大小，默认是堆大小的 5%。GC 会收集所有的 Region 中的对象，但是如果下降到了 5%，就会停下来不再收集了。就是说，不必每次回收就把所有的垃圾都处理完，可以遗留少量的下次处理，这样也降低了单次消耗的时间。</p><p>XX：G1MixedGCCountTarget：设置并行循环之后需要有多少个混合 GC 启动，默认值是 8 个。老年代 Regions 的回收时间通常比年轻代的收集时间要长一些。所以如果混合收集器比较多，可以允许 G1 延长老年代的收集时间。</p><h3 id="G1-GC–配置参数-1"><a href="#G1-GC–配置参数-1" class="headerlink" title="G1 GC–配置参数"></a><strong>G1 GC–配置参数</strong></h3><p>XX：+G1PrintRegionLivenessInfo：这个参数需要和 -XX:+UnlockDiagnosticVMOptions 配合启动，打印 JVM 的调试信息，每个 Region 里的对象存活信息。</p><p>XX：G1ReservePercent：G1 为了保留一些空间用于年代之间的提升，默认值是堆空间的 10%。因为大量执行回收的地方在年轻代（存活时间较短），所以如果你的应用里面有比较大的堆内存空间、比较多的大对象存活，这里需要保留一些内存。</p><p>XX：+G1SummarizeRSetStats：这也是一个 VM 的调试信息。如果启用，会在 VM 退出的时候打印出 Rsets 的详细总结信息。如果启用 -XX:G1SummaryRSetStatsPeriod 参数，就会阶段性地打印 Rsets 信息。</p><p>XX：+G1TraceConcRefinement：这个也是一个 VM 的调试信息，如果启用，并行回收阶段的日志就会被详细打印出来。</p><p>XX：+GCTimeRatio：这个参数就是计算花在 Java 应用线程上和花在 GC 线程上的时间比率，默认是 9，跟新生代内存的分配比例一致。这个参数主要的目的是让用户可以控制花在应用上的时间，G1 的计算公式是 100/（1+GCTimeRatio）。这样如果参数设置为 9，则最多 10% 的时间会花在 GC 工作上面。Parallel GC 的默认值是 99，表示 1% 的时间被用在 GC 上面，这是因为 Parallel GC 贯穿整个 GC，而 G1 则根据 Region 来进行划分，不需要全局性扫描整个内存堆。</p><p>XX：+UseStringDeduplication：手动开启 Java String 对象的去重工作，这个是 JDK8u20 版本之后新增的参数，主要用于相同 String 避免重复申请内存，节约 Region 的使用。</p><p>XX：MaxGCPauseMills：预期 G1 每次执行 GC 操作的暂停时间，单位是毫秒，默认值是 200 毫秒，G1 会尽量保证控制在这个范围内。</p><h3 id="G1-GC-的处理步骤-1"><a href="#G1-GC-的处理步骤-1" class="headerlink" title="G1 GC 的处理步骤 1"></a><strong>G1 GC 的处理步骤 1</strong></h3><p>1、年轻代模式转移暂停（Evacuation Pause）</p><p>G1 GC 会通过前面一段时间的运行情况来不断的调整自己的回收策略和行为，以此来比较稳定地控制暂停时间。在应用程序刚启动时，G1 还没有采集到什么足够的信息，这时候就处于初始的 fullyyoung 模式。当年轻代空间用满后，应用线程会被暂停，年轻代内存块中的存活对象被拷贝到存活区。如果还没有存活区，则任意选择一部分空闲的内存块作为存活区。拷贝的过程称为转移（Evacuation)，这和前面介绍的其他年轻代收集器是一样的工作原理。</p><h3 id="G1-GC-的处理步骤-2"><a href="#G1-GC-的处理步骤-2" class="headerlink" title="G1 GC 的处理步骤 2"></a><strong>G1 GC 的处理步骤 2</strong></h3><p>2、并发标记（Concurrent Marking）</p><p>同时我们也可以看到，G1 GC 的很多概念建立在 CMS 的基础上，所以下面的内容需要对 CMS 有一定的</p><p>理解。</p><p>G1 并发标记的过程与 CMS 基本上是一样的。G1 的并发标记通过 Snapshot-At-The-Beginning（起始快照）的方式，在标记阶段开始时记下所有的存活对象。即使在标记的同时又有一些变成了垃圾。通过对象的存活信息，可以构建出每个小堆块的存活状态，以便回收集能高效地进行选择。这些信息在接下来的阶段会用来执行老年代区域的垃圾收集。</p><p>有两种情况是可以完全并发执行的：</p><p>一、如果在标记阶段确定某个小堆块中没有存活对象，只包含垃圾；</p><p>二、在 STW 转移暂停期间，同时包含垃圾和存活对象的老年代小堆块。</p><p>当堆内存的总体使用比例达到一定数值，就会触发并发标记。这个默认比例是 45%，但也可以通过 JVM参数 InitiatingHeapOccupancyPercent 来设置。和 CMS 一样，G1 的并发标记也是由多个阶段组成，其中一些阶段是完全并发的，还有一些阶段则会暂停应用线程。</p><h3 id="G1-GC-的处理步骤-2-1"><a href="#G1-GC-的处理步骤-2-1" class="headerlink" title="G1 GC 的处理步骤 2"></a><strong>G1 GC 的处理步骤 2</strong></h3><p><strong>阶段 1: Initial Mark（初始标记）</strong></p><p>此阶段标记所有从 GC 根对象直接可达的对象。</p><p><strong>阶段 2: Root Region Scan（Root区扫描）</strong></p><p>此阶段标记所有从 “根区域” 可达的存活对象。根区域包括：非空的区域，以及在标记过程中不得不收集的区域。</p><p><strong>阶段 3: Concurrent Mark（并发标记）</strong></p><p>此阶段和 CMS 的并发标记阶段非常类似：只遍历对象图，并在一个特殊的位图中标记能访问到的对象。</p><p><strong>阶段 4: Remark（再次标记）</strong></p><p>和 CMS 类似，这是一次 STW 停顿(因为不是并发的阶段)，以完成标记过程。 G1 收集器会短暂地停止应用线程，停止并发更新信息的写入，处理其中的少量信息，并标记所有在并发标记开始时未被标记的存活对象。</p><p><strong>阶段 5: Cleanup（清理）</strong></p><p>最后这个清理阶段为即将到来的转移阶段做准备，统计小堆块中所有存活的对象，并将小堆块进行排序，以提升GC 的效率，维护并发标记的内部状态。 所有不包含存活对象的小堆块在此阶段都被回收了。有一部分任务是并发的：例如空堆区的回收，还有大部分的存活率计算。此阶段也需要一个短暂的 STW 暂停。</p><h3 id="G1-GC-的处理步骤-3"><a href="#G1-GC-的处理步骤-3" class="headerlink" title="G1 GC 的处理步骤 3"></a><strong>G1 GC 的处理步骤 3</strong></h3><p>3、转移暂停: 混合模式（Evacuation Pause (mixed)）</p><p>并发标记完成之后，G1将执行一次混合收集（mixed collection），就是不只清理年轻代，还将一部分老年代区域也加入到 回收集 中。混合模式的转移暂停不一定紧跟并发标记阶段。有很多规则和历史数据会影响混合模式的启动时机。比如，假若在老年代中可以并发地腾出很多的小堆块，就没有必要启动混合模式。</p><p>因此，在并发标记与混合转移暂停之间，很可能会存在多次 young 模式的转移暂停。具体添加到回收集的老年代小堆块的大小及顺序，也是基于许多规则来判定的。其中包括指定的软实时性能指标，存活性，以及在并发标记期间收集的 GC 效率等数据，外加一些可配置的 JVM 选项。混合收集的过程，很大程度上和前面的 fully-young gc 是一样的。</p><h3 id="G1-GC-的注意事项"><a href="#G1-GC-的注意事项" class="headerlink" title="G1 GC 的注意事项"></a><strong>G1 GC 的注意事项</strong></h3><p>特别需要注意的是，某些情况下 G1 触发了 Full GC，这时 G1 会退化使用 Serial 收集器来完成垃圾的清理工作，它仅仅使用单线程来完成 GC 工作，GC 暂停时间将达到秒级别的。</p><p>1.并发模式失败</p><p>G1 启动标记周期，但在 Mix GC 之前，老年代就被填满，这时候 G1 会放弃标记周期。解决办法：增加堆大小，或者调整周期（例如增加线程数-XX：ConcGCThreads 等）。</p><p>2.晋升失败</p><p>没有足够的内存供存活对象或晋升对象使用，由此触发了 Full GC(to-space exhausted/to-space overflow）。</p><p><strong>解决办法：</strong></p><p>a) 增加 –XX：G1ReservePercent 选项的值（并相应增加总的堆大小）增加预留内存量。</p><p>b) 通过减少 –XX：InitiatingHeapOccupancyPercent 提前启动标记周期。</p><p>c) 也可以通过增加 –XX：ConcGCThreads 选项的值来增加并行标记线程的数目。</p><p>3.巨型对象分配失败</p><p>当巨型对象找不到合适的空间进行分配时，就会启动 Full GC，来释放空间。</p><p>解决办法：增加内存或者增大 -XX：G1HeapRegionSize</p><h3 id="演示：G1-GC，常用参数以及其内存分配（注意跟-CMS-ParallelGC-有什么差异）"><a href="#演示：G1-GC，常用参数以及其内存分配（注意跟-CMS-ParallelGC-有什么差异）" class="headerlink" title="演示：G1 GC，常用参数以及其内存分配（注意跟 CMS/ParallelGC 有什么差异）"></a><strong>演示：G1 GC，常用参数以及其内存分配（注意跟 CMS/ParallelGC 有什么差异）</strong></h3><h3 id="各个-GC-对比"><a href="#各个-GC-对比" class="headerlink" title="各个 GC 对比"></a><strong>各个 GC 对比</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221225324.png" alt="image-20210221225324280"></p><h3 id="常用的-GC-组合（重点）"><a href="#常用的-GC-组合（重点）" class="headerlink" title="常用的 GC 组合（重点）"></a><strong>常用的 GC 组合（重点）</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221225336.png" alt="image-20210221225336005"></p><p>常用的组合为：</p><p>（1）Serial+Serial Old 实现单线程的低延迟</p><p>垃圾回收机制；</p><p>（2）ParNew+CMS，实现多线程的低延迟垃</p><p>圾回收机制；</p><p>（3）Parallel Scavenge和Parallel</p><p>Scavenge Old，实现多线程的高吞吐量垃圾</p><p>回收机制；</p><h3 id="GC-如何选择"><a href="#GC-如何选择" class="headerlink" title="GC 如何选择"></a><strong>GC 如何选择</strong></h3><p>选择正确的 GC 算法，唯一可行的方式就是去尝试，一般性的指导原则：</p><ol><li>如果系统考虑吞吐优先，CPU 资源都用来最大程度处理业务，用 Parallel GC；</li><li>如果系统考虑低延迟有限，每次 GC 时间尽量短，用 CMS GC；</li><li>如果系统内存堆较大，同时希望整体来看平均 GC 时间可控，使用 G1 GC。</li></ol><p>对于内存大小的考量：</p><ol><li>一般 4G 以上，算是比较大，用 G1 的性价比较高。</li><li>一般超过 8G，比如 16G-64G 内存，非常推荐使用 G1 GC。</li></ol><p>最后讨论一个很多开发者经常忽视的问题，也是面试大厂常问的问题：JDK8 的默认 GC 是什么？</p><p>JDK9，JDK10，JDK11…等等默认的是 GC 是什么？</p><h2 id="6-ZGC-Shenandoah-GC"><a href="#6-ZGC-Shenandoah-GC" class="headerlink" title="6. ZGC/Shenandoah GC"></a>6. ZGC/Shenandoah GC</h2><h3 id="ZGC-介绍"><a href="#ZGC-介绍" class="headerlink" title="ZGC 介绍"></a><strong>ZGC 介绍</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221225402.png" alt="image-20210221225402246"></p><p>XX：+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx16g</p><p>ZGC 最主要的特点包括:</p><ol><li>GC 最大停顿时间不超过 10ms</li><li>堆内存支持范围广，小至几百 MB 的堆空间，大至 4TB 的超大堆</li></ol><p>内存（JDK13 升至 16TB）</p><ol><li>与 G1 相比，应用吞吐量下降不超过 15%</li><li>当前只支持 Linux/x64 位平台，JDK15 后支持 MacOS 和</li></ol><p>Windows 系统</p><h3 id="ShennandoahGC-介绍"><a href="#ShennandoahGC-介绍" class="headerlink" title="ShennandoahGC 介绍"></a><strong>ShennandoahGC 介绍</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221225434.png" alt="image-20210221225434426"></p><p>XX：+UnlockExperimentalVMOptions -</p><p>XX:+UseShenandoahGC -Xmx16g</p><p>Shenandoah GC 立项比 ZGC 更早，设计为GC 线程与应用线程并发执行的方式，通过实现垃圾回收过程的并发处理，改善停顿时间，使得 GC 执行线程能够在业务处理线程运行过程中进行堆压缩、标记和整理，从而消除了绝大部分的暂停时间。</p><p>Shenandoah 团队对外宣称 ShenandoahGC 的暂停时间与堆大小无关，无论是 200MB 还是 200 GB的堆内存，都可以保障具有很低的暂停时间（注意:并不像 ZGC 那样保证暂停时间在 10ms 以内）。</p><h3 id="ShennandoahGC-与其他-GC-的-STW-比较GC-总结"><a href="#ShennandoahGC-与其他-GC-的-STW-比较GC-总结" class="headerlink" title="ShennandoahGC 与其他 GC 的 STW 比较GC 总结"></a><strong>ShennandoahGC 与其他 GC 的 STW 比较GC 总结</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210221225454.png" alt="image-20210221225454704"></p><p>到目前为止，我们一共了解了 Java 目前支持的所有 GC 算法，一共有 7 类:</p><ol><li>串行 GC（Serial GC）: 单线程执行，应用需要暂停；</li><li>并行 GC（ParNew、Parallel Scavenge、Parallel Old）: 多线程并行地执行垃圾回收，</li></ol><p>关注与高吞吐；</p><ol><li>CMS（Concurrent Mark-Sweep）: 多线程并发标记和清除，关注与降低延迟；</li><li>G1（G First）: 通过划分多个内存区域做增量整理和回收，进一步降低延迟；</li><li>ZGC（Z Garbage Collector）: 通过着色指针和读屏障，实现几乎全部的并发执行，几毫</li></ol><p>秒级别的延迟，线性可扩展；</p><ol><li>Epsilon: 实验性的 GC，供性能分析使用；</li><li>Shenandoah: G1 的改进版本，跟 ZGC 类似。</li></ol><h3 id="GC-总结"><a href="#GC-总结" class="headerlink" title="GC 总结"></a><strong>GC 总结</strong></h3><p>可以看出 GC 算法和实现的演进路线:</p><ol><li>串行 -&gt; 并行: 重复利用多核 CPU 的优势，大幅降低 GC 暂停时间，提升吞吐量。</li><li>并行 -&gt; 并发： 不只开多个 GC 线程并行回收，还将GC操作拆分为多个步骤，让很多繁重的任务和应用线程一起并发执行，减少了单次 GC 暂停持续的时间，这能有效降低业务系统的延迟。</li><li>CMS -&gt; G1： G1 可以说是在 CMS 基础上进行迭代和优化开发出来的，划分为多个小堆块进行增量回收，这样就更进一步地降低了单次 GC 暂停的时间</li><li>G1 -&gt; ZGC:：ZGC 号称无停顿垃圾收集器，这又是一次极大的改进。ZGC 和 G1 有一些相似的地方，但是底层的算法和思想又有了全新的突破。</li></ol><p>脱离场景谈性能都是耍流氓”。</p><p>目前绝大部分 Java 应用系统，堆内存并不大比如 2G-4G 以内，而且对 10ms 这种低延迟的 GC 暂停不敏感，也就是说处理一个业务步骤，大概几百毫秒都是可以接受的，GC 暂停 100ms 还是 10ms 没多大区别。另一方面，系统的吞吐量反而往往是我们追求的重点，这时候就需要考虑采用并行 GC。如果堆内存再大一些，可以考虑 G1 GC。如果内存非常大（比如超过 16G，甚至是 64G、128G），或者是对延迟非常敏感（比如高频量化交易系统），就需要考虑使用本节提到的新 GC（ZGC/Shenandoah）。</p><h2 id="7-总结回顾与作业实践"><a href="#7-总结回顾与作业实践" class="headerlink" title="7.总结回顾与作业实践"></a>7.总结回顾与作业实践</h2><h2 id="第-2-课总结回顾"><a href="#第-2-课总结回顾" class="headerlink" title="第 2 课总结回顾"></a><strong>第 2 课总结回顾</strong></h2><p>工具有哪些？</p><p>GC 有哪些？</p><p>都有什么特点？</p><h2 id="第-2-节课作业实践"><a href="#第-2-节课作业实践" class="headerlink" title="第 2 节课作业实践"></a><strong>第 2 节课作业实践</strong></h2><p>1、本机使用 G1 GC 启动一个程序，仿照课上案例分析一下 JVM 情况</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《把时间当做朋友》读后感</title>
      <link href="2021/02/19/%E8%AF%BB%E5%90%8E%E6%84%9F/%E3%80%8A%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
      <url>2021/02/19/%E8%AF%BB%E5%90%8E%E6%84%9F/%E3%80%8A%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h2><p>前段时间，朋友推荐我李笑来老师的定投践行群，传说中那个割韭菜的男人创建的群。对李笑来这个人，不反感，也没有好感，这个群很像是传销群，但是又不像传销群。里面添加了授课的内容以及一帮践行定投的人陪着你一起践行定投box。朋友说你进来就会有收获，凭借对朋友的信任以及好奇心，我加入了这个群，截止今天我才投了1000，而盈利金额已达到了50%。为什么那么少？因为我把钱投到了其他地方，矿机，因为我觉得矿机更能够提现时间的价值，每天一直挖矿获得利润的感觉是否是另一种把时间当做朋友的体验？只是没想到box，或者说btc的价值上涨得那么快（捶胸顿足）。</p><h2 id="我们要管理的不是时间，而是我们自己"><a href="#我们要管理的不是时间，而是我们自己" class="headerlink" title="我们要管理的不是时间，而是我们自己"></a>我们要管理的不是时间，而是我们自己</h2><p>很多人想着不劳而获，我承认我不想做那种人，但是却经常做这种梦。偶尔内心还是时不时期望着自己的老子家财万贯，只是没有告诉我：”我们家其实很有钱，只是没告诉你而已。”但是这个想法自从体验到没钱是多么无奈之后就完全打消了。钱，都说这个东西有了没太大作用，但是没有钱是万万不能的。</p><p>小时候因为家里没有钱感觉自己很自卑，为什么其他同学都穿着耐克阿迪？为什么我家里还是水泥墙？小学的时候记得有个女同学说：xx，我知道你家在哪里了。当时我的反应是面红耳赤，无地自容。小孩子的自尊总是那么的敏感，或许是我这个人敏感，敏感自己的家徒四壁，想着人家是知道了我的家是如何无法落脚。小学的时候同桌一个女生邀请我去参加她的生日，是去kfc。当时的我哪里去过kfc，我自卑的心里又开始作祟，心里想着送人家什么东西比较好，一方面又因为觉得自己家里穷，整个人完全没自信，再加上没去过kfc，不敢去。最后的最后，当然我还是没去成，后来在教室的时候，人家问我为什么没去？我说了句：只有我一个男生，不好意思去。</p><p>以至于到现在，我都害怕穷，怕自己没钱会被人家看不起。但是，这仅仅是我自己的想法，因为这个想法，不开心了那么多年。害怕自己以为的人家对自己的看法。</p><p>秦老师之前说，我们每个人都像是一件产品，用心打磨，总有一天会成为一件好的产品。时间，虚无，缥缈，空洞，无法把握，但是我们在这个有限的时间里，做一些什么事情才能算是在我们这短暂的一生留下印记？毕竟人死一捧灰，活着的时候，我们给别人带来的快乐是实在的，做事达成了成就是实在的，写下的每一个字是实在的。但是如果我埋头辛辛苦苦地赚钱，虽然就目前来说，我低着头在地上埋头苦找我的6便士是必要的，谁都需要生存。但是达到生存这一目标其实成本越来越低。不管你做什么，总能果腹。而因为买了房子，30年所需要还的贷款是贷款金额的2倍，我何时能够抬头看看我的月亮？</p><p>很多时候，发现自己的出发点都是为了赚钱，而没有打磨赚钱的技能。钱这个东西，本来就没自己想象中那么喜欢，今年1月涨了一点工资，过年的时候发了，结果我完全没有注意到工资的变动，反而是同事发现了涨工资之后好像多扣了几十块钱。赚钱带给我的喜悦已渐渐远去，但是我还是会记得第一次实习的时候，从老师手中接过那800元人民币，第一次用自己的双手赚钱的感觉。</p><p>为什么说到时间我说了一大堆钱的事情？因为我对它看的太重，以至于我的生活好像都不是那么快乐。</p><h2 id="现实"><a href="#现实" class="headerlink" title="现实"></a>现实</h2><h3 id="完美永不存在"><a href="#完美永不存在" class="headerlink" title="完美永不存在"></a>完美永不存在</h3><p>不要把我不能做完美的事情我不做当做借口，世上没有能做的完美的事情，也没有事事都完美的人，人之所以是人，就是因为不完美，千万不要因为自己的装逼，导致很多事情本来是能做的，却没有去做。</p><p>换句话说，去做了，这件事就是完美的。</p><h3 id="未知永远存在"><a href="#未知永远存在" class="headerlink" title="未知永远存在"></a>未知永远存在</h3><p>为了进步，我们必须忍受一部分未知。不然，我们的注意力会一直被那一部分未知所吸引，乃至消磨掉所有的耐心，最后，还是停留在未知，却没往后看看未知的后面隐藏着一些能够解释未知的知识。</p><p>人的线总是一步一步拓宽的，抄新华字典是一件枯燥的事情，如果那么枯燥的事情你都能坚持下来，以后还有什么枯燥的事情是你坚持不下来的呢？</p><p>当问题没有解决的时候，最好可以先记录下来，让这个未知的问题得到一个被审视的机会。</p><h3 id="5-现状无法马上摆脱"><a href="#5-现状无法马上摆脱" class="headerlink" title="5.现状无法马上摆脱"></a>5.现状无法马上摆脱</h3><blockquote><p>其实，世界上80%以上的职业并不过分依赖天分，更可能甚至几乎只依赖积累。天长日久，这个人在当前的职业中将逐渐落后于那些认真做事的人。但此时他不会因为自己的落后而奋起直追，反过来，更可能的是把“反正我的梦想不是这个”当作借口。</p></blockquote><hr><p><strong>重新开始写，读一点写一点记录一下</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 李笑来 </tag>
            
            <tag> 个人提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week02-01 JVM 核心技术（三）：调优分析与面试经验</title>
      <link href="2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week02-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%B0%83%E4%BC%98%E5%88%86%E6%9E%90%E4%B8%8E%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
      <url>2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week02-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E8%B0%83%E4%BC%98%E5%88%86%E6%9E%90%E4%B8%8E%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>极客大学 Java 进阶训练营</p><h1 id="第-3-课-JVM-核心技术（三）：调优分析与面试经验"><a href="#第-3-课-JVM-核心技术（三）：调优分析与面试经验" class="headerlink" title="第 3 课 JVM 核心技术（三）：调优分析与面试经验"></a>第 3 课 JVM 核心技术（三）：调优分析与面试经验</h1><p><strong>目录</strong></p><ol><li>GC 日志解读与分析*</li><li>JVM 线程堆栈数据分析</li><li>内存分析与相关工具*</li><li>JVM 问题分析调优经验*</li><li>GC 疑难情况问题分析</li><li>JVM 常见面试问题汇总*</li><li>第 3 课总结回顾与作业实践</li></ol><p>第 3 课 JVM 核心技术</p><p>调优分析与面试经验</p><ol><li>GC 日志解读与分析</li></ol><p><strong>GC 日志解读与分析</strong></p><p>java -XX:+PrintGCDetails GCLogAnalysis</p><p>java -Xloggc:gc.demo.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps</p><p>GCLogAnalysis</p><p>1）模拟一下 OOM，java -Xmx128m -XX:+PrintGCDetails GCLogAnalysis</p><p>2）分别使用 512m,1024m,2048m,4086m,观察 GC 信息的不同</p><p><strong>GC 日志解读与分析</strong></p><p>究竟是</p><p>Young GC</p><p>Full GC</p><p>还是</p><p>Minor GC（小型 GC）</p><p>Major GC（大型 GC）</p><p>？</p><p><strong>GC 日志解读与分析</strong></p><p>串行 GC</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/56c4964e-3090-4d30-94ba-d8520025a8c0/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/56c4964e-3090-4d30-94ba-d8520025a8c0/Untitled.png"></p><p>java -XX:+UseSerialGC</p><p>Xms512m -Xmx512m</p><p>Xloggc:gc.demo.log</p><p>XX:+PrintGCDetails</p><p>XX:+PrintGCDateStamps</p><p>GCLogAnalysis</p><p>观察 Young GC 与 Full GC</p><p><strong>GC 日志解读与分析</strong></p><p>并行 GC</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fe5cadcd-809a-49e6-9cfc-e03085820329/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fe5cadcd-809a-49e6-9cfc-e03085820329/Untitled.png"></p><p>java -XX:+UseParallelGC</p><p>Xms512m -Xmx512m</p><p>Xloggc:gc.demo.log</p><p>XX:+PrintGCDetails</p><p>XX:+PrintGCDateStamps</p><p>GCLogAnalysis</p><p>观察 Young GC 与 Full GC</p><p>思考：如果不配置 Xms 会怎么样？</p><p><strong>GC 日志解读与分析</strong></p><p>CMS GC</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2bbb0f5c-e004-4439-a01f-7a6f71b6d104/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2bbb0f5c-e004-4439-a01f-7a6f71b6d104/Untitled.png"></p><p>java -XX:+UseConcMarkSweepGC</p><p>Xms512m -Xmx512m</p><p>Xloggc:gc.demo.log</p><p>XX:+PrintGCDetails</p><p>XX:+PrintGCDateStamps</p><p>GCLogAnalysis</p><p>观察 Young GC 与 Full GC</p><p>思考：假如 Xmx/Xms 设置 4g 会怎么样？</p><p>4g 内存下跟并行 gc 相比呢？</p><p><strong>GC 日志解读与分析</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/163e4fdf-5fcc-4bca-b2f3-be1ae4c8f388/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/163e4fdf-5fcc-4bca-b2f3-be1ae4c8f388/Untitled.png"></p><p>阶段 1：Initial Mark（初始标记）</p><p>阶段 2：Concurrent Mark（并发标记）</p><p>阶段 3：Concurrent Preclean（并发预清理）</p><p>阶段 4： Final Remark（最终标记）</p><p>阶段 5： Concurrent Sweep（并发清除）</p><p>阶段 6： Concurrent Reset（并发重置）</p><p><strong>GC 日志解读与分析</strong></p><p>G1 GC</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bd3281d-191c-43e9-9c24-730efbec04bf/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bd3281d-191c-43e9-9c24-730efbec04bf/Untitled.png"></p><p>java -XX:+UseG1GC</p><p>Xms512m -Xmx512m</p><p>Xloggc:gc.demo.log</p><p>XX:+PrintGCDetails</p><p>XX:+PrintGCDateStamps</p><p>GCLogAnalysis</p><p>观察 Young GC 与 Full GC</p><p>思考：假如Xmx/Xms 设置 4g 会怎么样？</p><p>4g 内存下跟 cms gc 相比呢？</p><p><strong>GC 日志解读与分析</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/93faa5e0-9171-4f51-95d8-d67693916b29/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/93faa5e0-9171-4f51-95d8-d67693916b29/Untitled.png"></p><p>Evacuation Pause: young（纯年轻代模式转移暂停）</p><p>Concurrent Marking（并发标记）</p><p>阶段 1: Initial Mark（初始标记）</p><p>阶段 2: Root Region Scan（Root区扫描）</p><p>阶段 3: Concurrent Mark（并发标记）</p><p>阶段 4: Remark（再次标记）</p><p>阶段 5: Cleanup（清理）</p><p>Evacuation Pause (mixed)（转移暂停: 混合模式）</p><p>Full GC (Allocation Failure)</p><p>思考：假模拟一下 full gc</p><p><strong>GC 日志解读与分析</strong></p><p>一个退化时的例子</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9b3fc086-4a65-454a-bc7d-c29354e3dbba/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9b3fc086-4a65-454a-bc7d-c29354e3dbba/Untitled.png"></p><p><strong>GC 日志解读与分析</strong></p><p>4G 内存时的 G1，完全不一样</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0feedc68-bee7-45c7-afce-7779b4c688b9/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0feedc68-bee7-45c7-afce-7779b4c688b9/Untitled.png"></p><p><strong>GC 日志解读与分析</strong></p><p>GCEasy</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9c7e20ee-d86d-4c3a-8b4c-61d62cfd05c7/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9c7e20ee-d86d-4c3a-8b4c-61d62cfd05c7/Untitled.png"></p><p><strong>GC 日志解读与分析</strong></p><p>GCViewer</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3a8312f8-affc-413b-b710-fbacb2d59275/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3a8312f8-affc-413b-b710-fbacb2d59275/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/151c60a2-f696-4213-9315-fd98d9ad12f3/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/151c60a2-f696-4213-9315-fd98d9ad12f3/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22130c54-aabd-4486-beca-1b6ad630181e/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22130c54-aabd-4486-beca-1b6ad630181e/Untitled.png"></p><p><strong>GC 日志解读与分析</strong></p><p>总结：</p><p>如何查看/分析不同 GC 配置下的日志信息？</p><p>各种 GC 有什么特点和使用场景？</p><ol><li>JVM 线程堆栈数据分析</li></ol><p><strong>JVM 线程堆栈数据分析</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e9ddfe9e-b8e0-4089-8728-f6d92cbe6c86/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e9ddfe9e-b8e0-4089-8728-f6d92cbe6c86/Untitled.png"></p><p><strong>JVM 线程堆栈数据分析</strong></p><p>JVM 内部线程主要分为以下几种：</p><p>VM 线程：单例的 VMThread 对象，负责执行 VM 操作，</p><p>下文将对此进行讨论;</p><p>定时任务线程：单例的 WatcherThread 对象， 模拟在</p><p>VM 中执行定时操作的计时器中断；</p><p>GC 线程：垃圾收集器中，用于支持并行和并发垃圾回收</p><p>的线程;</p><p>编译器线程： 将字节码编译为本地机器代码;</p><p>信号分发线程：等待进程指示的信号，并将其分配给Java</p><p>级别的信号处理方法。</p><p>安全点：</p><ol><li>方法代码中被植入的安全点检测入口；</li><li>线程处于安全点状态：线程暂停执行，这个时候线</li></ol><p>程栈不再发生改变；</p><ol><li>JVM 的安全点状态：所有线程都处于安全点状态。</li></ol><p>JVM 支持多种方式来进行线程转储：</p><ol><li>JDK 工具, 包括: jstack 工具, jcmd 工具, jconsole,</li></ol><p>jvisualvm, Java Mission Control 等；</p><ol><li>Shell 命令或者系统控制台, 比如 Linux 的 kill -3,</li></ol><p>Windows 的 Ctrl + Break 等；</p><ol><li>JMX 技术， 主要是使用 ThreadMxBean。</li></ol><p><strong>JVM 线程堆栈数据分析</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/84b53168-fdc0-426c-9d7f-88a6e04a6865/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/84b53168-fdc0-426c-9d7f-88a6e04a6865/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e83e1d59-7cf3-4764-9bcb-0b10ddc08ca1/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e83e1d59-7cf3-4764-9bcb-0b10ddc08ca1/Untitled.png"></p><p><strong>JVM 线程堆栈数据分析</strong></p><p>fastthread 线程分析</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/647de23b-a77c-412a-8550-c5bc8869e426/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/647de23b-a77c-412a-8550-c5bc8869e426/Untitled.png"></p><ol><li>内存分析与相关工具</li></ol><p><strong>内存分析与相关工具</strong></p><p><strong>请思考一个问题：</strong></p><p>一个对象具有100个属性，与100个对象每个具有1个属性，</p><p>哪个占用的内存空间更大？</p><p><strong>内存分析与相关工具</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fffd0c71-dddc-4ef1-9dce-566487f1d83a/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fffd0c71-dddc-4ef1-9dce-566487f1d83a/Untitled.png"></p><p>一个 Java 对象占用多少内存？</p><p>可以使用 Instrumentation.getObjectSize()</p><p>方法来估算一个对象占用的内存空间。</p><p>JOL (Java Object Layout) 可以用来查看对象</p><p>内存布局。</p><p>对比结构体与Data Object？</p><p><strong>内存分析与相关工具</strong></p><p><strong>对象头和对象引用</strong></p><p>在64位 JVM 中，对象头占据的空间是 12-</p><p>byte(=96bit=64+32)，但是以8字节对齐，所以一</p><p>个空类的实例至少占用16字节。</p><p>在32位 JVM 中，对象头占8个字节，以4的倍数对</p><p>齐(32=4*8)。</p><p>所以 new 出来很多简单对象，甚至是 new</p><p>Object()，都会占用不少内容哈。</p><p>通常在32位 JVM，以及内存小于 -Xmx32G 的64位</p><p>JVM 上(默认开启指针压缩)，一个引用占的内存默</p><p>认是4个字节。</p><p>因此，64位 JVM 一般需要多消耗堆内存。</p><p><strong>包装类型</strong></p><p>比原生数据类型消耗的内存要多，详情可以参考</p><p>JavaWorld ：</p><p>Integer：占用16字节(8+4=12+补齐)，因为 int 部分</p><p>占4个字节。 所以使用 Integer 比原生类型 int 要多消</p><p>耗 300% 的内存。</p><p>Long：一般占用16个字节(8+8=16)，当然，对象的实</p><p>际大小由底层平台的内存对齐确定，具体由特定 CPU</p><p>平台的 JVM 实现决定。 看起来一个 Long 类型的对</p><p>象，比起原生类型 long 多占用了8个字节（也多消耗</p><p>了100%）。</p><p><strong>内存分析与相关工具</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57067c1e-69dc-4996-bc9e-1e3dc32ee8d4/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57067c1e-69dc-4996-bc9e-1e3dc32ee8d4/Untitled.png"></p><p>多维数组：在二维数组 int[dim1][dim2] 中，每个</p><p>嵌套的数组 int[dim2] 都是一个单独的 Object，会</p><p>额外占用16字节的空间。当数组维度更大时，这种</p><p>开销特别明显。</p><p>int[128][2] 实例占用3600字节。 而 int[256] 实例</p><p>则只占用1040字节。里面的有效存储空间是一样</p><p>的，3600 比起1040多了246%的额外开销。在极</p><p>端情况下，byte[256][1]，额外开销的比例是19倍!</p><p>String: String 对象的空间随着内部字符数组的增</p><p>长而增长。当然，String 类的对象有24个字节的额</p><p>外开销。</p><p>对于10字符以内的非空 String，增加的开销比起有</p><p>效载荷（每个字符2字节 + 4 个字节的 length），</p><p>多占用了100% 到 400% 的内存。</p><p>对齐是绕不过去的问题</p><p>我们可能会认为，一个 X 类的实例占用17字节的空间。</p><p>但是由于需要对齐(padding)，JVM 分配的内存是8字节</p><p>的整数倍，所以占用的空间不是17字节,而是24字节。</p><p><strong>内存分析与相关工具</strong></p><p>内存泄漏的例子：</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e04defb4-4a7f-4ffe-99c2-7c623f26a15f/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e04defb4-4a7f-4ffe-99c2-7c623f26a15f/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d058e339-62a2-405d-a5b2-4cd07c36e3c4/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d058e339-62a2-405d-a5b2-4cd07c36e3c4/Untitled.png"></p><p><strong>内存分析与相关工具</strong></p><p>OutOfMemoryError: Java heap space</p><p>创建新的对象时，堆内存中的空间不足以存放新创建的对象</p><p>产生的原因，很多时候就类似于将 XXL 号的对象，往 S 号的 Java heap space 里面塞。其实清楚了</p><p>原因，问题就很容易解决了：只要增加堆内存的大小，程序就能正常运行。</p><p>另外还有一些情况是由代码问题导致的：</p><p>超出预期的访问量/数据量：应用系统设计时，一般是有 “容量” 定义的，部署这么多机器，用来</p><p>处理一定流量的数据/业务。 如果访问量突然飙升，超过预期的阈值，类似于时间坐标系中针尖形</p><p>状的图谱。那么在峰值所在的时间段，程序很可能就会卡死、并触发</p><p>java.lang.OutOfMemoryError: Java heap space错误。</p><p>内存泄露(Memory leak)：这也是一种经常出现的情形。由于代码中的某些隐蔽错误，导致系统占</p><p>用的内存越来越多。如果某个方法/某段代码存在内存泄漏，每执行一次，就会（有更多的垃圾对</p><p>象）占用更多的内存。随着运行时间的推移，泄漏的对象耗光了堆中的所有内存，那么</p><p>java.lang.OutOfMemoryError: Java heap space 错误就爆发了。</p><p><strong>内存分析与相关工具</strong></p><p>OutOfMemoryError: PermGen space/OutOfMemoryError: Metaspace</p><p>java.lang.OutOfMemoryError: PermGen space 的主要原因，是加载到内存中的</p><p>class 数量太多或体积太大，超过了 PermGen 区的大小。</p><p>解决办法：增大 PermGen/Metaspace</p><p>XX:MaxPermSize=512m</p><p>XX:MaxMetaspaceSize=512m</p><p>高版本 JVM 也可以：</p><p>XX:+CMSClassUnloadingEnabled</p><p><strong>内存分析与相关工具</strong></p><p>OutOfMemoryError: Unable to create new native thread</p><p>java.lang.OutOfMemoryError: Unable to create new native thread 错误是程序创</p><p>建的线程数量已达到上限值的异常信息。</p><p>解决思路：</p><ol><li>调整系统参数 ulimit -a，echo 120000 &gt; /proc/sys/kernel/threads-max</li><li>降低 xss 等参数</li><li>调整代码，改变线程创建和使用方式</li></ol><p><strong>内存分析与相关工具</strong></p><p>内存 Dump 分析工具</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eaf8710a-12a7-499a-be84-8aaa73aa1387/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eaf8710a-12a7-499a-be84-8aaa73aa1387/Untitled.png"></p><p>Eclipse MAT</p><p>jhat</p><p>留给大家自己研究4. JVM 问题分析调优经验</p><p><strong>JVM 问题分析调优经验</strong></p><p>1、高分配速率(High Allocation Rate)</p><p>分配速率(Allocation rate)表示单位时间内分配的内存量。通常</p><p>使用 MB/sec 作为单位。上一次垃圾收集之后，与下一次 GC 开</p><p>始之前的年轻代使用量，两者的差值除以时间,就是分配速率。</p><p>分配速率过高就会严重影响程序的性能，在 JVM 中可能会导致巨</p><p>大的 GC 开销。</p><p>正常系统：分配速率较低 ~ 回收速率 -&gt; 健康</p><p>内存泄漏：分配速率 持续大于 回收速率 -&gt; OOM</p><p>性能劣化：分配速率较高 ~ 回收速率 -&gt; 压健康</p><p><strong>JVM 问题分析调优经验</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c940a822-2587-457c-8e4c-eee9d6fbee80/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c940a822-2587-457c-8e4c-eee9d6fbee80/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/55896e69-bb6f-458b-b578-851cc2261eca/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/55896e69-bb6f-458b-b578-851cc2261eca/Untitled.png"></p><p>JVM 启动之后 291ms，共创建了 33,280 KB 的对</p><p>象。第一次 Minor GC（小型GC) 完成后，年轻代</p><p>中还有 5,088 KB 的对象存活。</p><p>在启动之后 446 ms，年轻代的使用量增加到</p><p>38,368 KB，触发第二次 GC，完成后年轻代的使</p><p>用量减少到 5,120 KB。</p><p>在启动之后 829 ms，年轻代的使用量为 71,680</p><p>KB，GC 后变为 5,120 KB。</p><p><strong>JVM 问题分析调优经验</strong></p><p>思考一个问题，</p><p>分配速率，到底影响什么？</p><p>想一想，new 出来的对象，在什么地方。</p><p>答案就是，Eden。</p><p>假如我们增加 Eden，会怎么样。</p><p>考虑蓄水池效应。</p><p>最终的效果是，影响 Minor GC的次数和时间，进而影响吞吐量。</p><p>在某些情况下，只要增加年轻代的大小，即可降低分配速率过高所造成的影响。</p><p>增加年轻代空间并不会降低分配速率，但是会减少 GC 的频率。如果每次 GC 后</p><p>只有少量对象存活，minor GC 的暂停时间就不会明显增加。</p><p><strong>JVM 问题分析调优经验</strong></p><p>2、过早提升(Premature Promotion)</p><p>提升速率（promotion rate）用于衡量单位时间内从年轻代提</p><p>升到老年代的数据量。一般使用 MB/sec 作为单位, 和分配速率</p><p>类似。</p><p>JVM 会将长时间存活的对象从年轻代提升到老年代。根据分代假</p><p>设，可能存在一种情况，老年代中不仅有存活时间长的对象,，</p><p>也可能有存活时间短的对象。这就是过早提升：对象存活时间还</p><p>不够长的时候就被提升到了老年代。</p><p>major GC 不是为频繁回收而设计的，但 major GC 现在也要清</p><p>理这些生命短暂的对象，就会导致 GC 暂停时间过长。这会严重</p><p>影响系统的吞吐量。</p><p><strong>JVM 问题分析调优经验</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5e1466c7-659f-47f9-8785-2095b1c72f67/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5e1466c7-659f-47f9-8785-2095b1c72f67/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6cc76e03-cb24-408c-9b0f-4d7763460c0e/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6cc76e03-cb24-408c-9b0f-4d7763460c0e/Untitled.png"></p><p>GC 之前和之后的年轻代使用量以及堆内存使用量。</p><p>这样就可以通过差值算出老年代的使用量。</p><p>和分配速率一样，提升速率也会影响 GC 暂停的频</p><p>率。但分配速率主要影响 minor GC，而提升速率</p><p>则影响 major GC 的频率。</p><p>有大量的对象提升，自然很快将老年代填满。老年</p><p>代填充的越快，则 major GC 事件的频率就会越高。</p><p><strong>JVM 问题分析调优经验</strong></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1016daa3-e5ca-4bbc-bb07-f9fe7966fa63/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1016daa3-e5ca-4bbc-bb07-f9fe7966fa63/Untitled.png"></p><p>一般来说过早提升的症状表现为以下形式：</p><ol><li>短时间内频繁地执行 full GC</li><li>每次 full GC 后老年代的使用率都很低，在10-</li></ol><p>20%或以下</p><ol><li>提升速率接近于分配速率</li></ol><p>要演示这种情况稍微有点麻烦，所以我们使用特殊</p><p>手段，让对象提升到老年代的年龄比默认情况小很</p><p>多。指定 GC 参数 -Xmx24m -XX:NewSize=16m</p><p>XX:MaxTenuringThreshold=1，运行程序之后，</p><p>可以看到下面的 GC 日志。</p><p><strong>JVM 问题分析调优经验</strong></p><p>解决这类问题，需要让年轻代存放得下暂存的数据，有两种简单</p><p>的方法：</p><p>一是增加年轻代的大小，设置 JVM 启动参数，类似这样：-</p><p>Xmx64m -XX:NewSize=32m，程序在执行时，Full GC 的次数</p><p>自然会减少很多，只会对 minor GC 的持续时间产生影响。</p><p>二是减少每次批处理的数量，也能得到类似的结果。</p><p>至于选用哪个方案，要根据业务需求决定。 在某些情况下，业务</p><p>逻辑不允许减少批处理的数量，那就只能增加堆内存，或者重新</p><p>指定年轻代的大小。 如果都不可行，就只能优化数据结构，减少</p><p>内存消耗。</p><p>但总体目标依然是一致的：让临时数据能够在年轻代存放得下。</p><ol><li>GC 疑难情况问题分析</li></ol><p><strong>GC 疑难情况问题分析</strong></p><p>Arthas 诊断分析工具</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/21ddd39a-fc47-41c7-a937-239f8ffaee56/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/21ddd39a-fc47-41c7-a937-239f8ffaee56/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/99ad4f6d-d151-4788-a371-62879d79b3ed/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/99ad4f6d-d151-4788-a371-62879d79b3ed/Untitled.png"></p><p><strong>GC 疑难情况问题分析</strong></p><p>1、查询业务日志，可以发现这类问题：请求压力大，波峰，遭遇降级，熔断等等， 基础服务、外部 API 依赖 。</p><p>2、查看系统资源和监控信息：</p><p>硬件信息、操作系统平台、系统架构；</p><p>排查 CPU 负载、内存不足，磁盘使用量、硬件故障、磁盘分区用满、IO 等待、IO 密集、丢数据、并发竞</p><p>争等情况；</p><p>排查网络：流量打满，响应超时，无响应，DNS 问题，网络抖动，防火墙问题，物理故障，网络参数调整、</p><p>超时、连接数。</p><p>3、查看性能指标，包括实时监控、历史数据。可以发现 假死，卡顿、响应变慢等现象；</p><p>排查数据库， 并发连接数、慢查询、索引、磁盘空间使用量、内存使用量、网络带宽、死锁、TPS、查询</p><p>数据量、redo日志、undo、 binlog 日志、代理、工具 BUG。可以考虑的优化包括： 集群、主备、只读</p><p>实例、分片、分区；</p><p>大数据，中间件，JVM 参数。</p><p>4、排查系统日志， 比如重启、崩溃、Kill 。</p><p>5、APM，比如发现有些链路请求变慢等等。</p><p>6、排查应用系统</p><p>排查配置文件: 启动参数配置、Spring 配置、JVM 监控参数、数据库参数、Log 参数、APM 配置、</p><p>内存问题，比如是否存在内存泄漏，内存溢出、批处理导致的内存放大、GC 问题等等；</p><p>GC 问题， 确定 GC 算法、确定 GC 的 KPI，GC 总耗时、GC 最大暂停时间、分析 GC 日志和监控指标： 内存</p><p>分配速度，分代提升速度，内存使用率等数据。适当时修改内存配置；</p><p>排查线程, 理解线程状态、并发线程数，线程 Dump，锁资源、锁等待，死锁；</p><p>排查代码， 比如安全漏洞、低效代码、算法优化、存储优化、架构调整、重构、解决业务代码 BUG、第三方</p><p>库、XSS、CORS、正则；</p><p>单元测试： 覆盖率、边界值、Mock 测试、集成测试。</p><p>7、 排除资源竞争、坏邻居效应</p><p>8、疑难问题排查分析手段</p><p>DUMP 线程\内存；</p><p>抽样分析\调整代码、异步化、削峰填谷。</p><p><strong>GC 疑难情况问题分析</strong></p><p>一个真实的案例分析</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d75d936a-14d3-43ab-b667-94dfa20f6442/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d75d936a-14d3-43ab-b667-94dfa20f6442/Untitled.png"></p><p>并行 GC 暂停太高</p><p>G1 GC 暂停还是太高</p><p>找到问题，最终优化</p><ol><li>JVM 常见面试问题汇总</li></ol><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c3a068ce-eb77-4db7-9fa3-4ac3c779a997/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c3a068ce-eb77-4db7-9fa3-4ac3c779a997/Untitled.png"></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0730059f-b4ec-4aec-a816-a1422165dbb4/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0730059f-b4ec-4aec-a816-a1422165dbb4/Untitled.png"></p><p><strong>VM 常见面试问题汇总</strong></p><ol><li>总结回顾与作业实践</li></ol><p><strong>第 3 课总结回顾</strong></p><ol><li>GC 日志解读与分析*</li><li>JVM 线程堆栈数据分析</li><li>内存分析与相关工具*</li><li>JVM 问题分析调优经验*</li><li>GC 疑难情况问题分析</li><li>JVM 常见面试问题汇总*</li></ol><p><strong>第 3 课作业实践</strong></p><p>1、使用 GCLogAnalysis.java 自己演练一遍串行/并行/CMS/G1的案例。</p><p>2、使用压测工具（wrk或sb），演练gateway-server-0.0.1-SNAPSHOT.jar 示例。</p><p>3、(选做)如果自己本地有可以运行的项目，可以按照2的方式进行演练。</p><p>根据上述自己对于1和2的演示，写一段对于不同 GC 的总结，提交到 Github。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1期第一课补充笔记</title>
      <link href="2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Java1%E6%9C%9F%E7%AC%AC%E4%B8%80%E8%AF%BE%E8%A1%A5%E5%85%85%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/19/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Java1%E6%9C%9F%E7%AC%AC%E4%B8%80%E8%AF%BE%E8%A1%A5%E5%85%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>学习理论说，仅仅听讲只能获得知识的5-10%，只有经过实践和思考，才能变成你的经验。</p><p>1）一定要看预习材料，那是我和铁锚老师的jvm书稿的一部分，很详细。</p><p>2）课上的两个小时是帮大家组织起技术体系，带大家操作演示。</p><p>3）课后动手实践，按课上的演练自己是实验，最后完成必做作业。</p><h2 id="1、字节码"><a href="#1、字节码" class="headerlink" title="1、字节码"></a>1、字节码</h2><p>字节码的本质是java代码编译后的，给jvm虚拟机运行的操作指令。</p><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><p>字节码不需要全部掌握，大家明白原理就好，面试一般问的也不会太多。</p><p>比如 0: new #2</p><p>表示的是本块代码的第一个指令是new 一个常量池里的第二个常量代表的类型的实例。</p><p>其中new的操作码二进制是bb，操作数是2，那么用二进制表示这条指令就是3个字节：bb 00 02，补上一个00是因为new后面跟两个操作数。（大家想想为什么需要2个操作数？ ）</p><h3 id="学以致用"><a href="#学以致用" class="headerlink" title="学以致用"></a>学以致用</h3><p>了解字节码有两个用途：</p><p>1）能够了解底层jvm执行的是什么，可以用来分析不同代码是否是等价的，如果不等价哪个方式更好。</p><p>比如for循环里用i++还是for(i:数组) 。通过课上的演示，我们知道他们是等价的。（大家想想，如果for : 里不是数组，而是list，字节码会怎么样？）</p><p>比如String a = “a” + “b”; String c = a + “c”; 通过字节码分析，我们知道：</p><p>编译后”a” + “b”直接变成了“ab”，相当于 a =“ab”；</p><p>字符串String作为一个类，是不能做+操作的，所以在字节码层面，都转换成了StringBuilder的append操作，上面的代码相当于String c = new StringBuilder().append(“ab”).append(“c”).toString(); </p><p>2）后面学习AOP的时候，有一大块是字节码操作和增强，这里的内容是那一部分的基础。</p><h2 id="2、类加载器（☆重点）"><a href="#2、类加载器（☆重点）" class="headerlink" title="2、类加载器（☆重点）"></a>2、类加载器（☆重点）</h2><p>类加载器负责把字节码文件或字节码的byte[]转换成为jvm中的类。</p><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><p>理解类加载器的原理和作用，加载时机，三类类加载器。</p><p>三个特性：双亲委托，加载依赖，类型缓存。</p><p>知道如何给项目程序添加依赖的jar或路径。</p><p>了解URLClassLoader的作用和跟扩展类加载器、应用类加载器的关系。</p><p>学会自定义简单的classloader。</p><h3 id="学以致用-1"><a href="#学以致用-1" class="headerlink" title="学以致用"></a>学以致用</h3><p>注意：JDK9里扩展类加载器和应用类加载器，不再继承URLClassLoader。</p><p>但是可以这些主动加载： Class.forName(“xxx”, new URLClassloader(“dddd”));</p><p>了解类加载器有几个用途：</p><p>1）能够清楚知道字节码是如何加载的；</p><p>2）能够分析程序加载了那些jar或路径，从而排查找不到类的错误问题；如果遇到了找不到方法或方法参数不匹配的错误问题，说明加载了错误版本的jar，也可以用相同方法排查；</p><p>3）可以实现自定义classloader，做加密、混淆等，保护我们的jar包不被反编译和破解；实际上通过自定义classloader，我们在类加载到jvm的时候可以做一些额外的处理（想想是不是跟AOP有点像？）；</p><p>4）早期实现动态加载，模块化都是基于自定义classloader的，如果我们实现两个自定义classloader，比如A和B，他们没有关系，且各自加载了一个叫Hello的类，这两个Hello的类型是不同的，这样就可以实现不同版本的类隔离（如果代码写的不恰当，也可能会出现所谓A的一个Hello类的实例，运行时做类型转换无法转换成B的Hello类型的错误）；</p><p>5）作业必做题与此相关。</p><p>需要注意的是：jdk代码里写死了，不允许自定义classloader加载以java.开头包名的类。</p><h2 id="3、Java内存模型（☆重点）"><a href="#3、Java内存模型（☆重点）" class="headerlink" title="3、Java内存模型（☆重点）"></a>3、Java内存模型（☆重点）</h2><p>类被加载到JVM中，代码运行时都需要使用内存，所以Java内存模型就是用来规定JVM内部的内存结构。</p><h3 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h3><p>了解栈、堆、非堆、堆外等内存，以及它们的关系和区别。</p><p>了解栈的结构，可以跟前面字节码执行对应起来。</p><p>了解堆的结构，新生代young gen，老年代old gen，新生代又包括eden和s0、s1</p><p>了解非堆和堆外是用来做什么的。</p><h3 id="学以致用-2"><a href="#学以致用-2" class="headerlink" title="学以致用"></a>学以致用</h3><p>了解内存模型有几个用途：</p><p>1）这一块是下一节课讲的GC的基础，也是第三个模块讲并发编程的基础，这一块熟悉了有利于学习GC和并发；</p><p>2）面试经常会被问到这个问题；</p><p>3）作业必做题与这一块有直接关系，多动手画一画，有助于面试时能比较好的讲清楚。</p><h2 id="4、命令行参数"><a href="#4、命令行参数" class="headerlink" title="4、命令行参数"></a>4、命令行参数</h2><p>JVM作为一个通用的虚拟计算机，是通过java命令来启动的，为了让JVM能够适应不同的需求环境，所以需要配置不同的参数使JVM更好的工作，这就是java命令执行的命令行参数。</p><h3 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h3><p>常用的命令行参数有哪些？</p><p>标准参数 -server</p><p>非标准参数 -Xmx，-XX：xxxx=yyyy</p><p>系统属性-Dxxx=yyy</p><h3 id="学以致用-3"><a href="#学以致用-3" class="headerlink" title="学以致用"></a>学以致用</h3><p>jvm内存配置经验：xmx ~ 不要超过系统可用内存的60-80%</p><p>例如 系统有4g可用内存 -&gt; 4g*0.6<del>0.8 -&gt; 可以设置xmx为2.4</del>3.2g</p><p>java参数目前有1000多个，其中GC相关的占一大半。具体参数相关的一些问题，我们下节课继续讲。</p><h2 id="5、课堂答疑"><a href="#5、课堂答疑" class="headerlink" title="5、课堂答疑"></a>5、课堂答疑</h2><p>其他的问题整理与回答：</p><p><a href="https://shimo.im/docs/rcxYt6PtQgkkyd8h">https://shimo.im/docs/rcxYt6PtQgkkyd8h</a></p><h2 id="6、其他资料"><a href="#6、其他资料" class="headerlink" title="6、其他资料"></a>6、其他资料</h2><p>官方对JDK/JRE、classloader和一些工具的说明：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/toc.html">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/toc.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210219092358.png!thumbnail" alt="img"></p><p>上图来源于：<a href="https://docs.oracle.com/javase/8/docs/">https://docs.oracle.com/javase/8/docs/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Week01-01 JVM 核心技术--基础知识</title>
      <link href="2021/02/18/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/02/18/java%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5/Week01-01-JVM-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第1课-JVM-核心技术–基础知识"><a href="#第1课-JVM-核心技术–基础知识" class="headerlink" title="第1课  JVM 核心技术–基础知识"></a>第1课  JVM 核心技术–基础知识</h1><p><strong>目录</strong></p><ol><li>JVM 基础知识：不积跬步，无以至千里</li><li>Java 字节码技术：不积细流，无以成江河</li><li>JVM 类加载器*：山不辞土，故能成其高</li><li>JVM 内存模型*：海不辞水，故能成其深</li><li>JVM 启动参数：博观而约取、厚积而薄发</li><li>第1课总结回顾与作业实践</li></ol><h2 id="1-JVM-核心技术–基础知识"><a href="#1-JVM-核心技术–基础知识" class="headerlink" title="1. JVM 核心技术–基础知识"></a>1. JVM 核心技术–基础知识</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a><strong>编程语言</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218232956.png" alt="image-20210218232956278"></p><p>面向过程、面向对象、面向函数</p><p>静态类型、动态类型</p><p>编译执行、解释执行</p><p>有虚拟机、无虚拟机</p><p>有 GC、无 GC</p><p>Java 是一种面向对象、静态类型、编译执行，</p><p>有 VM/GC 和运行时、跨平台的高级语言。</p><h3 id="编程语言跨平台"><a href="#编程语言跨平台" class="headerlink" title="编程语言跨平台"></a><strong>编程语言跨平台</strong></h3><p><strong>源代码跨平台</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218233210.png" alt="image-20210218233210633"></p><p><strong>二进制跨平台</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218233411.png" alt="image-20210218233411294"></p><p><strong>Java、C++、Rust 的区别</strong></p><p><strong>C/C++</strong> 完全相信而且惯着程序员，让大家自行管理内存，可以编写很自由的代码，但一不小心就会造成内存泄漏等问题，导致程序崩溃。</p><p><strong>Java/Golang</strong> 完全不相信程序员，但也惯着程序员。所有的内存生命周期都由 JVM 运行时统一管理。 在绝大部分场景下，你可以非常自由的写代码，而且不用关心内存到底是什么情况。 内存使用有问题的时候，我们可以通过 JVM 来进行信息相关的分析诊断和调整。 这也是本课程的目标。</p><p><strong>Rust</strong> 语言选择既不相信程序员，也不惯着程序员。 让你在写代码的时候，必须清楚明白的用 Rust 的规则管理好你的变量，好让机器能明白高效地分析和管理内存。 但是这样会导致代码不利于人的理解，写代码很不自由，学习成本也很高。</p><h3 id="字节码、类加载器、虚拟机"><a href="#字节码、类加载器、虚拟机" class="headerlink" title="字节码、类加载器、虚拟机"></a><strong>字节码、类加载器、虚拟机</strong></h3><p>![image-20210218233626837](/Users/cutie/Library/Application Support/typora-user-images/image-20210218233626837.png)</p><h2 id="2-Java-字节码技术"><a href="#2-Java-字节码技术" class="headerlink" title="2. Java 字节码技术"></a>2. Java 字节码技术</h2><h3 id="什么是字节码？"><a href="#什么是字节码？" class="headerlink" title="什么是字节码？"></a><strong>什么是字节码？</strong></h3><p>Java bytecode 由单字节（byte）的指令组成，理论上最多支持 256 个操作码（opcode）。</p><p>实际上 Java 只使用了200左右的操作码， 还有一些操作码则保留给调试操作。</p><p>根据指令的性质，主要分为四个大类：</p><ol><li>栈操作指令，包括与局部变量交互的指令</li><li>程序流程控制指令</li><li>对象操作指令，包括方法调用指令</li><li>算术运算以及类型转换指令</li></ol><p>1，java的所有的操作都发生在栈上；是用来真正做计算的</p><p>2，3，4都跟java语法相关的</p><h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a><strong>生成字节码</strong></h3><p>假如有一个最简单的类，源代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234107.png" alt="image-20210218234107349"></p><p>编译：javac demo/jvm0104/HelloByteCode.java</p><p>查看字节码：javap -c demo.jvm0104.HelloByteCode</p><h3 id="最简单的字节码"><a href="#最简单的字节码" class="headerlink" title="最简单的字节码"></a><strong>最简单的字节码</strong></h3><p>结果如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234121.png" alt="image-20210218234120981"></p><p>上图使用助记符的方式展示出来的</p><p>aload_0 是助记符，是字节码里面的操作码。栈，本地变量表。</p><p>运行时候，变量挪到栈上，运行结束后，放回本地变量表。</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234217.png" alt="image-20210218234217321"></p><h3 id="复杂点的例子"><a href="#复杂点的例子" class="headerlink" title="复杂点的例子"></a><strong>复杂点的例子</strong></h3><p>进一步：javap -c -verbose demo.jvm0104.HelloByteCode</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234244.png" alt="image-20210218234244088"></p><p>52.0默认表示java8的版本，每上一个大版本，都会加1</p><p>flags表示类是public还是非public</p><p>Constant pool，常量池</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234303.png" alt="image-20210218234303117"></p><h3 id="字节码的运行时结构"><a href="#字节码的运行时结构" class="headerlink" title="字节码的运行时结构"></a><strong>字节码的运行时结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234343.png" alt="image-20210218234343475"></p><p>JVM 是一台基于栈的计算机器。</p><p>每个线程都有一个独属于自己的线程栈（JVM Stack），用于存储栈帧（Frame）。</p><p>每一次方法调用，JVM 都会自动创建一个栈帧。</p><p>栈帧由操作数栈， 局部变量数组以及一个 Class 引用组成。</p><p>Class 引用 指向当前方法在运行时常量池中对应的 Class。</p><h3 id="从助记符到二进制"><a href="#从助记符到二进制" class="headerlink" title="从助记符到二进制"></a><strong>从助记符到二进制</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234358.png" alt="image-20210218234358007"></p><h3 id="四则运行的例子"><a href="#四则运行的例子" class="headerlink" title="四则运行的例子"></a><strong>四则运行的例子</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234411.png" alt="image-20210218234411785"></p><h3 id="数值处理与本地变量表"><a href="#数值处理与本地变量表" class="headerlink" title="数值处理与本地变量表"></a><strong>数值处理与本地变量表</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234433.png" alt="image-20210218234433598"></p><p>i int， load 加载到栈，store 放回，const常量， dstore double类型的存储</p><p>i2d integer转换为double</p><h3 id="算数操作与类型转换"><a href="#算数操作与类型转换" class="headerlink" title="算数操作与类型转换"></a><strong>算数操作与类型转换</strong></h3><p>算数操作与类型转换</p><p>![image-20210218234443510](/Users/cutie/Library/Application Support/typora-user-images/image-20210218234443510.png)</p><p>byte，boolean 用int，是最小单位，32位</p><p>int（32位）和long（64位）是否是原子性的？32位机器处理long需要处理2次，64位只要处理一次，主流的都是原子操作</p><h3 id="一个完整的循环控制"><a href="#一个完整的循环控制" class="headerlink" title="一个完整的循环控制"></a><strong>一个完整的循环控制</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234507.png" alt="image-20210218234507284"></p><p>if_icmpge 比较大小，如果不符合的话跳转到43，iinc int类型的自增加1，goto 跑到第18个标号，</p><h3 id="方法调用的指令"><a href="#方法调用的指令" class="headerlink" title="方法调用的指令"></a><strong>方法调用的指令</strong></h3><p>方法调用的指令：</p><p>invokestatic，顾名思义，这个指令用于调用某个类的静态方法，这是方法调用指令中最快的一个。</p><p>invokespecial, 用来调用构造函数，但也可以用于调用同一个类中的 private 方法, 以及可见的超类方法。</p><p>invokevirtual，如果是具体类型的目标对象，invokevirtual 用于调用公共，受保护和package 级的私有方法。</p><p>invokeinterface，当通过接口引用来调用方法时，将会编译为 invokeinterface 指令。</p><p>invokedynamic，JDK7 新增加的指令，是实现“动态类型语言”（Dynamically TypedLanguage）支持而进行的升级改进，同时也是 JDK8 以后支持 lambda 表达式的实现基础。</p><p><strong>一个动态例子</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234718.png" alt="image-20210218234718062"></p><h2 id="3-JVM-类加载器"><a href="#3-JVM-类加载器" class="headerlink" title="3. JVM 类加载器"></a>3. JVM 类加载器</h2><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a><strong>类的生命周期</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234745.png" alt="image-20210218234745547"></p><ol><li>加载（Loading）：找 Class 文件</li><li>验证（Verification）：验证格式、依赖</li><li>准备（Preparation）：静态字段、方法表</li><li>解析（Resolution）：符号解析为引用</li><li>初始化（Initialization）：构造器、静态变量赋值、静态代码块</li><li>使用（Using）</li><li>卸载（Unloading）</li></ol><h3 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a><strong>类的加载时机</strong></h3><ol><li>当虚拟机启动时，初始化用户指定的主类，就是启动执行的 main 方法所在的类；</li><li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类，就是 new一个类的时候要初始化；</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li><li>子类的初始化会触发父类的初始化；</li><li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类，其实跟前面一样，反射调用要么是已经有实例了，要么是静态方法，都需要初始化；</li><li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li></ol><p>1主类，2new，3，4静态调用，5父类，6default，7，8反射 </p><h3 id="不会初始化（可能会加载）"><a href="#不会初始化（可能会加载）" class="headerlink" title="不会初始化（可能会加载）"></a><strong>不会初始化（可能会加载）</strong></h3><ol><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</li><li>通过类名获取 Class 对象，不会触发类的初始化，Hello.class 不会让 Hello 类初始化。</li><li>通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。Class.forName（“jvm.Hello”）默认会加载 Hello 类。</li><li>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作（加载了，但是不初始化）。</li></ol><h3 id="三类加载器"><a href="#三类加载器" class="headerlink" title="三类加载器"></a><strong>三类加载器</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234847.png" alt="image-20210218234847003"></p><p>三类加载器：</p><ol><li>启动类加载器（BootstrapClassLoader）</li><li>扩展类加载器（ExtClassLoader）</li><li>应用类加载器（AppClassLoader）</li></ol><p>加载器特点：</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234857.png" alt="image-20210218234857042"></p><p>避免类被重复加载</p><ol><li>双亲委托：业务类加载器，需要用一个类的时候，父类加载器里面是否该类已经被加载了，如果没有，从祖父加载器中找是否已经加载了，如果找到了就给应用加载器使用</li><li>负责依赖：</li><li>缓存加载：类加载了就缓存起来，对每个类加载器来说，同一个类型的类只会被加载一次</li></ol><p>jdk9之前ExtClassLoader和AppClassLoader的父类都是URLClassLoader</p><h3 id="显示当前ClassLoader-加载了哪些-Jar？"><a href="#显示当前ClassLoader-加载了哪些-Jar？" class="headerlink" title="显示当前ClassLoader 加载了哪些 Jar？"></a><strong>显示当前ClassLoader 加载了哪些 Jar？</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218234951.png" alt="image-20210218234951527"></p><h3 id="自定义-ClassLoader"><a href="#自定义-ClassLoader" class="headerlink" title="自定义 ClassLoader"></a><strong>自定义 ClassLoader</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235043.png" alt="image-20210218235043536"></p><h3 id="添加引用类的几种方式"><a href="#添加引用类的几种方式" class="headerlink" title="添加引用类的几种方式"></a><strong>添加引用类的几种方式</strong></h3><p>1、放到 JDK 的 lib/ext 下，或者-Djava.ext.dirs</p><p>2、 java –cp/classpath 或者 class 文件放到当前路径</p><p>3、自定义 ClassLoader 加载</p><p>4、拿到当前执行类的 ClassLoader，反射调用 addUrl 方法添加 Jar 或路径(JDK9 无效)。（JDK9之后只要一行）</p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235342.png" alt="image-20210218235342159"></p><h2 id="4-JVM-内存模型"><a href="#4-JVM-内存模型" class="headerlink" title="4.JVM 内存模型"></a>4.JVM 内存模型</h2><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a><strong>JVM 内存结构</strong></h3><p>![image-20210218235435915](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235435915.png)</p><p>每个线程都只能访问自己的线程栈。</p><p>每个线程都不能访问（看不见）其他线程的局部变量。</p><p>所有原生类型的局部变量都存储在线程栈中，因此对其他线程是不可见的。</p><p>线程可以将一个原生变量值的副本传给另一个线程，但不能共享原生局部变量本身。</p><p>堆内存中包含了 Java 代码中创建的所有对象，不管是哪个线程创建的。 其中也涵盖了包装类型（例如 Byte，Integer，Long 等）。</p><p>不管是创建一个对象并将其赋值给局部变量， 还是赋值给另一个对象的成员变量， 创建的对象都会被保存到堆内存中。</p><p><strong>JVM 内存结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235503.png" alt="image-20210218235503518"></p><p>如果是原生数据类型的局部变量，那么它的内容就全部保留在线程栈上。</p><p>如果是对象引用，则栈中的局部变量槽位中保存着对象的引用地址，而实际的对象内容保存在堆中。</p><p>对象的成员变量与对象本身一起存储在堆上, 不管成员变量的类型是原生数值，还是对象引用。类的静态变量则和类定义一样都保存在堆中。</p><p><strong>JVM 内存结构</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235528.png" alt="image-20210218235528760"></p><p>总结一下：方法中使用的原生数据类型和对象引用地址在栈上存储；对象、对象成员与类定义、静态变量在堆上。</p><p>堆内存又称为“共享堆”，堆中的所有对象，可以被所有线程访问, 只要他们能拿到对象的引用地址。如果一个线程可以访问某个对象时，也就可以访问该对象的成员变量。</p><p>如果两个线程同时调用某个对象的同一方法，则它们都可以访问到这个对象的成员变量，但每个线程的局部变量副本是独立的。</p><h3 id="JVM-内存整体结构"><a href="#JVM-内存整体结构" class="headerlink" title="JVM 内存整体结构"></a><strong>JVM 内存整体结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235541.png" alt="image-20210218235541105"></p><p>每启动一个线程，JVM 就会在栈空间栈分配对应的 线程栈, 比如 1MB 的空间（-Xss1m）。</p><p>线程栈也叫做 Java 方法栈。 如果使用了JNI 方法，则会分配一个单独的本地方法栈(Native Stack)。</p><p>线程执行过程中，一般会有多个方法组成调用栈（Stack Trace）, 比如 A 调用 B，B调用 C。。。每执行到一个方法，就会创建对应的 栈帧（Frame）。</p><h3 id="JVM-栈内存结构"><a href="#JVM-栈内存结构" class="headerlink" title="JVM 栈内存结构"></a><strong>JVM 栈内存结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235553.png" alt="image-20210218235553092"></p><p>栈帧是一个逻辑上的概念，具体的大小在一个方法编写完成后基本上就能确定。</p><p>比如返回值 需要有一个空间存放吧，每个局部变量都需要对应的地址空间，此外还有给指令使用的 操作数栈，以及 class 指针（标识这个栈帧对应的是哪个类的方法,指向非堆里面的 Class 对象）。</p><h3 id="JVM-堆内存结构"><a href="#JVM-堆内存结构" class="headerlink" title="JVM 堆内存结构"></a><strong>JVM 堆内存结构</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235608.png" alt="image-20210218235608903"></p><p>堆内存是所有线程共用的内存空间，JVM 将Heap 内存分为年轻代（Young generation）和老年代（Old generation, 也叫 Tenured）两部分。</p><p>年轻代还划分为 3 个内存池，新生代（Edenspace）和存活区（Survivor space）, 在大部分GC 算法中有 2 个存活区（S0, S1），在我们可以观察到的任何时刻，S0 和 S1 总有一个是空的,但一般较小，也不浪费多少空间。</p><p>Non-Heap 本质上还是 Heap，只是一般不归 GC管理，里面划分为 3 个内存池。Metaspace, 以前叫持久代（永久代, Permanentgeneration）, Java8 换了个名字叫 Metaspace.</p><p>CCS, Compressed Class Space, 存放 class 信息的，和 Metaspace 有交叉。</p><p>Code Cache, 存放 JIT 编译器编译后的本地机器代码。</p><h3 id="CPU-与内存行为"><a href="#CPU-与内存行为" class="headerlink" title="CPU 与内存行为"></a><strong>CPU 与内存行为</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235702.png" alt="image-20210218235620082"></p><p>CPU 乱序执行</p><p>volatile 关键字</p><p>原子性操作</p><p>内存屏障</p><h3 id="小结：什么是-JMM"><a href="#小结：什么是-JMM" class="headerlink" title="小结：什么是 JMM?"></a><strong>小结：什么是 JMM?</strong></h3><p>所有的对象(包括内部的实例成员变量)，static 变量，以及数组，都必须存放到堆内存中。</p><p>局部变量，方法的形参/入参，异常处理语句的入参不允许在线程之间共享，所以不受内存模型的影响。</p><p>多个线程同时对一个变量访问时【读取/写入】，这时候只要有某个线程执行的是写操作，那么这种现象就称之为“冲突”。</p><p>可以被其他线程影响或感知的操作，称为线程间的交互行为， 可分为： 读取、写入、同步操作、外部操作等等。 其中同步操作包括：对 volatile 变量的读写，对管程（monitor）的锁定与解锁，线程的起始操作与结尾操作，线程启动和结束等等。 外部操作则是指对线程执行环境之外的操作，比如停止其他线程等等。</p><p>JMM 规范的是线程间的交互操作，而不管线程内部对局部变量进行的操作。</p><p>JMM 规范对应的是“[JSR-133. JavaMemory Model and ThreadSpecification]”，《Java 语言规范》的 [$17.4. Memory Model章节]</p><p>JMM 规范明确定义了不同的线程之间，通过哪些方式，在什么时候可以看见其他线程保存到共享变量中的值；以及在必要时，如何对共享变量的访问进行同步。这样的好处是屏蔽各种硬件平台和操作系统之间的内存访问差异，实现了 Java 并发程序真正的跨平台。</p><h2 id="5-JVM-启动参数"><a href="#5-JVM-启动参数" class="headerlink" title="5.JVM 启动参数"></a>5.JVM 启动参数</h2><h3 id="JVM-启动参数"><a href="#JVM-启动参数" class="headerlink" title="JVM 启动参数"></a><strong>JVM 启动参数</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235702.png" alt="image-20210218235702045"></p><p><strong>JVM 启动参数</strong></p><p>![image-20210218235740388](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235740388.png)</p><p>-server</p><p>-Dfile.encoding=UTF-8</p><p>-Xmx8g</p><p>-XX:+UseG1GC</p><p>-XX:MaxPermSize=256m</p><p>以-开头为标准参数，所有的 JVM 都要实现这些参数，并且向后兼容。</p><p>-D 设置系统属性。</p><p>以 -X 开头为非标准参数， 基本都是传给 JVM 的，默认 JVM 实现这些参数的功能，但是并不保证所有 JVM 实现都满足，且不保证向后兼容。 可以使用 java -X 命令来查看当前 JVM 支持的非标准参数。</p><p>以 –XX：开头为非稳定参数, 专门用于控制 JVM的行为，跟具体的 JVM 实现有关，随时可能会在下个版本取消。</p><p>XX：+-Flags 形式, +- 是对布尔值进行开关。</p><p>XX：key=value 形式, 指定某个选项的值。</p><p><strong>JVM 启动参数</strong></p><ol><li>系统属性参数</li><li>运行模式参数</li><li>堆内存设置参数</li><li>GC 设置参数</li><li>分析诊断参数</li><li>JavaAgent 参数</li></ol><h3 id="JVM-启动参数-系统属性"><a href="#JVM-启动参数-系统属性" class="headerlink" title="JVM 启动参数-系统属性"></a><strong>JVM 启动参数-系统属性</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/cutieagain/images@main/20210218235809.png" alt="image-20210218235809898"></p><p>-Dfile.encoding=UTF-8</p><p>-Duser.timezone=GMT+08</p><p>-Dmaven.test.skip=true</p><p>-Dio.netty.eventLoopThreads=8</p><p>System.setProperty(“a”,”A100”);</p><p>String a=System.getProperty(“a”);</p><p><strong>Linux上还可以通过: a=A100 java XXXJVM</strong></p><h3 id="启动参数-运行模式"><a href="#启动参数-运行模式" class="headerlink" title="启动参数-运行模式"></a><strong>启动参数-运行模式</strong></h3><ol><li>-server：设置 JVM 使用 server 模式，特点是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境。在具有 64 位能力的 JDK 环境下将默认启用该模式，而忽略 -client 参数。</li><li>-client ：JDK1.7 之前在32位的 x86 机器上的默认值是 -client 选项。设置 JVM 使用 client 模式，特点是启动速度比较快，但运行时性能和内存管理效率不高，通常用于客户端应用程序或者 PC 应用开发和调试。此外，我们知道 JVM 加载字节码后，可以解释执行，也可以编译成本地代码再执行，所以可以配置 JVM 对字节码的处理模式：</li><li>-Xint：在解释模式（interpreted mode）下运行，-Xint 标记会强制 JVM 解释执行所有的字节码，这当然会降低运行速度，通常低10倍或更多。</li><li>-Xcomp：-Xcomp 参数与-Xint 正好相反，JVM 在第一次使用时会把所有的字节码编译成本地代码，从而带来最大程度的优化。【注意预热】</li><li>-Xmixed：-Xmixed 是混合模式，将解释模式和编译模式进行混合使用，有 JVM 自己决定，这是 JVM 的默认模式，也是推荐模式。 我们使用 java -version 可以看到 mixed mode 等信息。</li></ol><p><strong>JVM 启动参数-堆内存</strong></p><p>![image-20210218235833782](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235833782.png)</p><p>-Xmx, 指定最大堆内存。 如 -Xmx4g. 这只是限制了 Heap 部分的最大值为4g。这个内存不包括栈内存，也不包括堆外使用的内存。</p><p>-Xms, 指定堆内存空间的初始大小。 如 -Xms4g。 而且指定的内存大小，并不是操作系统实际分配的初始值，而是GC先规划好，用到才分配。 专用服务器上需要保持 –Xms 和 –Xmx 一致，否则应用刚启动可能就有好几个 FullGC。当两者配置不一致时，堆内存扩容可能会导致性能抖动。</p><p>-Xmn, 等价于 -XX:NewSize，使用 G1 垃圾收集器 不应该 设置该选项，在其他的某些业务场景下可以设置。官方建议设置为 -Xmx 的 1/2 ~ 1/4.</p><p>-XX：MaxPermSize=size, 这是 JDK1.7 之前使用的。Java8 默认允许的Meta空间无限大，此参数无效。</p><p>-XX：MaxMetaspaceSize=size, Java8 默认不限制 Meta 空间, 一般不允许设置该选项。</p><p>-XX：MaxDirectMemorySize=size，系统可以使用的最大堆外内存，这个参数跟 -Dsun.nio.MaxDirectMemorySize 效果相同。</p><p>-Xss, 设置每个线程栈的字节数。 例如 -Xss1m 指定线程栈为 1MB，与-XX:ThreadStackSize=1m 等价</p><p>堆内（Xms-Xmx）</p><p>非堆+堆外</p><ol><li>如果什么都不配置会如何？</li><li>Xmx 是否与 Xms 设置相等？</li><li>Xmx 设置为机器内存的什么比例合适？</li><li>作业：画一下 Xmx、Xms、Xmn、Meta、</li></ol><p>DirectMemory、Xss 这些内存参数的关系</p><h3 id="JVM-启动参数-GC-相关"><a href="#JVM-启动参数-GC-相关" class="headerlink" title="JVM 启动参数 - GC 相关"></a><strong>JVM 启动参数 - GC 相关</strong></h3><p>![image-20210218235908235](/Users/cutie/Library/Application Support/typora-user-images/image-20210218235908235.png)</p><p>-XX：+UseG1GC：使用 G1 垃圾回收器</p><p>-XX：+UseConcMarkSweepGC：使用 CMS 垃圾回收器</p><p>-XX：+UseSerialGC：使用串行垃圾回收器</p><p>-XX：+UseParallelGC：使用并行垃圾回收器</p><p>// Java 11+</p><p>-XX：+UnlockExperimentalVMOptions -XX:+UseZGC</p><p>// Java 12+</p><ol><li>各个 JVM 版本的默认 GC 是什么？ -XX：+UnlockExperimentalVMOptions -XX:+UseShenandoahGC</li></ol><h3 id="JVM-启动参数-分析诊断"><a href="#JVM-启动参数-分析诊断" class="headerlink" title="JVM 启动参数-分析诊断"></a><strong>JVM 启动参数-分析诊断</strong></h3><p>-XX：+-HeapDumpOnOutOfMemoryError 选项, 当 OutOfMemoryError 产生，即内存溢出(堆内或持久代)时，自动 Dump 堆内存。</p><p>示例用法： java -XX:+HeapDumpOnOutOfMemoryError -Xmx256m ConsumeHeap</p><p>-XX：HeapDumpPath 选项, 与 HeapDumpOnOutOfMemoryError 搭配使用, 指定内存溢出时 Dump文件的目录。</p><p>如果没有指定则默认为启动 Java 程序的工作目录。</p><p>示例用法： java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/ ConsumeHeap</p><p>自动 Dump 的 hprof 文件会存储到 /usr/local/ 目录下。</p><p>-XX：OnError 选项, 发生致命错误时（fatal error）执行的脚本。</p><p>例如, 写一个脚本来记录出错时间, 执行一些命令, 或者 curl 一下某个在线报警的 url.</p><p>示例用法：java -XX:OnError=”gdb - %p” MyApp</p><p>可以发现有一个 %p 的格式化字符串，表示进程 PID。</p><p>-XX：OnOutOfMemoryError 选项, 抛出 OutOfMemoryError 错误时执行的脚本。</p><p>-XX：ErrorFile=filename 选项, 致命错误的日志文件名,绝对路径或者相对路径。</p><p>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1506，远程调试</p><h3 id="JVM-启动参数-JavaAgent"><a href="#JVM-启动参数-JavaAgent" class="headerlink" title="JVM 启动参数 -JavaAgent"></a><strong>JVM 启动参数 -JavaAgent</strong></h3><p>Agent 是 JVM 中的一项黑科技, 可以通过无侵入方式来做很多事情，比如注入 AOP 代码，执行统计等等，权限非常大。这里简单介绍一下配置选项，详细功能需要专门来讲。</p><p>设置 agent 的语法如下:</p><p>agentlib:libname[=options] 启用 native 方式的 agent, 参考 LD_LIBRARY_PATH 路径。</p><p>agentpath:pathname[=options] 启用 native 方式的 agent。</p><p>javaagent:jarpath[=options] 启用外部的 agent 库, 比如 pinpoint.jar 等等。</p><p>Xnoagent 则是禁用所有 agent。</p><p>以下示例开启 CPU 使用时间抽样分析:</p><p>JAVA_OPTS=”-agentlib:hprof=cpu=samples,file=cpu.samples.log”</p><h2 id="6-总结回顾与作业实践"><a href="#6-总结回顾与作业实践" class="headerlink" title="6.总结回顾与作业实践"></a>6.总结回顾与作业实践</h2><h3 id="第1课总结回顾"><a href="#第1课总结回顾" class="headerlink" title="第1课总结回顾"></a><strong>第1课总结回顾</strong></h3><p>字节码技术</p><p>类加载器</p><p>内存模型</p><p>启动参数</p><h3 id="第1课作业实践"><a href="#第1课作业实践" class="headerlink" title="第1课作业实践"></a><strong>第1课作业实践</strong></h3><p>1、（可选）自己写一个简单的 Hello.java，里面需要涉及基本类型，四则运行，if 和 for，然后自己分析一下对应的字节码，有问题群里讨论。</p><p>2、（必做）自定义一个 Classloader，加载一个 Hello.xlass 文件，执行 hello 方法，此文件内容是一个 Hello.class 文件所有字节（x=255-x）处理后的文件。文件群里提供。</p><p>3、（必做）画一张图，展示 Xmx、Xms、Xmn、Meta、DirectMemory、Xss 这些内存参数的关系。</p><p>4、（可选）检查一下自己维护的业务系统的 JVM 参数配置，用 jstat 和 jstack、jmap 查看一下详情，并且自己独立分析一下大概情况，思考有没有不合理的地方，如何改进。</p><p>注意：如果没有线上系统，可以自己 run 一个 web/java 项目。</p><h2 id="7-其他笔记"><a href="#7-其他笔记" class="headerlink" title="7.其他笔记"></a>7.其他笔记</h2><p>java特性</p><p>GC - 垃圾回收，jvm内存管理器；golang和rust在编译时候就进行垃圾回收处理，不需要虚拟机。java是二进制跨平台，c&amp;c++是源代码跨平台的。</p><p>java跨平台，一直向前兼容，生态完整（任何东西java实现都可以找到）。</p><p><strong>总结下学了什么，有哪些点没懂？</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极客时间 </tag>
            
            <tag> 秦金卫 </tag>
            
            <tag> 极客大学 </tag>
            
            <tag> Java 进阶训练营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/18/hello-world/"/>
      <url>2021/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
